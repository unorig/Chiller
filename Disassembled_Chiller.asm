ProgrammableLogicArray = $01
IRQExecAddr1 = $0314
IRQExecAddr2 = $0315
Sprite0_X = $d000
Sprite0_Y = $d001
Sprite1_X = $d002
Sprite1_Y = $d003
Sprite2_X = $d004
Sprite2_Y = $d005
Sprite3_X = $d006
Sprite3_Y = $d007
Sprite4_X = $d008
Sprite4_Y = $d009
Sprite5_X = $d00a
Sprite5_Y = $d00b
Sprite6_X = $d00c
Sprite6_Y = $d00d
Sprite7_X = $d00e
Sprite7_Y = $d00f
Sprite_upper_X = $d010
ScreenControlRegister = $d011
CurrentRasterLine = $d012
SpriteEnableRegister = $d015
ScreenControl = $d016
SpriteDoubleHeight = $d017
VIC2MemSetup = $d018
IRQStatusRegister = $d019
IRQControlRegister = $d01a
SpritePriority = $d01b
SpriteMulticolor = $d01c
SpriteDoubleWidth = $d01d
SpriteSpriteCollision = $d01e
SpriteBackgroundCollision = $d01f
BorderColour = $d020
BackgroundColour = $d021
ExtraBackgroundColor1 = $d022
ExtraBackgroundColor2 = $d023
ExtraBackgroundColor3 = $d024
ExtraSpriteColor1 = $d025
ExtraSpriteColor2 = $d026
Sprite0Colour = $d027
Sprite1Colour = $d028
Sprite2Colour = $d029
Sprite3Colour = $d02a
Sprite4Colour = $d02b
Sprite5Colour = $d02c
Sprite6Colour = $d02d
Sprite7Colour = $d02e
Voice1Frequency1 = $d400
Voice1Frequency2 = $d401
Voice1PulseWidth1 = $d402
Voice1PulseWidth2 = $d403
Voice1Control = $d404
Voice1AttackDecayLength = $d405
Voice1SustainVolRelease = $d406
Voice2Frequency1 = $d407
Voice2Frequency2 = $d408
Voice2PulseWidth1 = $d409
Voice2PulseWidth2 = $d40a
Voice2Control = $d40b
Voice2AttackDecayLength = $d40c
Voice2SustainVolRelease = $d40d
Voice3Frequency1 = $d40e
Voice3Frequency2 = $d40f
Voice3PulseWidth1 = $d410
Voice3PulseWidth2 = $d411
Voice3Control = $d412
Voice3AttackDecayLength = $d413
Voice3SustainVolRelease = $d414
FilterCutOff1 = $d415
FilterCutOff2 = $d416
FilterControl = $d417
KeyJoy2 = $dc00
KeyJoy1 = $dc01
KeyJoy1_DataDirection = $dc02
CIA1PortBDataDirection = $dc03
CIA1IRQControlStatus = $dc0d
TimerAControl = $dc0e
KeyJoy2_DataDirection = $dd02
CIA2PortBDataDirection = $dd03
CIA2IRQControlStatus = $dd0d
CHRIN = $ffcf
CHROUT = $ffd2
GETIN = $ffe4

; Chiller variables

Adr_MagicCrossNumLeft   = $041c
Adr_MagicCrossNumRight  = $041d

Var_PlayerDirection     = $2AFE

GoSlowRedZone           = $450C

BoyGirlToggle           = $5A08

Var_BinaryEnemyNum      = $CF08
Var_JumpDirection       = $C19C
DownInput               = $C1EC
LeftRightInput          = $C1ED
UpInput                 = $C1EE

Var_GameOverFlag        = $CF7D

; Game

*= $0000



; Memory $0000
            .byte $2F,$36,$00,$AA,$B1,$91,$B3,$22,$22,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$18,$08,$19,$16,$00,$0A,$76,$A3,$00,$00,$00,$00
            .byte $00,$00,$40,$A3,$B3,$BD,$00,$00,$00,$00,$00,$01,$08,$01,$CE,$01
            .byte $CE,$01,$CE,$00,$A0,$00,$00,$00,$A0,$40,$00,$00,$00,$00,$08,$00
            .byte $00,$00,$08,$00,$00,$00,$00,$24,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$03,$4C,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$8C,$00,$00,$08,$18,$00,$00,$00,$8C,$81,$60,$00,$00,$00,$00
            .byte $00,$80,$A3,$E6,$7A,$D0,$02,$E6,$7B,$AD,$0B,$08,$C9,$3A,$B0,$0A
            .byte $C9,$20,$F0,$EF,$38,$E9,$30,$38,$E9,$D0,$60,$80,$4F,$C7,$52,$58
            .byte $00,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$03,$00,$00,$80,$00,$00
            .byte $00,$00,$4D,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$FF
            .byte $00,$00,$3C,$03,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$A0,$30,$FD,$40,$00,$00,$00,$06,$00,$40,$FF,$0B,$20,$00
            .byte $00,$F0,$04,$00,$00,$27,$06,$0A,$00,$84,$84,$84,$84,$84,$84,$84
            .byte $85,$85,$85,$85,$85,$85,$86,$86,$86,$86,$86,$86,$86,$87,$87,$87
            .byte $87,$87,$87,$F0,$D8,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$20
            .byte $33,$38,$39,$31,$31,$00,$30,$30,$30,$30,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
            .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
            .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
            .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
            .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
            .byte $FF,$FF,$FF,$FF,$FF,$7D,$EA,$0B,$06,$7D,$EA,$0E,$BC,$81,$64,$B8
            .byte $0C,$BD,$BA,$14,$57,$FC,$2D,$46,$E1,$E9,$A7,$A6,$AD,$A7,$32,$A5
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$08,$00,$A0,$00,$0E,$0E,$04,$0A,$00,$04,$0A,$00,$00,$48
            .byte $EB,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $8B,$E3,$83,$A4,$7C,$A5,$1A,$A7,$E4,$A7,$86,$AE,$00,$00,$00,$00
            .byte $4C,$48,$B2,$00,$31,$EA,$66,$FE,$47,$FE,$4A,$F3,$91,$F2,$0E,$F2
            .byte $50,$F2,$33,$F3,$57,$F1,$CA,$F1,$EA,$F6,$3E,$F1,$2F,$F3,$66,$FE
            .byte $A5,$F4,$ED,$F5,$A9,$37,$85,$01,$58,$20,$59,$A6,$4C,$AE,$A7,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
            .byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
            .byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$2A,$2A,$2A,$2A
            .byte $20,$03,$0F,$0D,$0D,$0F,$04,$0F,$12,$05,$20,$36,$34,$20,$02,$01
            .byte $13,$09,$03,$20,$16,$32,$20,$2A,$2A,$2A,$2A,$20,$20,$20,$20,$20
            .byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
            .byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
            .byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$36,$34,$0B,$20,$12,$01,$0D
            .byte $20,$13,$19,$13,$14,$05,$0D,$20,$20,$33,$38,$39,$31,$31,$20,$02
            .byte $01,$13,$09,$03,$20,$02,$19,$14,$05,$13,$20,$06,$12,$05,$05,$20
            .byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
            .byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
            .byte $20,$20,$20,$20,$20,$20,$20,$20,$12,$05,$01,$04,$19,$2E,$20,$20
            .byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
            .byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
            .byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
            .byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
            .byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
            .byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
            .byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
            .byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
            .byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
            .byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
            .byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
            .byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
            .byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
            .byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
            .byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
            .byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
            .byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
            .byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
            .byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
            .byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
            .byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
            .byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
            .byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
            .byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
            .byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
            .byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
            .byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
            .byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
            .byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
            .byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
            .byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
            .byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
            .byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
            .byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
            .byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
            .byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
            .byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
            .byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
            .byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
            .byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
            .byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
            .byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
            .byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
            .byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
            .byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
            .byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
            .byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
            .byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
            .byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
            .byte $20,$20,$20,$20,$20,$20,$20,$20,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
            .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
            .byte $00,$16,$08,$40,$00,$9E,$32,$30,$37,$32,$20,$28,$41,$4E,$54,$49
            .byte $53,$4F,$46,$54,$29,$00,$00,$00

; Memory $0818
                    LDX #$00                        ; (0818) Set X to #$00 (0 / 00000000)

l_081A
                    LDA $0900,X                     ; (081A) Load A with $0900,X
                    STA $CE00,X                     ; (081D) Store A to $CE00,X
                    LDA $0A00,X                     ; (0820) Load A with $0A00,X
                    STA $CF00,X                     ; (0823) Store A to $CF00,X
                    INX                             ; (0826) Increment X
                    BNE l_081A                      ; (0827) Branch to $081A if Not Equal

l_0829
                    LDA $08D0,X                     ; (0829) Load A with $08D0,X
                    STA Sprite0_X,X                 ; (082C) Store A to $D000,X
                    INX                             ; (082F) Increment X
                    CPX #$30                        ; (0830) Subtract #$30 from X (48 / 00110000)
                    BNE l_0829                      ; (0832) Branch to $0829 if Not Equal
                    JMP l_2DFA                      ; (0834) Jump to $2DFA

; Memory $0837
            .byte $41,$4E,$54,$49,$53,$4F,$46,$54,$41,$4E,$54,$49,$53,$4F,$46,$54
            .byte $41,$4E,$54,$49,$53,$4F,$46,$54,$41,$4E,$54,$49,$53,$4F,$46,$54
            .byte $41,$4E,$54,$49,$53,$4F,$46,$54,$41,$4E,$54,$49,$53,$4F,$46,$54
            .byte $41,$4E,$54,$49,$53,$4F,$46,$54,$41,$4E,$54,$49,$53,$4F,$46,$54
            .byte $41,$4E,$54,$49,$53,$4F,$46,$54,$41,$4E,$54,$49,$53,$4F,$46,$54
            .byte $41,$4E,$54,$49,$53,$4F,$46,$54,$41,$4E,$54,$49,$53,$4F,$46,$54
            .byte $41,$4E,$54,$49,$53,$4F,$46,$54,$41,$4E,$54,$49,$53,$4F,$46,$54
            .byte $41,$4E,$54,$49,$53,$4F,$46,$54,$41,$4E,$54,$49,$53,$4F,$46,$54
            .byte $41,$4E,$54,$49,$53,$4F,$46,$54,$41,$4E,$54,$49,$53,$4F,$46,$54
            .byte $41,$4E,$54,$49,$53,$4F,$46,$54,$2C,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$1B,$04,$D1,$00,$00,$C8
            .byte $00,$15,$79,$F0,$00,$00,$00,$00,$00,$F6,$F6,$F1,$F2,$F3,$F4,$F0
            .byte $F1,$F2,$F3,$F4,$F5,$F6,$F7,$FC,$FF,$DD,$60,$9D,$4F,$CF,$A9,$FD
            .byte $2D,$15,$D0,$8D,$15,$D0,$4C,$6B,$CE,$60,$A2,$06,$FE,$05,$04,$BD
            .byte $05,$04,$C9,$BA,$D0,$0A,$A9,$B0,$9D,$05,$04,$CA,$E0,$00,$D0,$EC
            .byte $60,$A2,$06,$DE,$05,$04,$BD,$05,$04,$C9,$AF,$D0,$0D,$A9,$B9,$9D
            .byte $05,$04,$CA,$E0,$00,$D0,$EC,$20,$11,$CE,$60,$AD,$5C,$CF,$8D,$53
            .byte $CE,$AD,$5A,$CF,$C9,$00,$F0,$09,$CE,$5A,$CF,$20,$11,$CE,$4C,$48
            .byte $CE,$AD,$5B,$CF,$C9,$00,$F0,$0B,$CE,$5B,$CF,$A9,$FF,$8D,$5A,$CF
            .byte $4C,$52,$CE,$60,$AE,$4E,$CF,$BD,$60,$45,$8D,$5A,$CF,$BD,$65,$45
            .byte $8D,$5B,$CF,$BD,$6A,$45,$8D,$5C,$CF,$20,$42,$CE,$60,$EA,$EA,$EA
            .byte $AD,$1E,$D0,$85,$FD,$29,$01,$D0,$03,$4C,$9D,$CD,$A5,$FD,$29,$02
            .byte $F0,$01,$60,$A2,$00,$A0,$00,$BD,$46,$CF,$25,$FD,$F0,$01,$C8,$E8
            .byte $E0,$06,$D0,$F3,$C0,$01,$F0,$01,$60,$A5,$FD,$29,$FC,$8D,$5E,$CF
            .byte $A2,$00,$C9,$04,$F0,$05,$E8,$4A,$4C,$B9,$CE,$8E,$5F,$CF,$A2,$02
            .byte $20,$44,$5B,$4C,$9D,$CD,$6F,$45,$29,$01,$D0,$04,$60,$4C,$7B,$2F
            .byte $4C,$A7,$2F,$20,$ED,$CA,$CE,$1A,$04,$AD,$1A,$04,$C9,$B0,$F0,$01
            .byte $60,$A9,$01,$8D,$7D,$CF,$60,$FE,$76,$CF,$BD,$08,$CF,$60,$EA,$8D
            .byte $27,$D0,$AD,$EC,$45,$4C,$ED,$CA,$05,$00,$EA,$7F,$06,$00,$06,$00
            .byte $00,$04,$08,$10,$20,$40,$00,$05,$0A,$0F,$14,$0F,$01,$A9,$03,$00
            .byte $03,$03,$02,$07,$02,$04,$00,$06,$EA,$EA,$EA,$20,$11,$4A,$4A,$4A
            .byte $4A,$4A,$01,$01,$01,$01,$01,$1C,$01,$09,$01,$09,$03,$03,$01,$01
            .byte $00,$A3,$A7,$97,$93,$3B,$A0,$A4,$94,$90,$38,$0D,$3C,$02,$09,$04
            .byte $08,$10,$20,$40,$80,$49,$10,$02,$00,$00,$00,$00,$00,$40,$08,$04
            .byte $08,$04,$0A,$00,$00,$11,$48,$20,$03,$0B,$00,$EA,$04,$EA,$FF,$00
            .byte $00,$A0,$A4,$94,$90,$38,$BA,$C1,$C8,$CF,$D6,$EA,$00,$00,$C1,$C6
            .byte $C6,$14,$00,$C6,$40,$B2,$00,$02,$00,$EA,$00,$0A,$0A,$0A,$0A,$0A
            .byte $0F,$00,$01,$00,$00,$00,$01,$00,$00,$01,$00,$01,$00,$00,$00,$00
            .byte $02,$01,$05,$04,$08,$1F,$28,$10,$08,$20,$8C,$85,$96,$85,$8C,$A0
            .byte $B0,$B0,$B1,$87,$81,$8D,$85,$A0,$8F,$96,$85,$92,$EC,$EC,$EC,$ED
            .byte $EC,$EC,$EC,$ED,$EC,$ED,$ED,$ED,$ED,$20,$33,$57,$A2,$00,$BD,$A1
            .byte $CF,$BD,$17,$06,$AD,$1A,$D8,$A9,$01,$EA,$9D,$38,$D8,$BD,$AA,$CF
            .byte $9D,$38,$04,$E8,$E0,$09,$D0,$E6,$60,$33,$57,$00,$00,$EE,$EC,$ED
            .byte $EE,$ED,$ED,$ED,$ED,$ED,$ED,$ED,$ED,$EE,$F2,$F2,$F2,$32,$F1,$F1
            .byte $F1,$20,$F1,$F1,$F0,$F1,$EF,$EF,$01,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$05,$00,$00,$0D,$50,$00,$15,$54,$00,$55,$6A
            .byte $80,$05,$6A,$A0,$00,$6A,$A8,$00,$2A,$AA,$00,$AA,$A9,$00,$AA,$A5
            .byte $02,$AA,$80,$02,$AA,$40,$0A,$A8,$50,$0A,$A0,$14,$0A,$80,$10,$2A
            .byte $00,$00,$28,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$05,$50,$00,$0D,$6A
            .byte $80,$15,$6A,$A0,$55,$6A,$A8,$00,$2A,$AA,$00,$AA,$A9,$00,$AA,$A5
            .byte $00,$AA,$80,$00,$2A,$40,$00,$28,$50,$00,$20,$14,$00,$00,$10,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$05,$50,$00,$0D,$6A
            .byte $80,$15,$6A,$A0,$55,$6A,$A8,$00,$6A,$AA,$00,$5A,$A9,$00,$16,$A5
            .byte $00,$15,$80,$00,$00,$40,$00,$00,$50,$00,$00,$14,$00,$00,$10,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$A0,$05,$52,$A8,$0D,$6A
            .byte $A8,$15,$6A,$A8,$55,$6A,$68,$00,$65,$5A,$00,$55,$59,$00,$15,$55
            .byte $00,$15,$40,$00,$00,$40,$00,$00,$50,$00,$00,$14,$00,$00,$10,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$20,$00,$00,$A0,$00,$00,$A8,$00,$02,$A8,$05,$5A,$A8,$0D,$6A
            .byte $A8,$15,$56,$A8,$55,$55,$68,$00,$55,$5A,$00,$55,$55,$00,$15,$55
            .byte $00,$15,$40,$00,$00,$40,$00,$00,$50,$00,$00,$14,$00,$00,$10,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$A0,$05,$52,$A8,$0D,$6A
            .byte $A8,$15,$6A,$A8,$55,$6A,$68,$00,$65,$5A,$00,$55,$59,$00,$15,$55
            .byte $00,$15,$40,$00,$00,$40,$00,$00,$50,$00,$00,$14,$00,$00,$10,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$05,$50,$00,$0D,$6A
            .byte $80,$15,$6A,$A0,$55,$6A,$A8,$00,$6A,$AA,$00,$5A,$A9,$00,$16,$A5
            .byte $00,$15,$80,$00,$00,$40,$00,$00,$50,$00,$00,$14,$00,$00,$10,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$05,$40,$00,$0D,$50,$00,$15,$6A
            .byte $80,$55,$6A,$A0,$00,$6A,$A8,$00,$2A,$AA,$00,$AA,$A9,$00,$AA,$A5
            .byte $00,$AA,$80,$00,$2A,$40,$00,$28,$50,$00,$20,$14,$00,$00,$10,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$A0,$00,$00,$60,$00,$00,$00
            .byte $00,$10,$00,$00,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$04,$00
            .byte $00,$08,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $02,$40,$00,$0A,$80,$00,$06,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$24,$00,$00,$38,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$08,$00,$00,$09,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$A0,$00,$00,$90,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$10,$00,$00,$54,$00,$00,$E8,$00,$00
            .byte $A8,$00,$00,$2A,$A8,$00,$2A,$A8,$00,$2A,$AA,$00,$28,$2A,$0B,$20
            .byte $1A,$AB,$20,$56,$A3,$F0,$56,$8C,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$10,$00,$00,$54,$00,$00,$E8,$00,$00
            .byte $A8,$00,$00,$2A,$A0,$00,$2A,$A8,$00,$2A,$A8,$00,$08,$28,$00,$08
            .byte $2A,$AC,$08,$1A,$8C,$3C,$14,$30,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$10,$00,$00,$54,$00,$00,$E8,$00,$00
            .byte $A8,$00,$00,$2A,$A0,$00,$2A,$A8,$00,$2A,$A8,$00,$08,$A0,$00,$02
            .byte $AA,$B0,$02,$AA,$30,$0F,$24,$C0,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$10,$00,$00,$54,$00,$00,$E8,$00,$00
            .byte $A8,$00,$00,$2A,$A0,$00,$2A,$A8,$00,$2A,$A8,$00,$08,$28,$00,$08
            .byte $2A,$AC,$3C,$2A,$8C,$00,$08,$30,$00,$00,$14,$00,$00,$35,$00,$00
            .byte $55,$00,$00,$14,$00,$00,$04,$00,$00,$28,$00,$1A,$AA,$00,$4A,$AA
            .byte $00,$00,$28,$00,$00,$28,$00,$00,$28,$00,$00,$28,$00,$00,$2A,$00
            .byte $00,$2A,$00,$00,$2A,$00,$00,$A8,$00,$00,$AA,$00,$00,$A2,$80,$00
            .byte $20,$80,$00,$23,$C0,$00,$F0,$00,$00,$00,$14,$00,$00,$35,$00,$00
            .byte $55,$00,$00,$14,$00,$00,$04,$00,$00,$28,$00,$1A,$AA,$00,$4A,$AA
            .byte $00,$00,$28,$00,$00,$28,$00,$00,$28,$00,$00,$28,$00,$00,$2A,$00
            .byte $00,$2A,$00,$00,$0A,$00,$00,$28,$00,$00,$2A,$00,$00,$2A,$00,$00
            .byte $0A,$00,$00,$0F,$00,$00,$3C,$00,$00,$00,$14,$00,$00,$35,$00,$00
            .byte $55,$00,$00,$14,$00,$00,$04,$00,$00,$28,$00,$1A,$AA,$00,$4A,$AA
            .byte $00,$00,$28,$00,$00,$28,$00,$00,$28,$00,$00,$28,$00,$00,$2A,$00
            .byte $00,$2A,$00,$00,$0A,$00,$00,$2A,$00,$00,$A8,$00,$00,$2A,$00,$00
            .byte $22,$00,$00,$F2,$00,$00,$0F,$00,$00,$00,$14,$00,$00,$35,$00,$00
            .byte $55,$00,$00,$14,$00,$00,$04,$00,$00,$28,$00,$1A,$AA,$00,$4A,$AA
            .byte $00,$00,$28,$00,$00,$28,$00,$00,$28,$00,$00,$28,$00,$00,$2A,$00
            .byte $00,$2A,$00,$00,$2A,$00,$00,$A8,$00,$00,$AA,$00,$02,$8A,$00,$02
            .byte $82,$80,$00,$80,$80,$03,$C3,$C0,$FF,$00,$BC,$00,$B4,$00,$BE,$00
            .byte $82,$74,$B4,$90,$07,$30,$E4,$00,$FE,$04,$F6,$09,$F5,$CE,$FD,$46
            .byte $C2,$34,$FC,$80,$FF,$05,$FC,$02,$F6,$B4,$F9,$00,$FE,$10,$AC,$20
            .byte $A6,$0D,$E6,$00,$FD,$18,$C5,$01,$FF,$0D,$FF,$00,$F7,$10,$EC,$00
            .byte $F4,$58,$8C,$E6,$9C,$08,$F5,$00,$94,$FD,$CF,$62,$FF,$00,$DE,$42
            .byte $FE,$98,$CE,$40,$D3,$21,$B4,$00,$C1,$00,$D5,$C0,$78,$81,$B6,$00
            .byte $C7,$70,$FC,$36,$F7,$80,$84,$03,$F7,$40,$FC,$10,$B5,$2B,$EF,$42
            .byte $1D,$2C,$EE,$05,$FF,$25,$2C,$04,$05,$7A,$FE,$B4,$6C,$24,$74,$00
            .byte $35,$63,$EE,$55,$7F,$74,$14,$04,$84,$FF,$53,$FE,$4B,$FF,$40,$FE
            .byte $7D,$8A,$0B,$6B,$F8,$EB,$1B,$FF,$01,$6B,$08,$F6,$0A,$30,$00,$BB
            .byte $38,$CA,$03,$7E,$00,$FA,$00,$FC,$08,$4B,$00,$FF,$03,$EF,$50,$DF
            .byte $19,$F2,$18,$FF,$00,$E7,$AA,$FE,$00,$E2,$00,$FE,$08,$EF,$11,$FF
            .byte $4B,$A1,$30,$18,$31,$F7,$08,$FF,$68,$82,$30,$9C,$00,$FF,$20,$BC
            .byte $00,$67,$30,$B1,$28,$9E,$09,$FD,$3C,$FF,$28,$3E,$84,$7E,$58,$FE
            .byte $38,$8F,$00,$C9,$08,$7F,$38,$FD,$08,$BF,$00,$EF,$48,$D4,$10,$BE
            .byte $E0,$C3,$10,$FA,$00,$5A,$90,$FB,$FA,$81,$00,$4B,$90,$DA,$8A,$FF
            .byte $80,$DE,$01,$AA,$80,$CB,$EB,$FB,$7A,$00,$AC,$00,$B4,$00,$BF,$00
            .byte $83,$74,$B4,$94,$07,$30,$E4,$00,$FE,$84,$F6,$09,$F4,$CF,$FD,$44
            .byte $C7,$34,$FC,$81,$FF,$05,$FD,$03,$F6,$B4,$FD,$00,$F7,$10,$AC,$20
            .byte $A6,$0D,$C7,$00,$FF,$18,$C5,$01,$FF,$0D,$FF,$00,$F7,$10,$EC,$00
            .byte $F4,$58,$CC,$E6,$8C,$08,$F7,$00,$94,$FD,$CF,$42,$FF,$00,$DF,$43
            .byte $FF,$98,$CE,$48,$D7,$21,$A4,$00,$C1,$00,$D5,$C0,$78,$80,$B7,$00
            .byte $C7,$70,$FC,$36,$F7,$80,$84,$02,$F7,$40,$FE,$10,$B5,$0A,$EF,$42
            .byte $9D,$2C,$EE,$05,$FF,$A5,$A5,$04,$05,$7A,$FE,$B4,$6C,$24,$F7,$00
            .byte $35,$63,$EE,$55,$7F,$74,$14,$04,$85,$FF,$53,$FF,$4B,$FF,$40,$FE
            .byte $7C,$8A,$0B,$6B,$F8,$EF,$1B,$FE,$01,$EA,$09,$F6,$0B,$30,$00,$B9
            .byte $38,$CA,$03,$7E,$00,$FA,$00,$FC,$09,$4B,$00,$FF,$00,$EF,$51,$DF
            .byte $18,$E2,$39,$FF,$00,$E7,$AA,$FE,$00,$E2,$00,$FF,$08,$EE,$10,$FF
            .byte $4B,$A5,$31,$18,$31,$F7,$08,$FF,$6A,$82,$31,$94,$00,$FF,$20,$BC
            .byte $00,$67,$30,$B1,$2C,$9E,$19,$FC,$3C,$FF,$28,$3E,$84,$7E,$58,$FE
            .byte $38,$8F,$00,$CB,$08,$7F,$78,$FD,$08,$BF,$00,$EF,$48,$F5,$10,$BF
            .byte $E0,$D3,$11,$FA,$00,$DA,$90,$FB,$FA,$85,$00,$6B,$90,$DB,$8A,$FE
            .byte $8A,$DE,$01,$A8,$80,$CA,$EB,$FB,$7A,$20,$BC,$01,$B4,$00,$3E,$00
            .byte $83,$74,$F4,$90,$07,$30,$C4,$00,$FE,$84,$F6,$09,$F5,$CF,$FD,$44
            .byte $C7,$35,$FC,$81,$FF,$05,$FD,$03,$D6,$B4,$F9,$00,$FF,$10,$AC,$20
            .byte $86,$4D,$E7,$00,$FC,$18,$C5,$01,$FF,$2D,$FC,$00,$F7,$10,$EC,$00
            .byte $F4,$58,$CC,$E6,$DD,$08,$F5,$00,$94,$FC,$CE,$63,$FF,$00,$DE,$42
            .byte $FF,$98,$CE,$4A,$D7,$61,$F4,$00,$C3,$00,$D5,$C0,$78,$80,$F6,$02
            .byte $C7,$70,$DC,$36,$F7,$80,$84,$02,$F7,$40,$FC,$10,$B5,$2A,$EF,$42
            .byte $9D,$2C,$EE,$04,$FF,$A5,$ED,$04,$05,$7A,$FE,$B4,$6C,$24,$F7,$00
            .byte $75,$63,$EC,$55,$7F,$76,$14,$04,$85,$FF,$53,$FF,$4B,$FF,$E2,$FE
            .byte $7D,$8B,$0B,$6B,$F8,$EB,$3B,$FF,$01,$6A,$08,$F2,$0A,$30,$02,$B9
            .byte $B8,$CA,$03,$7B,$00,$FA,$02,$FC,$29,$4B,$00,$FF,$00,$EF,$D0,$DF
            .byte $F8,$F2,$19,$FF,$00,$E7,$AA,$FE,$00,$E2,$00,$FA,$08,$EF,$92,$FF
            .byte $4B,$A5,$31,$18,$20,$F7,$08,$FF,$6A,$82,$30,$9C,$00,$FF,$20,$BC
            .byte $00,$67,$30,$B5,$2C,$9E,$08,$FC,$3C,$FF,$28,$3E,$84,$7A,$18,$FF
            .byte $38,$8F,$23,$CB,$08,$7F,$78,$F9,$08,$BF,$00,$EF,$4A,$D4,$10,$BF
            .byte $E0,$D3,$11,$EE,$00,$5A,$90,$FB,$FA,$C1,$01,$6B,$90,$DA,$8A,$FF
            .byte $88,$FE,$01,$A8,$80,$8B,$EB,$FB,$7A,$00,$BC,$01,$B4,$00,$BF,$00
            .byte $82,$74,$F4,$90,$07,$30,$C4,$00,$FE,$94,$F6,$09,$F4,$DE,$FD,$44
            .byte $C6,$35,$FC,$80,$FF,$05,$FC,$02,$D6,$B4,$FD,$00,$F6,$10,$AD,$20
            .byte $86,$4D,$E7,$00,$FE,$18,$D5,$01,$FF,$3D,$FE,$00,$F7,$10,$EC,$00
            .byte $F4,$58,$CF,$E6,$DC,$08,$F7,$00,$94,$FD,$CE,$62,$FF,$00,$DE,$42
            .byte $FE,$98,$CE,$4A,$D7,$61,$F6,$00,$C3,$00,$D5,$C0,$7A,$80,$B6,$02
            .byte $C7,$70,$DC,$36,$F7,$80,$84,$02,$F7,$40,$FE,$10,$B5,$2A,$EF,$42
            .byte $9D,$2C,$EE,$04,$FF,$A5,$E5,$04,$05,$7A,$FE,$94,$6C,$24,$F6,$01
            .byte $77,$73,$EE,$55,$7F,$76,$14,$04,$84,$FF,$53,$FF,$4B,$FF,$E0,$FE
            .byte $7C,$8B,$0B,$6F,$F8,$EB,$3B,$FF,$03,$EA,$08,$F6,$0A,$30,$02,$BB
            .byte $B8,$CA,$03,$7E,$00,$FA,$02,$FC,$29,$4B,$04,$FF,$00,$EF,$D0,$DF
            .byte $FB,$E2,$39,$FF,$01,$E7,$AA,$FE,$00,$E2,$01,$FE,$08,$EF,$92,$FF
            .byte $4B,$A5,$31,$18,$30,$F7,$0A,$FF,$6A,$82,$31,$9C,$00,$FF,$20,$BD
            .byte $00,$67,$30,$B5,$2E,$9E,$19,$FF,$3C,$FF,$2A,$BE,$84,$7E,$18,$FC
            .byte $38,$8F,$20,$CB,$08,$7F,$78,$FF,$08,$BF,$02,$EF,$4A,$F4,$10,$BF
            .byte $E0,$D3,$11,$FE,$00,$DA,$90,$FB,$FA,$C5,$01,$6B,$90,$DB,$8A,$FF
            .byte $8A,$FE,$11,$AA,$80,$8B,$FB,$FB,$7A,$00,$BC,$00,$B4,$00,$BE,$00
            .byte $82,$74,$B4,$94,$07,$34,$C4,$00,$FE,$84,$F6,$09,$F5,$CE,$FD,$44
            .byte $C6,$34,$FC,$80,$FF,$05,$FC,$02,$F6,$B4,$FD,$00,$FF,$10,$AC,$20
            .byte $A7,$0D,$E7,$00,$FF,$18,$C5,$01,$FF,$0D,$FF,$00,$F7,$10,$EC,$00
            .byte $F4,$58,$CC,$E6,$8C,$08,$F7,$00,$94,$FD,$CF,$62,$FF,$00,$DD,$42
            .byte $FE,$98,$CE,$44,$D7,$21,$B4,$00,$C1,$00,$D5,$C0,$78,$80,$B7,$00
            .byte $C7,$70,$FE,$36,$F7,$80,$84,$02,$F7,$40,$FF,$10,$B5,$2B,$EF,$42
            .byte $9D,$2C,$EE,$04,$FF,$25,$2D,$04,$05,$7A,$FE,$B4,$6C,$24,$F7,$00
            .byte $35,$63,$EE,$55,$7F,$74,$14,$04,$84,$FF,$43,$FE,$4B,$FF,$40,$FE
            .byte $7C,$8A,$0B,$6B,$F8,$EB,$1B,$FF,$01,$6B,$09,$F6,$0A,$21,$00,$BB
            .byte $38,$CA,$03,$7F,$00,$FA,$01,$FD,$09,$4B,$00,$FF,$00,$EF,$50,$DF
            .byte $18,$F2,$18,$FF,$00,$E3,$AA,$FE,$00,$E2,$00,$FF,$08,$EF,$10,$FF
            .byte $4B,$A1,$30,$18,$20,$F7,$08,$FF,$68,$02,$30,$9D,$00,$FF,$20,$BD
            .byte $00,$67,$31,$B1,$28,$9E,$09,$FD,$3C,$FF,$28,$3E,$84,$7F,$58,$FF
            .byte $38,$8F,$00,$CB,$08,$7F,$38,$FD,$08,$BF,$00,$EF,$48,$D4,$10,$BF
            .byte $60,$C3,$11,$EA,$00,$5A,$90,$FB,$EA,$81,$00,$4B,$90,$DB,$8A,$FF
            .byte $88,$CE,$01,$AA,$80,$CB,$EB,$FB,$7B,$00,$BC,$01,$B4,$00,$BF,$00
            .byte $83,$74,$B4,$94,$07,$30,$E4,$00,$FE,$84,$F6,$09,$F5,$CE,$FD,$44
            .byte $C3,$34,$FC,$80,$FF,$05,$FC,$02,$F6,$B4,$FD,$00,$F7,$10,$AC,$20
            .byte $E7,$0D,$C7,$00,$FF,$18,$C5,$01,$FF,$0D,$FF,$00,$F7,$10,$EC,$00
            .byte $F4,$58,$CC,$E6,$9D,$08,$F7,$00,$94,$FD,$CF,$42,$FF,$00,$DD,$42
            .byte $FF,$98,$CE,$4C,$D7,$21,$B4,$00,$C1,$00,$D5,$C0,$78,$80,$B7,$00
            .byte $C7,$70,$FE,$36,$F7,$80,$84,$02,$F7,$40,$FF,$10,$B5,$0B,$EF,$42
            .byte $9D,$2C,$EE,$04,$FF,$A5,$25,$04,$05,$7A,$FE,$B4,$6C,$24,$F7,$00
            .byte $35,$63,$EE,$55,$7F,$74,$14,$04,$84,$FF,$43,$FF,$4B,$FF,$40,$FE
            .byte $7C,$8A,$0B,$6B,$F8,$EF,$1B,$FF,$01,$EB,$09,$F6,$0A,$31,$02,$BB
            .byte $38,$CA,$03,$7F,$00,$FA,$03,$FD,$09,$4B,$00,$FF,$00,$EF,$51,$DF
            .byte $18,$E3,$39,$FF,$00,$E7,$AA,$FE,$00,$E2,$00,$FF,$08,$EF,$12,$FF
            .byte $4B,$A5,$31,$18,$20,$F7,$08,$FF,$6A,$82,$30,$9D,$00,$FF,$20,$BD
            .byte $00,$67,$31,$B1,$2C,$9E,$09,$FF,$3C,$FF,$28,$3E,$84,$7F,$58,$FF
            .byte $38,$8F,$00,$CB,$08,$7F,$78,$FF,$08,$BF,$00,$EF,$48,$F4,$10,$BF
            .byte $E0,$C3,$11,$FA,$00,$DA,$90,$FB,$FA,$85,$00,$6B,$90,$DB,$8A,$FF
            .byte $8A,$DE,$01,$AA,$80,$CB,$EB,$FB,$7B,$20,$BC,$01,$B4,$00,$BF,$00
            .byte $83,$74,$F4,$90,$87,$30,$C4,$00,$FE,$94,$F6,$0D,$F5,$CE,$FD,$44
            .byte $C7,$35,$FC,$80,$FF,$05,$FC,$02,$D6,$B4,$FD,$00,$FF,$10,$AC,$20
            .byte $A6,$4D,$E7,$00,$FF,$18,$D5,$01,$FF,$3D,$FF,$00,$F7,$10,$EC,$00
            .byte $B4,$58,$CC,$E6,$DD,$08,$F5,$00,$94,$FC,$CF,$62,$FF,$00,$DF,$42
            .byte $FF,$98,$CE,$4A,$D7,$21,$B6,$00,$C3,$00,$D5,$C0,$78,$84,$B7,$02
            .byte $C7,$70,$DE,$36,$F7,$80,$84,$02,$F7,$40,$FD,$10,$B5,$2B,$EF,$42
            .byte $9D,$2C,$EE,$04,$FF,$A5,$ED,$04,$05,$7A,$FE,$B4,$6C,$24,$F7,$00
            .byte $75,$63,$AE,$55,$7F,$76,$14,$04,$84,$FF,$53,$FE,$4B,$FF,$C0,$FE
            .byte $7C,$8A,$0B,$6F,$F8,$EB,$3B,$FF,$03,$6B,$09,$F6,$0A,$31,$02,$BB
            .byte $B8,$CA,$03,$7F,$00,$FA,$03,$FD,$29,$4B,$04,$FF,$00,$EF,$D0,$DF
            .byte $D8,$F2,$18,$FF,$00,$E7,$AA,$FE,$00,$C2,$00,$FF,$08,$EF,$12,$FF
            .byte $4B,$A5,$31,$18,$30,$F7,$0A,$FF,$6A,$82,$30,$9D,$00,$FF,$20,$BD
            .byte $00,$67,$31,$B5,$2C,$9E,$19,$FF,$3C,$FF,$28,$3E,$86,$7F,$58,$FF
            .byte $38,$8F,$20,$CB,$08,$7F,$78,$FD,$08,$BF,$0A,$EF,$4A,$D4,$10,$BF
            .byte $E0,$D3,$11,$FE,$00,$5A,$10,$FB,$FA,$C5,$00,$6B,$90,$DB,$8A,$FF
            .byte $88,$FE,$11,$EA,$80,$8B,$EB,$FB,$7B,$20,$BC,$01,$B4,$00,$BF,$00
            .byte $83,$74,$F4,$90,$87,$30,$E4,$00,$FF,$84,$F6,$0D,$F5,$CE,$FD,$44
            .byte $C7,$35,$FC,$80,$FF,$05,$FC,$02,$F6,$B4,$F9,$00,$F7,$10,$AD,$20
            .byte $A7,$4D,$E7,$00,$FF,$18,$C5,$01,$FF,$2D,$FF,$00,$F7,$10,$EC,$00
            .byte $F4,$58,$CF,$E6,$DD,$08,$F5,$00,$94,$FD,$CF,$62,$FF,$00,$DF,$42
            .byte $FF,$98,$CE,$4A,$D7,$61,$F6,$00,$C3,$00,$D5,$C0,$78,$84,$B7,$02
            .byte $C7,$70,$DE,$36,$F7,$80,$84,$02,$F7,$40,$FD,$10,$B5,$2B,$EF,$42
            .byte $9D,$2C,$E6,$04,$FF,$A5,$E5,$04,$05,$7A,$FE,$B4,$6C,$24,$F7,$00
            .byte $77,$63,$EE,$55,$7F,$76,$14,$04,$84,$FF,$53,$FF,$4B,$FF,$E0,$FE
            .byte $7C,$8A,$0B,$6B,$F8,$EB,$3B,$FF,$03,$EB,$09,$F2,$0A,$31,$02,$BB
            .byte $B8,$CA,$03,$7F,$00,$FA,$03,$FD,$29,$4B,$00,$FF,$00,$EF,$D0,$DF
            .byte $FA,$E2,$38,$FF,$00,$E7,$AA,$FE,$00,$E2,$00,$FF,$08,$EF,$12,$FF
            .byte $4B,$A5,$31,$18,$30,$F7,$0A,$FF,$6A,$82,$30,$9D,$00,$FF,$20,$BD
            .byte $00,$67,$31,$B5,$2E,$9E,$19,$FF,$3C,$FF,$2A,$BE,$86,$7B,$58,$FF
            .byte $38,$8F,$20,$CB,$08,$7F,$78,$FF,$08,$BF,$02,$EF,$4A,$F4,$10,$BF
            .byte $E0,$D3,$11,$FE,$00,$DA,$B0,$FB,$FA,$C5,$00,$6B,$92,$DB,$8A,$FF
            .byte $8A,$FE,$11,$AA,$80,$8B,$FB,$FB,$7B,$00,$BC,$00,$B4,$00,$BF,$00
            .byte $83,$74,$B4,$90,$07,$30,$C4,$00,$FE,$84,$F2,$09,$F5,$CE,$FD,$44
            .byte $C3,$34,$FC,$80,$FF,$05,$FC,$02,$F6,$B4,$FD,$00,$FF,$10,$AC,$20
            .byte $A7,$0D,$C7,$00,$FF,$18,$C5,$01,$FF,$0D,$FF,$00,$F7,$10,$EC,$00
            .byte $B4,$58,$CC,$E6,$8C,$08,$F7,$00,$94,$FD,$CF,$62,$FF,$00,$CD,$42
            .byte $FF,$98,$CE,$4C,$D3,$21,$B4,$00,$C1,$00,$D5,$C0,$7A,$80,$B7,$02
            .byte $C7,$70,$FE,$36,$F7,$80,$84,$02,$F7,$40,$FF,$10,$B5,$0B,$EF,$42
            .byte $9D,$2C,$EE,$04,$FF,$25,$2C,$04,$05,$7A,$FE,$B6,$6C,$24,$F7,$00
            .byte $35,$63,$EE,$55,$7F,$76,$14,$04,$84,$FF,$43,$FF,$4B,$FF,$40,$FE
            .byte $7C,$8A,$0B,$6B,$F8,$EB,$1B,$FF,$01,$6B,$09,$F6,$0A,$31,$00,$BB
            .byte $38,$CA,$03,$7F,$00,$FA,$01,$FD,$09,$4B,$00,$FF,$00,$EF,$50,$DF
            .byte $18,$F2,$38,$FF,$00,$E7,$AA,$FE,$00,$E2,$00,$FF,$08,$EF,$10,$FF
            .byte $4B,$A5,$31,$18,$20,$F7,$08,$FF,$6A,$82,$30,$9D,$00,$FF,$20,$BD
            .byte $00,$67,$31,$B1,$2C,$9E,$09,$FF,$3C,$FF,$28,$3E,$84,$7F,$58,$FF
            .byte $38,$8F,$00,$CB,$08,$7F,$78,$FD,$08,$BF,$00,$EF,$48,$F4,$10,$BF
            .byte $E0,$C3,$11,$FA,$00,$5A,$90,$FB,$FA,$81,$00,$4B,$90,$DB,$8A,$FF
            .byte $8A,$DE,$01,$AA,$80,$CB,$EB,$FB,$7B,$00,$BC,$00,$B4,$00,$BF,$00
            .byte $83,$74,$B4,$90,$07,$30,$E4,$00,$FE,$84,$F6,$09,$F5,$CE,$FD,$44
            .byte $C3,$34,$FC,$80,$FF,$05,$FC,$02,$F6,$B4,$FD,$00,$F7,$10,$AC,$20
            .byte $E6,$0D,$E7,$00,$FF,$18,$C5,$01,$FF,$0D,$FF,$00,$F7,$10,$EC,$00
            .byte $F4,$58,$8C,$E6,$9C,$08,$F7,$00,$94,$FD,$CF,$62,$FF,$00,$DD,$42
            .byte $FF,$98,$CE,$4C,$D7,$21,$B4,$00,$C1,$00,$D5,$C0,$78,$80,$B7,$00
            .byte $C7,$70,$FE,$36,$F7,$80,$84,$02,$F7,$40,$FF,$10,$B5,$2B,$EF,$42
            .byte $9D,$2C,$EE,$00,$FF,$A5,$A4,$04,$05,$7A,$FE,$B4,$6C,$24,$F7,$00
            .byte $35,$63,$EE,$55,$7F,$74,$14,$04,$84,$FF,$43,$FF,$4B,$FF,$40,$FE
            .byte $7C,$8A,$0B,$6B,$F8,$EF,$1B,$FF,$01,$EB,$09,$F6,$0A,$31,$00,$BB
            .byte $38,$CA,$03,$7F,$00,$FA,$01,$FD,$09,$4B,$00,$FF,$00,$EF,$51,$DF
            .byte $18,$E2,$38,$FF,$00,$E7,$AA,$FE,$00,$E2,$00,$FF,$08,$EF,$10,$FF
            .byte $4B,$A5,$11,$18,$20,$F7,$08,$FF,$6A,$82,$30,$BD,$00,$FF,$20,$BD
            .byte $00,$67,$31,$B1,$2C,$9E,$49,$FF,$3C,$FF,$28,$3E,$84,$7F,$58,$FF
            .byte $38,$8F,$00,$CB,$08,$7F,$78,$FD,$08,$BF,$00,$EF,$48,$F4,$10,$BF
            .byte $E0,$C3,$11,$FA,$00,$DA,$90,$FB,$EA,$85,$00,$6B,$90,$DB,$8A,$FF
            .byte $CA,$DE,$01,$AA,$80,$CB,$EB,$FB,$7B,$20,$BC,$01,$B4,$00,$3F,$00
            .byte $83,$74,$B4,$90,$07,$30,$C4,$00,$FE,$84,$F6,$0D,$F5,$CE,$FD,$44
            .byte $C7,$35,$FC,$80,$FF,$05,$FC,$02,$D6,$B4,$FD,$00,$FF,$10,$AD,$20
            .byte $A6,$4D,$E7,$00,$FF,$18,$C5,$01,$FF,$2D,$FF,$00,$F7,$10,$EC,$00
            .byte $B4,$58,$CD,$E6,$CD,$08,$F5,$00,$94,$FC,$CF,$62,$FF,$00,$DF,$42
            .byte $FF,$98,$CE,$4A,$D7,$21,$B6,$00,$C3,$00,$D5,$C0,$78,$84,$B7,$02
            .byte $C7,$70,$DE,$36,$F7,$80,$84,$02,$F7,$40,$FD,$10,$B5,$2B,$EF,$42
            .byte $9D,$2C,$EE,$04,$FF,$A5,$AD,$04,$05,$7A,$BE,$B4,$6C,$24,$F7,$00
            .byte $75,$63,$AC,$55,$7F,$76,$14,$04,$84,$FF,$53,$FF,$4B,$FF,$E2,$FF
            .byte $7C,$8A,$0B,$6F,$F8,$EB,$3B,$FF,$03,$6B,$09,$F6,$0A,$31,$02,$BB
            .byte $B8,$CA,$03,$7F,$00,$FA,$03,$FD,$29,$4B,$04,$FF,$00,$EF,$D0,$DF
            .byte $FA,$F2,$18,$FF,$00,$E7,$AA,$FE,$00,$C2,$00,$FF,$08,$EF,$92,$FF
            .byte $4B,$A5,$31,$18,$30,$F7,$0A,$FF,$6A,$83,$30,$9D,$00,$FF,$20,$BD
            .byte $00,$67,$31,$B5,$2C,$9E,$19,$FF,$3C,$FF,$2A,$3E,$87,$7F,$58,$FF
            .byte $38,$CF,$20,$CB,$08,$7F,$38,$FD,$08,$BF,$02,$EF,$4A,$D4,$10,$BF
            .byte $E0,$D3,$11,$FE,$00,$5A,$90,$FB,$FA,$C5,$01,$6B,$90,$DB,$8A,$FF
            .byte $88,$FE,$11,$EA,$80,$8B,$FB,$FB,$7B,$20,$BC,$01,$B4,$00,$BF,$00
            .byte $83,$74,$F4,$94,$87,$30,$C4,$00,$FE,$84,$F6,$0D,$F5,$CE,$FD,$44
            .byte $C7,$35,$FC,$84,$FF,$05,$FC,$02,$F6,$B4,$FD,$00,$F7,$10,$AD,$20
            .byte $A7,$4D,$E7,$00,$FF,$18,$C5,$01,$FF,$2D,$FF,$00,$F7,$10,$EC,$00
            .byte $F4,$58,$CD,$E6,$DD,$08,$F5,$00,$94,$FD,$CF,$62,$FF,$00,$DF,$42
            .byte $FF,$98,$CE,$4A,$D7,$61,$F6,$00,$C3,$00,$D5,$C0,$78,$84,$B7,$02
            .byte $C7,$70,$DE,$36,$F7,$80,$84,$02,$F7,$40,$FD,$10,$B5,$2B,$EF,$42
            .byte $9D,$2C,$E6,$04,$FF,$A5,$E5,$04,$05,$7A,$FE,$B4,$6C,$24,$F7,$00
            .byte $77,$63,$EE,$55,$7F,$76,$14,$04,$84,$FF,$53,$FF,$4B,$FF,$E0,$FF
            .byte $7C,$8A,$0B,$6F,$F8,$EF,$3B,$FF,$03,$EB,$09,$F6,$0A,$31,$00,$BB
            .byte $B8,$CA,$03,$7F,$00,$FB,$01,$FD,$A9,$4B,$04,$FF,$00,$EF,$D0,$DF
            .byte $F8,$E6,$38,$FF,$00,$E7,$AA,$FE,$00,$E2,$00,$FF,$08,$EF,$92,$FF
            .byte $4B,$A5,$31,$18,$20,$F7,$0A,$FF,$6A,$82,$30,$9D,$00,$FF,$20,$BD
            .byte $00,$67,$31,$B5,$2C,$9E,$09,$FF,$3C,$FF,$2A,$BE,$86,$7F,$58,$FF
            .byte $38,$8F,$20,$CB,$08,$7F,$38,$FD,$08,$BF,$02,$EF,$4A,$F4,$10,$BF
            .byte $E0,$D7,$11,$FE,$00,$DA,$B0,$FB,$FA,$C5,$00,$EB,$92,$DB,$8A,$FF
            .byte $88,$FE,$11,$AA,$80,$CB,$EB,$FB,$7B,$00,$BC,$00,$B4,$00,$BF,$00
            .byte $83,$74,$B4,$90,$07,$30,$E4,$00,$FE,$84,$F2,$09,$F5,$CE,$FD,$44
            .byte $C3,$34,$FC,$80,$FF,$05,$FC,$02,$F6,$B4,$F9,$00,$FF,$10,$AC,$20
            .byte $A7,$0D,$C7,$00,$FF,$18,$C5,$01,$FF,$0D,$FF,$00,$F7,$10,$EC,$00
            .byte $F4,$58,$CC,$E6,$8C,$08,$F5,$00,$94,$FD,$CF,$62,$FF,$00,$DD,$42
            .byte $FF,$98,$CE,$48,$D3,$21,$B4,$00,$C1,$00,$D5,$C0,$78,$80,$B7,$00
            .byte $C7,$70,$FE,$36,$F7,$80,$84,$02,$F7,$40,$FD,$10,$B5,$0B,$EF,$42
            .byte $9D,$2C,$EE,$00,$FF,$25,$2D,$04,$05,$7A,$FE,$B4,$6C,$24,$F5,$00
            .byte $35,$63,$EE,$55,$7F,$74,$14,$04,$84,$FF,$43,$FE,$4B,$FF,$40,$FE
            .byte $7C,$8A,$0B,$6B,$F8,$EB,$1B,$FF,$01,$EB,$09,$F6,$0A,$31,$00,$BB
            .byte $38,$CA,$03,$7F,$00,$FA,$01,$FD,$08,$4B,$00,$FF,$00,$EF,$50,$DF
            .byte $18,$F2,$18,$FF,$00,$E7,$AA,$FE,$00,$E2,$00,$FF,$08,$EF,$10,$FF
            .byte $4B,$A5,$30,$18,$20,$F7,$08,$FF,$68,$82,$30,$9D,$00,$FF,$20,$BD
            .byte $00,$67,$31,$B1,$2C,$9E,$09,$FF,$3C,$FF,$28,$3E,$84,$7F,$58,$FF
            .byte $38,$8F,$00,$CB,$08,$7F,$38,$FD,$08,$BF,$00,$EF,$48,$D4,$10,$BF
            .byte $E0,$C3,$11,$FA,$00,$DA,$90,$FB,$FA,$85,$00,$4B,$90,$DB,$8A,$FF
            .byte $88,$DE,$01,$AA,$80,$CB,$EB,$FB,$7B,$00,$BC,$00,$B4,$00,$BF,$00
            .byte $83,$74,$B4,$90,$07,$30,$E4,$00,$FE,$84,$F2,$09,$F5,$CE,$FD,$44
            .byte $C3,$34,$FC,$80,$FF,$05,$FC,$02,$F6,$B4,$F9,$00,$F7,$10,$AC,$20
            .byte $E6,$09,$C6,$00,$FF,$18,$C5,$01,$FF,$0D,$FF,$00,$F7,$10,$EC,$00
            .byte $F4,$58,$CC,$E6,$8C,$08,$F7,$00,$94,$FC,$CF,$42,$FF,$00,$DD,$42
            .byte $FF,$98,$CE,$48,$D3,$21,$B4,$00,$C1,$00,$D7,$C0,$78,$80,$B7,$00
            .byte $C7,$70,$FE,$36,$F7,$80,$84,$02,$F7,$40,$FF,$10,$B5,$0B,$EF,$42
            .byte $9D,$2C,$EE,$00,$FF,$25,$24,$04,$05,$7A,$FE,$B6,$6C,$20,$F7,$00
            .byte $35,$63,$EE,$55,$7F,$76,$14,$04,$84,$FF,$43,$FF,$4B,$FF,$40,$FE
            .byte $7C,$8A,$0B,$6B,$F8,$EF,$1B,$FF,$01,$EB,$09,$F6,$0A,$31,$00,$BB
            .byte $38,$CA,$03,$7F,$00,$FA,$01,$FD,$09,$4B,$00,$FF,$00,$EF,$50,$DF
            .byte $18,$E2,$38,$FF,$00,$E7,$AA,$FE,$00,$E2,$00,$FF,$08,$EF,$10,$FF
            .byte $4B,$A5,$11,$18,$20,$F7,$08,$FF,$6A,$82,$30,$9D,$00,$FF,$20,$BD
            .byte $00,$67,$30,$B1,$2C,$9E,$49,$FF,$3C,$FF,$28,$3E,$84,$7F,$58,$FF
            .byte $38,$8F,$00,$CB,$08,$7F,$78,$FD,$08,$BF,$00,$EF,$48,$F4,$10,$BF
            .byte $E0,$C7,$11,$FE,$00,$DA,$90,$FB,$FA,$85,$00,$4B,$90,$DB,$8A,$FF
            .byte $8A,$DE,$01,$AA,$80,$CB,$EB,$FB,$7B,$20,$BC,$01,$B4,$00,$3E,$00
            .byte $82,$74,$F4,$D0,$07,$30,$C4,$00,$FE,$84,$F6,$09,$F5,$CE,$FD,$44
            .byte $C6,$35,$FC,$80,$FF,$05,$FC,$02,$D6,$B4,$F9,$00,$FE,$10,$AD,$20
            .byte $A6,$4D,$E7,$00,$FC,$18,$C5,$01,$FF,$2D,$FE,$00,$F7,$10,$EC,$00
            .byte $F4,$58,$CD,$E6,$CD,$08,$F5,$00,$94,$FD,$CF,$62,$FF,$00,$DE,$42
            .byte $FE,$98,$CE,$4A,$D7,$61,$F4,$00,$C3,$00,$D5,$C0,$78,$80,$F6,$02
            .byte $C7,$70,$DC,$36,$F7,$80,$84,$02,$F7,$40,$FC,$10,$B5,$2A,$EF,$42
            .byte $9D,$2C,$EF,$04,$FF,$A5,$ED,$04,$05,$7A,$FE,$B4,$6C,$24,$F6,$00
            .byte $75,$63,$EE,$55,$7F,$76,$14,$04,$84,$FF,$53,$FE,$4B,$FF,$E0,$FE
            .byte $7C,$8A,$0B,$6F,$F8,$EB,$3B,$FF,$03,$6A,$08,$F6,$0A,$30,$00,$B9
            .byte $B8,$CA,$03,$7E,$00,$FA,$00,$FC,$29,$4B,$04,$FF,$00,$EF,$D0,$DF
            .byte $F8,$F6,$38,$FF,$00,$E7,$AA,$FE,$00,$E2,$00,$FE,$08,$EF,$92,$FF
            .byte $4B,$A5,$31,$18,$30,$F7,$08,$FF,$6A,$82,$30,$9C,$00,$FF,$20,$BC
            .byte $00,$67,$30,$B5,$2C,$9E,$18,$FC,$3C,$FF,$28,$3E,$84,$7E,$58,$FC
            .byte $38,$CF,$20,$CB,$08,$7F,$38,$FC,$08,$BF,$00,$EF,$4A,$F4,$10,$BE
            .byte $E0,$D3,$11,$FE,$00,$5A,$90,$FB,$FA,$C5,$00,$6B,$90,$D8,$8A,$FE
            .byte $88,$FE,$11,$E8,$80,$8B,$FB,$FB,$7B,$00,$BC,$01,$B4,$00,$BE,$00
            .byte $83,$74,$F4,$90,$87,$30,$E4,$00,$FE,$84,$F6,$09,$F5,$CE,$FF,$44
            .byte $C7,$35,$FC,$80,$FF,$05,$FC,$02,$D6,$B4,$F9,$00,$F4,$10,$AD,$20
            .byte $A6,$49,$E7,$00,$FE,$18,$C5,$01,$FF,$2D,$FE,$00,$F7,$10,$EC,$00
            .byte $F4,$58,$CF,$E6,$CC,$08,$F5,$00,$94,$FC,$CE,$62,$FF,$00,$DE,$42
            .byte $FE,$98,$CE,$4A,$D7,$61,$F4,$00,$C3,$00,$D5,$C0,$7A,$80,$B6,$02
            .byte $C7,$70,$DC,$36,$F7,$80,$84,$02,$F7,$40,$FE,$10,$B5,$2A,$EF,$42
            .byte $9D,$2C,$E6,$00,$FF,$A5,$E5,$04,$05,$7A,$FA,$B4,$6C,$22,$F6,$00
            .byte $77,$63,$EE,$55,$7F,$76,$14,$00,$84,$FF,$53,$FF,$4B,$FF,$E0,$FE
            .byte $7D,$8A,$0A,$6F,$F8,$EF,$3B,$FF,$03,$EA,$08,$F6,$0A,$31,$02,$B9
            .byte $B9,$CA,$03,$7E,$00,$FA,$03,$FD,$A9,$4B,$04,$FF,$00,$EF,$D0,$DF
            .byte $FA,$E6,$38,$FF,$00,$E7,$AA,$FE,$00,$E2,$00,$FE,$08,$EF,$92,$FF
            .byte $4B,$A5,$31,$18,$30,$F7,$0A,$FF,$6A,$82,$30,$9C,$00,$FF,$20,$BC
            .byte $00,$67,$30,$B5,$2C,$9E,$18,$FC,$3C,$FF,$2A,$BE,$86,$7E,$58,$FE
            .byte $38,$8F,$20,$CB,$08,$7F,$78,$F8,$08,$BF,$02,$EF,$4A,$F4,$10,$BE
            .byte $E0,$D7,$11,$FE,$00,$DA,$90,$FB,$FA,$C5,$00,$EB,$92,$DA,$8A,$FE
            .byte $8A,$FE,$11,$A8,$80,$DA,$FB,$FB,$7B,$00,$00,$00,$00,$F0,$00,$00
            .byte $50,$00,$00,$70,$00,$00,$50,$00,$00,$C0,$00,$00,$B0,$00,$00,$AC
            .byte $00,$00,$A3,$00,$00,$AF,$FF,$00,$AA,$40,$00,$AA,$40,$00,$A0,$00
            .byte $02,$A8,$00,$02,$AA,$00,$02,$AA,$00,$02,$AA,$00,$02,$AA,$00,$00
            .byte $44,$00,$00,$4F,$00,$00,$F0,$00,$00,$00,$00,$00,$00,$F0,$00,$00
            .byte $50,$00,$00,$70,$00,$00,$50,$00,$00,$C0,$00,$00,$B0,$00,$00,$AC
            .byte $00,$00,$A3,$00,$00,$AF,$FF,$00,$AA,$40,$00,$AA,$40,$00,$A0,$00
            .byte $02,$A8,$00,$02,$AA,$00,$02,$AA,$00,$02,$AA,$00,$02,$AA,$00,$01
            .byte $01,$00,$01,$01,$00,$03,$C3,$C0,$00,$00,$00,$00,$00,$F0,$00,$00
            .byte $50,$00,$00,$70,$00,$00,$50,$00,$00,$C0,$00,$00,$B0,$00,$00,$AC
            .byte $00,$00,$A3,$00,$00,$AF,$FF,$00,$AA,$40,$00,$AA,$40,$00,$A0,$00
            .byte $02,$A8,$00,$02,$AA,$00,$02,$AA,$00,$02,$AA,$00,$02,$AA,$00,$00
            .byte $44,$00,$00,$F4,$00,$00,$0F,$00,$00,$00,$00,$00,$00,$F0,$00,$00
            .byte $50,$00,$00,$70,$00,$00,$50,$00,$00,$C0,$00,$00,$B0,$00,$00,$AC
            .byte $00,$00,$A3,$00,$00,$AF,$FF,$00,$AA,$40,$00,$AA,$40,$00,$A0,$00
            .byte $02,$A8,$00,$02,$AA,$00,$02,$AA,$00,$02,$AA,$00,$02,$AA,$00,$00
            .byte $10,$00,$00,$1C,$00,$00,$3C,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$28,$14,$00,$38,$55,$00,$98,$55,$40,$15,$55,$50,$15,$A5
            .byte $74,$00,$A5,$D4,$00,$A3,$54,$00,$81,$54,$02,$85,$54,$02,$05,$50
            .byte $0A,$14,$50,$28,$54,$50,$28,$50,$50,$30,$14,$14,$30,$14,$14,$30
            .byte $04,$15,$30,$14,$05,$30,$50,$14,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$28,$14,$00,$38,$55,$00,$98,$55,$40,$19,$55,$50,$15,$95
            .byte $74,$01,$A5,$D4,$00,$83,$54,$00,$81,$54,$02,$85,$54,$02,$85,$50
            .byte $2A,$15,$50,$28,$14,$50,$30,$15,$50,$30,$15,$50,$3C,$14,$50,$0C
            .byte $05,$50,$0C,$05,$40,$0C,$15,$40,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$28,$14,$00,$38,$55,$00,$98,$55,$50,$15,$95
            .byte $74,$15,$A5,$D4,$00,$A7,$54,$00,$21,$54,$00,$A5,$54,$02,$85,$50
            .byte $02,$85,$50,$0A,$14,$50,$03,$14,$40,$03,$14,$50,$03,$10,$50,$03
            .byte $50,$14,$03,$50,$14,$03,$50,$50,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$28,$15,$00,$38,$55,$00,$98,$55,$40,$15,$55,$50,$15,$A5
            .byte $74,$00,$A5,$D4,$00,$A7,$54,$00,$81,$54,$02,$85,$54,$2A,$85,$50
            .byte $28,$14,$50,$0C,$54,$50,$0C,$51,$40,$0C,$51,$50,$0C,$41,$50,$0C
            .byte $50,$14,$0D,$50,$14,$05,$40,$50,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$03,$C3,$C0,$03,$D7,$C0,$07,$96,$D0,$05,$55
            .byte $50,$05,$55,$50,$2A,$96,$A8,$82,$AA,$82,$88,$96,$22,$08,$82,$20
            .byte $20,$82,$08,$22,$00,$88,$22,$00,$88,$02,$00,$80,$02,$00,$80,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$03,$C3,$C0,$03,$D7,$C0,$07,$96,$D0,$05,$55
            .byte $50,$05,$55,$50,$2A,$96,$A8,$82,$AA,$82,$88,$A8,$82,$08,$28,$20
            .byte $20,$22,$20,$20,$82,$08,$20,$82,$08,$00,$80,$80,$00,$80,$80,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$03,$C3,$C0,$03,$D7,$C0,$07,$96,$D0,$05,$55
            .byte $50,$05,$55,$50,$06,$96,$A0,$08,$AA,$88,$22,$A8,$82,$82,$28,$22
            .byte $88,$22,$20,$08,$A2,$20,$08,$82,$20,$08,$82,$00,$00,$88,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$03,$C3,$C0,$03,$D7,$C0,$07,$96,$D0,$05,$55
            .byte $50,$05,$55,$50,$2A,$96,$A0,$82,$AA,$88,$88,$A8,$82,$08,$28,$22
            .byte $20,$22,$20,$20,$82,$08,$20,$82,$08,$00,$80,$80,$00,$80,$80,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$28,$00,$00,$B8,$00,$00,$AA,$AA,$00,$AA,$A9,$80,$29,$9A,$A8
            .byte $0A,$A9,$4A,$09,$A6,$A2,$02,$A6,$60,$0A,$0A,$A0,$0A,$02,$A0,$28
            .byte $02,$68,$28,$00,$29,$14,$00,$05,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$28,$00
            .byte $00,$B8,$00,$00,$AA,$00,$00,$AA,$AA,$00,$2A,$A9,$80,$09,$9A,$A8
            .byte $0A,$A9,$4A,$09,$A6,$82,$02,$A6,$60,$02,$0A,$A0,$0A,$02,$80,$0A
            .byte $00,$40,$02,$42,$80,$00,$41,$40,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$28,$00
            .byte $00,$B8,$00,$00,$AA,$00,$00,$AA,$AA,$00,$2A,$A9,$80,$09,$9A,$A8
            .byte $0A,$A9,$4A,$09,$A6,$A2,$02,$A6,$60,$02,$8A,$A0,$02,$A2,$80,$00
            .byte $AA,$40,$00,$9A,$00,$00,$19,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$28,$00,$00,$B8,$00,$00,$AA,$AA,$00,$AA,$A9,$80,$29,$9A,$A8
            .byte $0A,$A9,$4A,$09,$A6,$82,$02,$A6,$60,$02,$8A,$A0,$02,$82,$80,$02
            .byte $90,$40,$00,$A2,$80,$00,$01,$40,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0A,$80,$00,$02,$A0
            .byte $00,$00,$A8,$00,$00,$2A,$00,$00,$AA,$2C,$0A,$69,$7F,$3A,$99,$A8
            .byte $02,$A6,$A0,$00,$2E,$80,$00,$3C,$00,$00,$F0,$00,$00,$3F,$00,$00
            .byte $0C,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$02,$A0,$00,$00,$A8,$00,$00,$AA,$2C,$0A,$6A,$7F,$3A,$69,$A8
            .byte $02,$96,$A0,$00,$AA,$80,$00,$2C,$00,$00,$F0,$00,$00,$3F,$00,$00
            .byte $0C,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$28,$00,$00,$AA,$2C,$0A,$AA,$7F,$3A,$69,$A8
            .byte $02,$69,$A0,$00,$66,$80,$00,$1C,$00,$00,$F0,$00,$00,$3F,$00,$00
            .byte $0C,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$02,$A8,$00,$00,$AA,$2C,$0A,$6A,$7F,$3A,$69,$A8
            .byte $02,$96,$A0,$00,$AA,$80,$00,$2C,$00,$00,$F0,$00,$00,$3F,$00,$00
            .byte $0C,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0A,$80,$00,$2A,$A0,$00
            .byte $2A,$A8,$00,$AA,$A8,$00,$96,$58,$00,$92,$18,$00,$AA,$A2,$28,$8A
            .byte $82,$AA,$A0,$28,$AA,$AA,$A8,$20,$AA,$AA,$A0,$AA,$A2,$82,$AA,$A2
            .byte $02,$AA,$A0,$02,$AA,$A0,$02,$AA,$A0,$02,$AA,$A0,$02,$AA,$A8,$0A
            .byte $2A,$88,$0A,$28,$88,$08,$20,$80,$00,$00,$0A,$80,$00,$2A,$A0,$00
            .byte $2A,$A8,$00,$AA,$A8,$00,$96,$58,$80,$92,$18,$A0,$AA,$A0,$28,$8A
            .byte $88,$AA,$A0,$2A,$AA,$AA,$A8,$20,$AA,$AA,$80,$AA,$AA,$00,$AA,$A2
            .byte $02,$AA,$A2,$02,$AA,$A0,$0A,$AA,$A0,$0A,$2A,$A0,$0A,$2A,$A8,$28
            .byte $A8,$88,$20,$A0,$80,$00,$20,$00,$00,$00,$0A,$80,$00,$2A,$A0,$00
            .byte $2A,$A8,$20,$AA,$A8,$20,$96,$58,$A0,$92,$18,$28,$AA,$A0,$AA,$8A
            .byte $88,$2A,$A0,$28,$0A,$AA,$A0,$00,$AA,$A8,$00,$AA,$A8,$02,$AA,$AA
            .byte $02,$AA,$AA,$0A,$AA,$A2,$2A,$AA,$A2,$28,$2A,$A0,$20,$2A,$A8,$00
            .byte $A8,$A0,$02,$A2,$20,$00,$00,$00,$00,$00,$0A,$80,$00,$2A,$A0,$00
            .byte $2A,$A8,$00,$AA,$A8,$00,$96,$58,$80,$92,$18,$A0,$AA,$A0,$28,$8A
            .byte $88,$AA,$A0,$2A,$2A,$AA,$A8,$00,$AA,$AA,$00,$AA,$AA,$00,$AA,$A2
            .byte $02,$AA,$A2,$02,$AA,$A0,$0A,$AA,$A0,$0A,$2A,$A0,$0A,$2A,$A8,$0A
            .byte $A8,$88,$08,$A0,$80,$00,$20,$00,$00,$00,$30,$00,$00,$CC,$00,$00
            .byte $CC,$00,$00,$CC,$00,$00,$30,$00,$00,$30,$00,$03,$CC,$30,$0C,$33
            .byte $C0,$03,$00,$00,$00,$F0,$00,$00,$00,$00,$00,$30,$00,$00,$F0,$00
            .byte $00,$FC,$00,$00,$0F,$00,$00,$C3,$00,$00,$C3,$00,$00,$C0,$00,$0F
            .byte $03,$00,$30,$03,$00,$00,$00,$C0,$00,$00,$30,$00,$00,$CC,$00,$00
            .byte $CC,$00,$00,$CC,$00,$00,$30,$00,$00,$30,$00,$00,$C0,$00,$03,$3C
            .byte $00,$03,$0F,$C0,$00,$F0,$00,$00,$00,$00,$00,$30,$00,$00,$F0,$00
            .byte $00,$F0,$00,$00,$0C,$00,$00,$C3,$00,$00,$C3,$00,$00,$CC,$00,$03
            .byte $30,$00,$00,$F0,$00,$00,$0C,$00,$00,$00,$30,$00,$00,$CC,$00,$00
            .byte $CC,$00,$00,$CC,$00,$00,$30,$00,$00,$30,$00,$00,$C0,$00,$03,$F0
            .byte $00,$03,$00,$00,$00,$FF,$00,$00,$00,$00,$00,$30,$00,$00,$F0,$00
            .byte $00,$F0,$00,$00,$0C,$00,$00,$CC,$00,$00,$CC,$00,$00,$CC,$00,$03
            .byte $30,$00,$03,$3C,$00,$00,$00,$00,$00,$00,$30,$00,$00,$CC,$00,$00
            .byte $CC,$00,$00,$CC,$00,$00,$30,$00,$00,$30,$00,$00,$C3,$00,$03,$FC
            .byte $00,$0C,$30,$00,$03,$FF,$00,$00,$00,$00,$00,$30,$00,$00,$F0,$00
            .byte $00,$F0,$00,$00,$0C,$00,$00,$33,$00,$00,$33,$00,$00,$C3,$C0,$0F
            .byte $00,$00,$0C,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$04,$00,$00,$15,$00,$00,$2B
            .byte $00,$00,$2A,$00,$2A,$A8,$00,$2A,$A8,$00,$AA,$A8,$E0,$A8,$28,$EA
            .byte $A4,$08,$CA,$95,$08,$32,$95,$0F,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$04,$00,$00,$15,$00,$00,$2B
            .byte $00,$00,$2A,$00,$0A,$A8,$00,$2A,$A8,$00,$2A,$A8,$00,$28,$20,$3A
            .byte $A8,$20,$32,$A4,$20,$0C,$14,$3C,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$04,$00,$00,$15,$00,$00,$2B
            .byte $00,$00,$2A,$00,$0A,$A8,$00,$2A,$A8,$00,$2A,$A8,$00,$0A,$20,$0E
            .byte $AA,$80,$0C,$AA,$80,$03,$18,$F0,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$04,$00,$00,$15,$00,$00,$2B
            .byte $00,$00,$2A,$00,$0A,$A8,$00,$2A,$A8,$00,$2A,$A8,$00,$28,$20,$3A
            .byte $A8,$20,$32,$A8,$20,$0C,$20,$3C,$00,$00,$14,$00,$00,$5C,$00,$00
            .byte $55,$00,$00,$14,$00,$00,$10,$00,$00,$28,$00,$00,$AA,$A4,$00,$AA
            .byte $A1,$00,$28,$00,$00,$28,$00,$00,$28,$00,$00,$28,$00,$00,$A8,$00
            .byte $00,$A8,$00,$00,$A8,$00,$00,$2A,$00,$00,$AA,$00,$02,$8A,$00,$02
            .byte $08,$00,$03,$C8,$00,$00,$0F,$00,$00,$00,$14,$00,$00,$5C,$00,$00
            .byte $55,$00,$00,$14,$00,$00,$10,$00,$00,$28,$00,$00,$AA,$A4,$00,$AA
            .byte $A1,$00,$28,$00,$00,$28,$00,$00,$28,$00,$00,$28,$00,$00,$A8,$00
            .byte $00,$A8,$00,$00,$A0,$00,$00,$28,$00,$00,$A8,$00,$00,$A8,$00,$00
            .byte $A0,$00,$00,$F0,$00,$00,$3C,$00,$00,$00,$14,$00,$00,$5C,$00,$00
            .byte $55,$00,$00,$14,$00,$00,$10,$00,$00,$28,$00,$00,$AA,$A4,$00,$AA
            .byte $A1,$00,$28,$00,$00,$28,$00,$00,$28,$00,$00,$28,$00,$00,$A8,$00
            .byte $00,$A8,$00,$00,$A0,$00,$00,$A8,$00,$00,$2A,$00,$00,$A8,$00,$00
            .byte $88,$00,$00,$8F,$00,$00,$F0,$00,$00,$00,$14,$00,$00,$5C,$00,$00
            .byte $55,$00,$00,$14,$00,$00,$10,$00,$00,$28,$00,$00,$AA,$A4,$00,$AA
            .byte $A1,$00,$28,$00,$00,$28,$00,$00,$28,$00,$00,$28,$00,$00,$A8,$00
            .byte $00,$A8,$00,$00,$A8,$00,$00,$2A,$00,$00,$AA,$00,$00,$A2,$80,$02
            .byte $82,$80,$02,$02,$00,$03,$C3,$C0,$00,$03,$00,$00,$03,$04,$00,$00
            .byte $95,$00,$00,$95,$00,$00,$84,$00,$00,$AA,$8C,$00,$2A,$8B,$00,$2A
            .byte $A8,$00,$2A,$28,$00,$2A,$00,$00,$15,$20,$00,$AA,$A0,$00,$AA,$A0
            .byte $00,$AA,$28,$02,$80,$20,$02,$80,$00,$02,$00,$00,$02,$00,$00,$0A
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$04,$00,$03
            .byte $15,$0C,$03,$95,$0C,$00,$84,$08,$00,$AA,$88,$00,$AA,$A8,$00,$2A
            .byte $A0,$00,$2A,$20,$00,$2A,$00,$00,$15,$00,$00,$AA,$80,$02,$AA,$80
            .byte $02,$AA,$80,$02,$00,$80,$0A,$00,$A0,$00,$00,$20,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$04,$0C,$00
            .byte $15,$08,$00,$15,$08,$03,$04,$28,$02,$AA,$A8,$02,$AA,$A0,$00,$AA
            .byte $80,$00,$2A,$00,$02,$2A,$00,$02,$95,$00,$02,$AA,$00,$0A,$2A,$00
            .byte $00,$2A,$80,$00,$02,$80,$00,$00,$80,$00,$00,$80,$00,$00,$A0,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$04,$00,$00
            .byte $15,$00,$03,$15,$00,$02,$04,$0C,$02,$AA,$88,$02,$AA,$A8,$00,$AA
            .byte $20,$00,$2A,$00,$00,$2A,$00,$00,$95,$00,$02,$AA,$80,$02,$AA,$80
            .byte $02,$2A,$80,$0A,$00,$80,$00,$00,$A0,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00

; Memory $2A00

l_2A00
                    LSR A                           ; (2A00) Logical Shift Right Accumulator
                    CLC                             ; (2A01) Clear Carry Flag
                    BCC l_2A29                      ; (2A02) Branch to $2A29 if Carry Clear

Sub_PlayerPosition
                    STA Var_PlayerDirection             ; (2A04) Store A to Var_PlayerDirection. Seems like player number possibly. Player 1 will only move if 1.
                    LDA Sprite0_Y                   ; (2A07) Load A with $D001
                    SEC                             ; (2A0A) Set Carry Flag
                    SBC #$2C                        ; (2A0B) Subtract with Carry #$2C (44 / 00101100)
                    LSR A                           ; (2A0D) Logical Shift Right Accumulator
                    LSR A                           ; (2A0E) Logical Shift Right Accumulator
                    LSR A                           ; (2A0F) Logical Shift Right Accumulator
                    TAY                             ; (2A10) Transfer A to Y
                    LDA Sprite0_X                   ; (2A11) Load A with $D000
                    SEC                             ; (2A14) Set Carry Flag
                    SBC #$0C                        ; (2A15) Subtract with Carry #$0C (12 / 00001100)
                    BCC l_2A00                      ; (2A17) Branch to $2A00 if Carry Clear
                    LSR A                           ; (2A19) Logical Shift Right Accumulator
                    STA $2AFF                       ; (2A1A) Store A to $2AFF
                    LDA Sprite_upper_X              ; (2A1D) Load A with $D010
                    AND #$01                        ; (2A20) Logical AND with Accumulator and #$01 (1 / 00000001)
                    BEQ l_2A26                      ; (2A22) Branch to $2A26 if Equal
                    LDA #$80                        ; (2A24) Set A to #$80 (128 / 10000000)

l_2A26
                    ORA $2AFF                       ; (2A26) Logical OR with Accumulator and $2AFF

l_2A29
                    LSR A                           ; (2A29) Logical Shift Right Accumulator
                    LSR A                           ; (2A2A) Logical Shift Right Accumulator
                    TAX                             ; (2A2B) Transfer A to X
                    TYA                             ; (2A2C) Transfer Y to A
                    ASL A                           ; (2A2D) Arithmetic Shift Left Accumulator
                    TAY                             ; (2A2E) Transfer A to Y
                    LDA $5100,Y                     ; (2A2F) Load A with $5100,Y
                    STA $FB                         ; (2A32) Store A to $FB
                    LDA $5101,Y                     ; (2A34) Load A with $5101,Y
                    STA $FC                         ; (2A37) Store A to $FC
                    TXA                             ; (2A39) Transfer X to A
                    CLC                             ; (2A3A) Clear Carry Flag
                    ADC $FB                         ; (2A3B) Add with Carry $FB
                    STA $FB                         ; (2A3D) Store A to $FB
                    BCC l_2A43                      ; (2A3F) Branch to $2A43 if Carry Clear
                    INC $FC                         ; (2A41) Increment Memory $FC

l_2A43
                    LDA $FC                         ; (2A43) Load A with $FC
                    CLC                             ; (2A45) Clear Carry Flag
                    ADC #$04                        ; (2A46) Add with Carry with #$04 (4 / 00000100)
                    STA $FC                         ; (2A48) Store A to $FC
                    LDX Var_PlayerDirection                       ; (2A4A) Load X with Var_PlayerDirection
                    LDA $5145,X                     ; (2A4D) Load A with $5145,X
                    TAY                             ; (2A50) Transfer A to Y
                    LDA ($FB),Y                     ; (2A51) Load A with ($FB),Y
                    CMP #$A0                        ; (2A53) Subtract #$A0 from A (160 / 10100000)
                    BNE l_CheckOnPlatform           ; (2A55) Branch to $2A60 if Not Equal

l_PlayerMidAir
                    LDX #$00                        ; (2A57) Set X to #$00 (0 / 00000000)
                    LDA Var_PlayerDirection         ; (2A59) Load A with Var_PlayerDirection
                    JSR Sub_UpdateSpritePositions   ; (2A5C) Jump to Subroutine at $C900
                    RTS                             ; (2A5F) Return from Subroutine

l_CheckOnPlatform
                    CMP #$2A                        ; (2A60) Subtract #$2A from A (42 / 00101010)
                    BPL l_CheckOnMushroom           ; (2A62) Branch to $2A67 if positive
                    JMP l_PlayerMidAir              ; (2A64) Jump to $2A57

l_CheckOnMushroom
                    CMP #$54                        ; (2A67) Subtract #$54 from A (84 / 01010100)
                    BPL l_2A6E                      ; (2A69) Branch to $2A6E if positive
                    JMP l_5A9A                      ; (2A6B) Jump to $5A9A

l_2A6E
                    JMP l_GetMushroom               ; (2A6E) Jump to $5AC7

; Memory $2A71
            .byte $60

; Memory $2A72

l_2A72
                    STA $C19B                       ; (2A72) Store A to $C19B
                    LDA $544A                       ; (2A75) Load A with $544A
                    STA $2A7F                       ; (2A78) Store A to $2A7F
                    JMP l_5880                      ; (2A7B) Jump to $5880

; Memory $2A7E
            .byte $07,$09

; Memory $2A80

l_2A80
                    STX $FB                         ; (2A80) Store X to $FB
                    STY $FC                         ; (2A82) Store Y to $FC
                    LDY #$00                        ; (2A84) Load Y with #$00 (0 / 00000000)
                    LDA ($FB),Y                     ; (2A86) Load A with ($FB),Y
                    STA $C29E                       ; (2A88) Store A to $C29E
                    INY                             ; (2A8B) Increment Y Register
                    LDA ($FB),Y                     ; (2A8C) Load A with ($FB),Y
                    STA $C2A2                       ; (2A8E) Store A to $C2A2
                    INY                             ; (2A91) Increment Y Register
                    LDA ($FB),Y                     ; (2A92) Load A with ($FB),Y
                    STA $C2AE                       ; (2A94) Store A to $C2AE
                    INY                             ; (2A97) Increment Y Register
                    LDA ($FB),Y                     ; (2A98) Load A with ($FB),Y
                    STA $C2B3                       ; (2A9A) Store A to $C2B3
                    INY                             ; (2A9D) Increment Y Register
                    LDA ($FB),Y                     ; (2A9E) Load A with ($FB),Y
                    STA $C2A6                       ; (2AA0) Store A to $C2A6
                    INY                             ; (2AA3) Increment Y Register
                    LDA ($FB),Y                     ; (2AA4) Load A with ($FB),Y
                    STA $C2AA                       ; (2AA6) Store A to $C2AA
                    JSR l_C29D                      ; (2AA9) Jump to Subroutine at $C29D
                    RTS                             ; (2AAC) Return from Subroutine

; Memory $2AAD
            .byte $DC,$9D,$BD,$A0,$2A,$20,$80,$2A,$A2,$C3,$A0,$2A,$20,$80,$2A,$60
            .byte $28,$04,$FF,$07,$28,$41,$28,$D8,$FF,$DB,$28,$46,$EA,$EA,$EA,$A8
            .byte $C8,$98,$8D,$FD,$2A,$C9,$2A,$D0,$07,$18,$A5,$FB,$69,$28,$85,$FB
            .byte $C9,$54,$D0,$07,$18,$A5,$FB,$69,$28,$85,$FB,$AD,$FD,$2A,$60,$8D
            .byte $9C,$C1,$A9,$00,$8D,$4E,$53,$60,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA
            .byte $7E,$01,$58,$A9,$00,$85,$FB,$A9,$D8,$85,$FC,$A9,$00,$8D,$84,$03
            .byte $A9,$00,$8D,$86,$03,$A9,$00,$8D,$85,$03,$A9,$00,$8D,$87,$03,$A0
            .byte $00,$AE,$86,$03,$BD,$C0,$39,$8D,$88,$03,$AE,$87,$03,$BD,$88,$2B
            .byte $2D,$88,$03,$C9,$00,$F0,$11,$C9,$01,$F0,$0D,$C9,$02,$F0,$09,$C9
            .byte $03,$F0,$05,$4A,$4A,$4C,$30,$2B,$AA,$BD,$8C,$2B,$91,$FB,$EE,$87
            .byte $03,$E6,$FB,$D0,$02,$E6,$FC,$91,$FB,$E6,$FB,$D0,$02,$E6,$FC,$AD
            .byte $87,$03,$C9,$04,$D0,$B9,$EE,$86,$03,$EE,$85,$03,$AD,$85,$03,$C9
            .byte $03,$D0,$A7,$A9,$10,$E6,$FB,$D0,$02,$E6,$FC,$18,$E9,$00,$D0,$F5
            .byte $EE,$84,$03,$AD,$84,$03,$C9,$15,$D0,$8B,$60,$C0,$30,$0C,$03,$F0
            .byte $F9,$FB,$F1,$AD,$25,$D0,$8D,$8D,$2B,$AD,$26,$D0,$8D,$8F,$2B,$AD
            .byte $2A,$D0,$8D,$8E,$2B,$AD,$0F,$45,$8D,$8C,$2B,$4C,$00,$2B,$A2,$08
            .byte $A9,$01,$A0,$01,$20,$BA,$FF,$AD,$84,$03,$A2,$85,$A0,$03,$20,$BD
            .byte $FF,$60,$20,$AB,$2B,$A9,$00,$85,$FB,$A9,$30,$85,$FC,$A9,$FB,$A2
            .byte $00,$A0,$4E,$20,$D8,$FF,$60,$20,$AB,$2B,$A9,$00,$A2,$00,$A0,$30
            .byte $20,$D5,$FF,$60,$A9,$00,$8D,$12,$D4,$A9,$00,$EA,$EA,$EA,$EA,$EA
            .byte $EA,$4C,$EC,$2A,$60

; Memory $2BF2

l_2BF2
                    STA SpriteEnableRegister        ; (2BF2) Store A to $D015
                    LDA ScreenControl               ; (2BF5) Load A with $D016
                    ORA #$08                        ; (2BF8) Logical OR with Accumulator and #$08 (8 / 00001000)
                    STA ScreenControl               ; (2BFA) Store A to $D016
                    RTS                             ; (2BFD) Return from Subroutine

; Memory $2BFE
            .byte $EA,$1D

; Memory $2C00

l_2C00
                    LDX #$00                        ; (2C00) Set X to #$00 (0 / 00000000)

l_2C02
                    LDA $4542,X                     ; (2C02) Load A with $4542,X
                    JSR l_56B2                      ; (2C05) Jump to Subroutine at $56B2
                    INX                             ; (2C08) Increment X
                    CPX #$05                        ; (2C09) Subtract #$05 from X (5 / 00000101)
                    BNE l_2C02                      ; (2C0B) Branch to $2C02 if Not Equal
                    JSR l_2E62                      ; (2C0D) Jump to Subroutine at $2E62
                    RTS                             ; (2C10) Return from Subroutine

; Memory $2C11
            .byte $EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA

; Memory $2C19

l_2C19
                    LDX #$03                        ; (2C19) Set X to #$03 (3 / 00000011)

l_2C1B
                    INC $CFA6,X                     ; (2C1B) Increment Memory $CFA6,X
                    LDA $CFA6,X                     ; (2C1E) Load A with $CFA6,X
                    CMP #$BA                        ; (2C21) Subtract #$BA from A (186 / 10111010)
                    BNE l_2C2F                      ; (2C23) Branch to $2C2F if Not Equal
                    LDA #$B0                        ; (2C25) Set A to #$B0 (176 / 10110000)
                    STA $CFA6,X                     ; (2C27) Store A to $CFA6,X
                    DEX                             ; (2C2A) Decrement X
                    CPX #$00                        ; (2C2B) Subtract #$00 from X (0 / 00000000)
                    BNE l_2C1B                      ; (2C2D) Branch to $2C1B if Not Equal

l_2C2F
                    JSR l_5681                      ; (2C2F) Jump to Subroutine at $5681
                    JMP l_2C44                      ; (2C32) Jump to $2C44

; Memory $2C35
            .byte $A9,$60,$8D,$FC,$CA,$20,$86,$CA,$A9,$4C,$8D,$FC,$CA,$60,$EA

; Memory $2C44

l_2C44
                    LDA #$01                        ; (2C44) Set A to #$01 (1 / 00000001)
                    STA SpriteEnableRegister        ; (2C46) Store A to $D015
                    LDX #$00                        ; (2C49) Set X to #$00 (0 / 00000000)

l_2C4B
                    LDA $05EF,X                     ; (2C4B) Load A with $05EF,X
                    STA $0345,X                     ; (2C4E) Store A to $0345,X
                    LDA $D9EF,X                     ; (2C51) Load A with $D9EF,X
                    STA $034E,X                     ; (2C54) Store A to $034E,X
                    LDA $CFA1,X                     ; (2C57) Load A with $CFA1,X
                    STA $05EF,X                     ; (2C5A) Store A to $05EF,X
                    LDA $D81A                       ; (2C5D) Load A with $D81A
                    STA $D9EF,X                     ; (2C60) Store A to $D9EF,X
                    INX                             ; (2C63) Increment X
                    CPX #$09                        ; (2C64) Subtract #$09 from X (9 / 00001001)
                    BNE l_2C4B                      ; (2C66) Branch to $2C4B if Not Equal
                    LDA #$00                        ; (2C68) Set A to #$00 (0 / 00000000)
                    STA $CF73                       ; (2C6A) Store A to $CF73
                    LDA #$03                        ; (2C6D) Set A to #$03 (3 / 00000011)
                    STA $2E07                       ; (2C6F) Store A to $2E07
                    LDA #$04                        ; (2C72) Set A to #$04 (4 / 00000100)
                    STA $2E21                       ; (2C74) Store A to $2E21
                    STA $A1                         ; (2C77) Store A to $A1

l_2C79
                    LDA $A1                         ; (2C79) Load A with $A1
                    CMP #$06                        ; (2C7B) Subtract #$06 from A (6 / 00000110)
                    BNE l_2C79                      ; (2C7D) Branch to $2C79 if Not Equal
                    LDA #$05                        ; (2C7F) Set A to #$05 (5 / 00000101)
                    STA $2E07                       ; (2C81) Store A to $2E07
                    LDA #$07                        ; (2C84) Set A to #$07 (7 / 00000111)
                    STA $2E21                       ; (2C86) Store A to $2E21
                    LDA #$00                        ; (2C89) Set A to #$00 (0 / 00000000)
                    STA $CF74                       ; (2C8B) Store A to $CF74
                    LDX #$00                        ; (2C8E) Set X to #$00 (0 / 00000000)

l_2C90
                    LDA $0345,X                     ; (2C90) Load A with $0345,X
                    STA $05EF,X                     ; (2C93) Store A to $05EF,X
                    LDA $034E,X                     ; (2C96) Load A with $034E,X
                    STA $D9EF,X                     ; (2C99) Store A to $D9EF,X
                    INX                             ; (2C9C) Increment X
                    CPX #$09                        ; (2C9D) Subtract #$09 from X (9 / 00001001)
                    BNE l_2C90                      ; (2C9F) Branch to $2C90 if Not Equal
                    JMP l_C694                      ; (2CA1) Jump to $C694

l_2CA4
                    LDA #$B0                        ; (2CA4) Set A to #$B0 (176 / 10110000)
                    STA $CFA7                       ; (2CA6) Store A to $CFA7
                    STA $CFA8                       ; (2CA9) Store A to $CFA8
                    LDA #$B1                        ; (2CAC) Set A to #$B1 (177 / 10110001)
                    STA $CFA9                       ; (2CAE) Store A to $CFA9
                    JMP l_2C00                      ; (2CB1) Jump to $2C00

l_2CB4
                    SEI                             ; (2CB4) Set Interrupt Disable Flag
                    LDA #$31                        ; (2CB5) Set A to #$31 (49 / 00110001)
                    STA IRQExecAddr1                ; (2CB7) Store A to $0314
                    LDA #$EA                        ; (2CBA) Set A to #$EA (234 / 11101010)
                    STA IRQExecAddr2                ; (2CBC) Store A to $0315
                    CLI                             ; (2CBF) Clear Interrupt Disable Flag
                    LDA #$00                        ; (2CC0) Set A to #$00 (0 / 00000000)
                    STA $CF7F                       ; (2CC2) Store A to $CF7F
                    LDA #$05                        ; (2CC5) Set A to #$05 (5 / 00000101)
                    STA BorderColour                ; (2CC7) Store A to $D020
                    LDA #$0F                        ; (2CCA) Set A to #$0F (15 / 00001111)
                    STA BackgroundColour            ; (2CCC) Store A to $D021
                    LDA #$15                        ; (2CCF) Set A to #$15 (21 / 00010101)
                    STA VIC2MemSetup                ; (2CD1) Store A to $D018
                    LDA #$93                        ; (2CD4) Set A to #$93 (147 / 10010011)
                    JSR $FFD2                       ; (2CD6) Jump to Subroutine at $FFD2
                    LDA #$00                        ; (2CD9) Set A to #$00 (0 / 00000000)
                    STA $C6                         ; (2CDB) Store A to $C6
                    STA $FFFF                       ; (2CDD) Store A to $FFFF
                    JMP l_2BF2                      ; (2CE0) Jump to $2BF2

; Memory $2CE3
            .byte $EA

; Memory $2CE4

l_2CE4
                    LDA $45FC                       ; (2CE4) Load A with $45FC
                    STA $CA19                       ; (2CE7) Store A to $CA19
                    LDA $45FD                       ; (2CEA) Load A with $45FD
                    STA $CA07                       ; (2CED) Store A to $CA07
                    JMP l_2EE3                      ; (2CF0) Jump to $2EE3

l_2CF3
                    STA $2E81                       ; (2CF3) Store A to $2E81
                    BEQ l_2CFD                      ; (2CF6) Branch to $2CFD if Equal
                    LDA #$00                        ; (2CF8) Set A to #$00 (0 / 00000000)
                    STA $FFFF                       ; (2CFA) Store A to $FFFF

l_2CFD
                    RTS                             ; (2CFD) Return from Subroutine

; Memory $2CFE
            .byte $EA,$EA

; Memory $2D00

l_2D00
                    LDX #$00                        ; (2D00) Set X to #$00 (0 / 00000000)

l_2D02
                    LDA $45E7,X                     ; (2D02) Load A with $45E7,X
                    STA $CF76,X                     ; (2D05) Store A to $CF76,X
                    INX                             ; (2D08) Increment X
                    CPX #$05                        ; (2D09) Subtract #$05 from X (5 / 00000101)
                    BNE l_2D02                      ; (2D0B) Branch to $2D02 if Not Equal
                    LDA $45F5                       ; (2D0D) Load A with $45F5
                    STA ExtraSpriteColor1           ; (2D10) Store A to $D025
                    LDA $45F6                       ; (2D13) Load A with $45F6
                    STA ExtraSpriteColor2           ; (2D16) Store A to $D026
                    LDA $45F4                       ; (2D19) Load A with $45F4
                    STA SpriteMulticolor            ; (2D1C) Store A to $D01C
                    LDA $45F1                       ; (2D1F) Load A with $45F1
                    STA SpriteDoubleWidth           ; (2D22) Store A to $D01D
                    NOP                             ; (2D25) No operation
                    NOP                             ; (2D26) No operation
                    NOP                             ; (2D27) No operation
                    JMP l_CA00                      ; (2D28) Jump to $CA00

; Memory $2D2B
            .byte $A0,$E4,$A2,$00,$98,$9D,$F8,$07,$18,$69,$04,$A8,$BD,$AD,$45,$9D
            .byte $27,$D0,$E8,$E0,$05,$D0,$ED,$AD,$F4,$45,$4A,$4A,$8D,$1C,$D0,$60

; Memory $2D4B

l_2D4B
                    LDX #$00                        ; (2D4B) Set X to #$00 (0 / 00000000)

l_2D4D
                    LDA $CF76,X                     ; (2D4D) Load A with $CF76,X
                    BEQ l_2D5A                      ; (2D50) Branch to $2D5A if Equal

l_2D52
                    LDA $45F7,X                     ; (2D52) Load A with $45F7,X
                    BEQ l_2D5D                      ; (2D55) Branch to $2D5D if Equal
                    JMP l_2D60                      ; (2D57) Jump to $2D60

l_2D5A
                    JMP l_2EB7                      ; (2D5A) Jump to $2EB7

l_2D5D
                    JMP l_2EC4                      ; (2D5D) Jump to $2EC4

l_2D60
                    LDA SpriteBackgroundCollision   ; (2D60) Load A with $D01F
                    STA $2D7A                       ; (2D63) Store A to $2D7A
                    AND #$02                        ; (2D66) Logical AND with Accumulator and #$02 (2 / 00000010)
                    CMP #$00                        ; (2D68) Subtract #$00 from A (0 / 00000000)
                    BEQ l_2D7B                      ; (2D6A) Branch to $2D7B if Equal
                    LDA $45FE                       ; (2D6C) Load A with $45FE
                    BEQ l_2D7B                      ; (2D6F) Branch to $2D7B if Equal
                    JSR l_C4FB                      ; (2D71) Jump to Subroutine at $C4FB
                    JMP l_2D7B                      ; (2D74) Jump to $2D7B

; Memory $2D77
            .byte $EA,$7B,$2D,$00

; Memory $2D7B

l_2D7B
                    LDA Var_GameOverFlag                       ; (2D7B) Load A with Var_GameOverFlag
                    CMP #$01                        ; (2D7E) Subtract #$01 from A (1 / 00000001)
                    BEQ l_2D85                      ; (2D80) Branch to $2D85 if Equal
                    JMP l_2EB3                      ; (2D82) Jump to $2EB3

l_2D85
                    JSR l_5D98                      ; (2D85) Jump to Subroutine at $5D98
                    JMP l_5DA9                      ; (2D88) Jump to $5DA9

; Memory $2D8B
            .byte $EA,$EA

; Memory $2D8D

l_2D8D
                    STA $07F9                       ; (2D8D) Store A to $07F9
                    LDA #$00                        ; (2D90) Set A to #$00 (0 / 00000000)
                    STA $C544                       ; (2D92) Store A to $C544
                    RTS                             ; (2D95) Return from Subroutine

; Memory $2D96
            .byte $EA

; Memory $2D97
;*********************************************************************************************************************
;*                  Main menu loop                                                                                   *
;*********************************************************************************************************************
l_MainMenuLoop
                    LDA KeyJoy2                     ; (2D97) Load A with $DC00
                    AND #$10                        ; (2D9A) Logical AND with Accumulator and #$10 (16 / 00010000)
                    BNE l_Menu_FireNotPressed                      ; (2D9C) Branch to $2DB6 if Not Equal
                    BEQ l_Menu_FirePressed                      ; (2D9E) Branch to $2DC9 if Equal

l_ThisRunsAfterDeath
                    LDA #$00                        ; (2DA0) Set A to #$00 (0 / 00000000)
                    STA SpriteEnableRegister        ; (2DA2) Store A to $D015
                    LDA $45EE                       ; (2DA5) Load A with $45EE
                    JSR l_2CF3                      ; (2DA8) Jump to Subroutine at $2CF3
                    LDA #$FF                        ; (2DAB) Set A to #$FF (255 / 11111111)
                    STA $CF65                       ; (2DAD) Store A to $CF65
                    STA $CF66                       ; (2DB0) Store A to $CF66
                    JSR l_C6E7                      ; (2DB3) Jump to Subroutine at $C6E7

l_Menu_FireNotPressed
                    LDA $CF7F                       ; (2DB6) Load A with $CF7F
                    CMP #$00                        ; (2DB9) Subtract #$00 from A (0 / 00000000)
                    BEQ l_ResetToMenuScreen                      ; (2DBB) Branch to $2DC0 if Equal
                    JMP l_2CB4                      ; (2DBD) Jump to $2CB4

l_ResetToMenuScreen
                    JSR l_7720                      ; (2DC0) Jump to Subroutine at $7720
                    LDA $C5                         ; (2DC3) Load A with $C5
                    CMP #$40                        ; (2DC5) Subtract #$40 from A (64 / 01000000)
                    BEQ l_MainMenuLoop                      ; (2DC7) Branch to $2D97 if Equal

l_Menu_FirePressed
                    LDA BorderColour                ; (2DC9) Load A with $D020
                    AND #$0F                        ; (2DCC) Logical AND with Accumulator and #$0F (15 / 00001111)
                    BEQ l_2DD3                      ; (2DCE) Branch to $2DD3 if Equal
                    JSR l_7780                      ; (2DD0) Jump to Subroutine at $7780

l_2DD3
                    JMP l_C646                      ; (2DD3) Jump to $C646

; Memory $2DD6
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$EA,$EA,$EA

; Memory $2DFA

l_2DFA
                    JSR l_75A7                      ; (2DFA) Jump to Subroutine at $75A7
                    JMP l_2CE4                      ; (2DFD) Jump to $2CE4

; Memory $2E00
            .byte $60,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA
            .byte $EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA
            .byte $EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA
            .byte $EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA
            .byte $EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA
            .byte $EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA
            .byte $EA,$EA

; Memory $2E62

l_2E62
                    LDA $45ED                       ; (2E62) Load A with $45ED
                    STA $CF7C                       ; (2E65) Store A to $CF7C
                    LDA #$00                        ; (2E68) Set A to #$00 (0 / 00000000)
                    STA Var_GameOverFlag                       ; (2E6A) Store A to Var_GameOverFlag
                    LDA $450E                       ; (2E6D) Load A with $450E
                    JMP l_2E8B                      ; (2E70) Jump to $2E8B

; Memory $2E73
            .byte $EA,$AD,$8D,$02,$29,$04,$F0,$05,$A9,$FF,$8D,$7F,$CF,$4C,$01,$60
            .byte $03,$4C,$00,$2E,$4C,$31,$EA,$EA

; Memory $2E8B

l_2E8B
                    LDA $45EF                       ; (2E8B) Load A with $45EF
                    JSR l_2CF3                      ; (2E8E) Jump to Subroutine at $2CF3
                    JSR l_2F4D                      ; (2E91) Jump to Subroutine at $2F4D
                    LDA $45F1                       ; (2E94) Load A with $45F1
                    STA SpritePriority              ; (2E97) Store A to $D01B
                    LDA $450E                       ; (2E9A) Load A with $450E
                    RTS                             ; (2E9D) Return from Subroutine

; Memory $2E9E
            .byte $EA,$EA,$AD,$01,$D0,$C9,$B0,$D0,$0C,$AD,$15,$D0,$EE,$01,$D0,$EA
            .byte $EA,$EA,$8D,$15,$D0

; Memory $2EB3

l_2EB3
                    JMP l_CA27                      ; (2EB3) Jump to $CA27

; Memory $2EB6
            .byte $EA

; Memory $2EB7

l_2EB7
                    LDA Var_BinaryEnemyNum,X        ; (2EB7) Load A with Var_BinaryEnemyNum,X
                    AND SpriteEnableRegister        ; (2EBA) Logical AND with Accumulator $D015
                    CMP #$00                        ; (2EBD) Subtract #$00 from A (0 / 00000000)
                    BEQ l_2EC4                      ; (2EBF) Branch to $2EC4 if Equal
                    JMP l_2D52                      ; (2EC1) Jump to $2D52

l_2EC4
                    INX                             ; (2EC4) Increment X
                    CPX #$05                        ; (2EC5) Subtract #$05 from X (5 / 00000101)
                    BEQ l_2ECC                      ; (2EC7) Branch to $2ECC if Equal
                    JMP l_2D4D                      ; (2EC9) Jump to $2D4D

l_2ECC
                    JMP l_2C19                      ; (2ECC) Jump to $2C19

; Memory $2ECF
            .byte $EA,$A9,$00,$8D,$84,$03,$A9,$01,$8D,$81,$CF,$60,$A9,$00,$8D,$15
            .byte $D0,$4C,$94,$C6

; Memory $2EE3

l_2EE3
                    LDA $45FE                       ; (2EE3) Load A with $45FE
                    NOP                             ; (2EE6) No operation
                    NOP                             ; (2EE7) No operation
                    NOP                             ; (2EE8) No operation
                    JMP l_C646                      ; (2EE9) Jump to $C646

; Memory $2EEC
            .byte $A9,$60,$8D,$94,$C6,$20,$CD,$C4,$A9,$AD,$8D,$94,$C6,$A9,$1C,$8D
            .byte $18,$D0,$60,$EA

; Memory $2F00

l_2F00
                    STA Sprite_upper_X              ; (2F00) Store A to $D010
                    LDA #$00                        ; (2F03) Set A to #$00 (0 / 00000000)
                    STA Voice3Control               ; (2F05) Store A to $D412
                    LDX #$00                        ; (2F08) Set X to #$00 (0 / 00000000)

l_2F0A
                    LDA $45B3,X                     ; (2F0A) Load A with $45B3,X
                    STA Voice3Frequency1,X          ; (2F0D) Store A to $D40E,X
                    INX                             ; (2F10) Increment X
                    CPX #$07                        ; (2F11) Subtract #$07 from X (7 / 00000111)
                    BNE l_2F0A                      ; (2F13) Branch to $2F0A if Not Equal
                    RTS                             ; (2F15) Return from Subroutine

; Memory $2F16
            .byte $9D,$FA,$07,$A9,$00,$8D,$FF,$FF,$8A,$48,$BD,$6D,$CF,$85,$FB,$A9
            .byte $45,$85,$FC,$A0,$00,$B1,$FB,$99,$FF,$FF,$C8,$C0,$07,$D0,$F6,$68
            .byte $AA,$60

; Memory $2F38

l_2F38
                    STA Sprite2Colour,X             ; (2F38) Store A to $D029,X
                    LDA $575E,X                     ; (2F3B) Load A with $575E,X
                    STA $FB                         ; (2F3E) Store A to $FB
                    LDA $CF24,X                     ; (2F40) Load A with $CF24,X
                    STA $FC                         ; (2F43) Store A to $FC
                    LDY #$00                        ; (2F45) Load Y with #$00 (0 / 00000000)

l_2F47
                    LDA ($FB),Y                     ; (2F47) Load A with ($FB),Y
                    STA $CF15,X                     ; (2F49) Store A to $CF15,X
                    RTS                             ; (2F4C) Return from Subroutine

l_2F4D
                    JSR l_60CA                      ; (2F4D) Jump to Subroutine at $60CA
                    RTS                             ; (2F50) Return from Subroutine

; Memory $2F51
            .byte $EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA
            .byte $EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA
            .byte $EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$60,$A9,$00,$8D,$FF,$FF,$BD
            .byte $6D,$CF,$85,$FB,$A9,$45,$85,$FC,$A0,$00,$B1,$FB,$99,$FF,$FF,$C8
            .byte $C0,$07,$D0,$F6,$AD,$5E,$CF,$49,$FF,$2D,$15,$D0,$8D,$15,$D0,$AE
            .byte $5F,$CF,$20,$6E,$CE,$60,$A9,$00,$8D,$FF,$FF,$20,$80,$CA,$4C,$D0
            .byte $2E

; Memory $2FB2

Sub_StartEnemyUpdate
                    INC $CF75                       ; (2FB2) Increment Memory $CF75
                    LDA $CF75                       ; (2FB5) Load A with $CF75
                    CMP #$FF                        ; (2FB8) Subtract #$FF from A (255 / 11111111)
                    BEQ l_EnemyPositionLoop         ; (2FBA) Branch to $2FBD if Equal
                    RTS                             ; (2FBC) Return from Subroutine

l_EnemyPositionLoop
                    LDA #$00                        ; (2FBD) Set A to #$00 (0 / 00000000)
                    STA $CF75                       ; (2FBF) Store A to $CF75
                    LDX #$00                        ; (2FC2) Set X to #$00 (0 / 00000000)

l_UpdateEnemy
                    LDA Var_BinaryEnemyNum,X        ; (2FC4) Load A with Var_BinaryEnemyNum,X
                    AND SpriteEnableRegister        ; (2FC7) Logical AND with Accumulator $D015
                    CMP #$00                        ; (2FCA) Subtract #$00 from A (0 / 00000000)
                    BNE l_NextEnemy                 ; (2FCC) Branch to $2FF5 if Not Equal
                    LDA $CF76,X                     ; (2FCE) Load A with $CF76,X
                    CMP #$00                        ; (2FD1) Subtract #$00 from A (0 / 00000000)
                    BEQ l_NextEnemy                 ; (2FD3) Branch to $2FF5 if Equal
                    TXA                             ; (2FD5) Transfer X to A
                    PHA                             ; (2FD6) Push Accumulator to Stack
                    JSR l_C9F1                      ; (2FD7) Jump to Subroutine at $C9F1
                    PLA                             ; (2FDA) Pull Accumulator from Stack
                    TAX                             ; (2FDB) Transfer A to X
                    TYA                             ; (2FDC) Transfer Y to A
                    AND #$7F                        ; (2FDD) Logical AND with Accumulator and #$7F (127 / 01111111)
                    CMP $45E2,X                     ; (2FDF) Subtract $45E2,X from A
                    BPL l_NextEnemy                 ; (2FE2) Branch to $2FF5 if positive
                    TXA                             ; (2FE4) Transfer X to A
                    JSR Sub_UpdateEnemySprites      ; (2FE5) Jump to Subroutine at $C0E4
                    DEC $CF76,X                     ; (2FE8) Decrement $CF76,X
                    LDA #$01                        ; (2FEB) Set A to #$01 (1 / 00000001)
                    STA $CF29,X                     ; (2FED) Store A to $CF29,X
                    LDA #$00                        ; (2FF0) Set A to #$00 (0 / 00000000)
                    STA $CF1A,X                     ; (2FF2) Store A to $CF1A,X

l_NextEnemy
                    INX                             ; (2FF5) Increment X
                    CPX #$05                        ; (2FF6) Subtract #$05 from X (5 / 00000101)
                    BNE l_UpdateEnemy               ; (2FF8) Branch to $2FC4 if Not Equal
                    RTS                             ; (2FFA) Return from Subroutine

; Memory $2FFB
            .byte $EA,$EA,$EA,$EA,$EA,$00,$00,$00,$00,$02,$0B,$3F,$FF,$00,$00,$00
            .byte $0A,$AF,$FF,$FF,$FF,$00,$08,$AC,$FF,$FF,$FF,$FF,$FF,$00,$00,$0C
            .byte $0C,$3C,$3F,$3F,$3F,$00,$00,$00,$00,$00,$00,$00,$00,$0C,$3C,$3F
            .byte $3F,$3F,$FF,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$0C,$3F,$FF
            .byte $FF,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$03,$0F,$1F
            .byte $3F,$3F,$3F,$3F,$3F,$00,$80,$C0,$C0,$C0,$C0,$C0,$C0,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$03,$0F,$1F,$3F,$3F,$3F,$3F,$3F,$00,$80,$C0
            .byte $C0,$C0,$C0,$C0,$C0,$00,$00,$00,$00,$00,$00,$00,$00,$3C,$FF,$FF
            .byte $FF,$FF,$FF,$FF,$FF,$30,$FF,$FF,$FF,$FF,$FF,$F5,$00,$00,$8A,$FF
            .byte $FD,$FD,$C4,$00,$00,$FF,$FF,$FF,$3F,$3F,$3F,$3F,$3F,$38,$FF,$FF
            .byte $FF,$FF,$FF,$C1,$00,$00,$C0,$F0,$FC,$FC,$FF,$FF,$7F,$FF,$FF,$FF
            .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
            .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$7F
            .byte $7F,$7F,$7F,$7F,$FF,$FF,$FF,$FF,$FF,$F8,$C0,$C0,$C0,$FD,$F4,$50
            .byte $00,$00,$00,$00,$00,$3F,$3F,$3F,$3F,$3F,$3F,$3F,$3F,$80,$80,$80
            .byte $80,$80,$80,$80,$80,$7E,$7E,$7E,$7E,$7E,$FE,$FE,$7E,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$1F,$1F,$0F,$0F,$0F,$0F,$0F,$1F,$E0,$E0,$E0
            .byte $E0,$F0,$F0,$F0,$F0,$00,$00,$00,$00,$00,$00,$00,$00,$1F,$1F,$17
            .byte $17,$1F,$17,$17,$1F,$E0,$E0,$E0,$E0,$F0,$F0,$F0,$F0,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$FF,$FF,$3F,$3F,$3F,$3F,$3F,$FF,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0F,$0F,$0F
            .byte $0F,$0F,$0F,$0F,$0F,$00,$00,$00,$00,$C3,$FF,$FF,$FF,$3F,$3F,$BC
            .byte $FC,$FC,$D0,$40,$00,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
            .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
            .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$C0,$80,$80
            .byte $80,$80,$80,$C0,$C0,$00,$00,$00,$00,$00,$00,$00,$00,$7F,$FF,$7F
            .byte $7F,$7F,$7F,$FF,$FF,$C0,$C0,$C5,$D7,$FF,$FF,$FF,$FF,$FE,$FE,$FF
            .byte $FF,$FF,$FF,$FE,$FE,$00,$00,$00,$00,$00,$00,$00,$00,$FD,$FD,$FD
            .byte $FD,$FD,$FD,$FD,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$1F,$1F,$3F
            .byte $3F,$3F,$3F,$3F,$3F,$F0,$F0,$F0,$F0,$E0,$E0,$C0,$C0,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$1F,$1F,$3F,$3F,$3F,$3F,$3F,$3F,$F0,$F0,$F0
            .byte $F0,$E0,$E0,$C0,$C0,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FF,$FF
            .byte $FF,$FF,$FF,$FF,$FD,$C0,$FF,$FF,$FF,$FF,$FF,$50,$40,$00,$A8,$FF
            .byte $FF,$F5,$50,$00,$00,$3F,$3F,$3F,$3F,$3F,$3F,$3F,$3F,$FF,$FC,$C0
            .byte $F0,$F0,$FC,$7C,$7F,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FF,$FF
            .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
            .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
            .byte $FF,$FF,$FF,$FF,$FF,$C0,$C0,$C0,$C0,$C0,$C0,$C0,$C3,$00,$00,$00
            .byte $00,$00,$00,$2A,$FF,$FF,$FF,$3F,$3F,$3F,$3F,$3F,$3F,$F8,$A0,$C0
            .byte $C0,$C0,$C0,$C0,$C0,$FC,$FC,$FC,$FC,$FC,$FE,$FE,$FE,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$3F,$3F,$3F,$3F,$3F,$BF,$BF,$BF,$C0,$C0,$C0
            .byte $C0,$C0,$C0,$C0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$3F,$3F,$3F
            .byte $3F,$3F,$7F,$7F,$7F,$C0,$C0,$C0,$C0,$C0,$C0,$C0,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$BF,$BD,$BD,$BD,$FD,$FD,$FD,$FD,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$05,$3E,$1E,$1E
            .byte $1E,$1E,$1E,$1E,$1E,$3F,$3F,$0F,$0F,$03,$03,$00,$00,$00,$00,$C0
            .byte $C0,$D0,$F0,$F4,$F4,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
            .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
            .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$3C,$FF,$FF,$FF
            .byte $FF,$FF,$FF,$F0,$00,$FF,$FF,$FF,$FF,$FF,$F0,$00,$00,$3F,$3F,$1F
            .byte $1F,$1F,$1F,$1F,$07,$C0,$C0,$80,$80,$80,$80,$80,$00,$FE,$FE,$FE
            .byte $FE,$FC,$3C,$3C,$30,$00,$00,$00,$00,$00,$00,$00,$00,$3F,$2F,$2F
            .byte $2F,$0F,$0B,$0B,$0B,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FF,$FF
            .byte $FF,$7F,$7F,$3F,$3F,$FF,$FF,$FF,$FF,$FF,$FF,$FE,$C0,$54,$FD,$FF
            .byte $FE,$F8,$E0,$00,$00,$FF,$FF,$FF,$FF,$7F,$7F,$3F,$3F,$FF,$FF,$FF
            .byte $FF,$FF,$FF,$FD,$C0,$A8,$FE,$FF,$FE,$F4,$D0,$00,$00,$BF,$BF,$FF
            .byte $FF,$FF,$FF,$FF,$3F,$30,$FF,$FF,$FF,$FF,$FF,$F0,$00,$55,$DF,$FF
            .byte $FE,$E8,$80,$00,$00,$1F,$0F,$0F,$07,$07,$07,$05,$04,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$34,$3D,$2D,$2D,$0D,$0D,$0D,$09,$FF,$FF,$FF
            .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
            .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
            .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
            .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$18,$3C,$76
            .byte $7E,$66,$76,$76,$06,$7C,$6E,$66,$7E,$66,$6E,$7C,$00,$3E,$76,$60
            .byte $60,$62,$6E,$7C,$20,$70,$78,$6C,$66,$66,$7E,$7C,$00,$7E,$70,$60
            .byte $78,$60,$78,$3E,$00,$7E,$70,$60,$78,$70,$60,$60,$40,$1C,$3E,$60
            .byte $6C,$66,$6E,$3C,$00,$26,$66,$6E,$7E,$76,$66,$66,$02,$3C,$38,$18
            .byte $18,$1C,$1C,$3C,$00,$7E,$0E,$06,$06,$06,$6E,$3C,$00,$66,$66,$7C
            .byte $78,$6C,$6E,$66,$00,$30,$30,$60,$60,$60,$78,$3E,$00,$63,$77,$7F
            .byte $7B,$6B,$6B,$63,$42,$73,$67,$76,$7E,$6E,$66,$6E,$00,$1C,$36,$66
            .byte $66,$66,$6C,$38,$00,$3C,$36,$36,$3C,$70,$60,$60,$60,$38,$6C,$66
            .byte $66,$6E,$3C,$06,$00,$78,$6C,$66,$7C,$68,$6C,$66,$00,$1E,$30,$60
            .byte $3C,$06,$1E,$7C,$00,$78,$1E,$18,$18,$30,$30,$30,$00,$77,$33,$33
            .byte $66,$66,$66,$3C,$00,$36,$36,$76,$66,$66,$6C,$38,$00,$63,$63,$6B
            .byte $6B,$7F,$77,$63,$40,$66,$26,$3E,$1C,$3C,$76,$66,$C0,$06,$66,$3E
            .byte $1C,$0C,$18,$18,$00,$78,$1E,$0E,$1C,$70,$78,$0E,$00,$FF,$FF,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FF,$20,$20,$08
            .byte $08,$10,$11,$00,$00,$00,$18,$3C,$7E,$18,$18,$18,$18,$00,$10,$30
            .byte $7F,$7F,$30,$10,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$80,$80,$80,$80,$80,$80,$00,$00,$C0,$C0
            .byte $C0,$C0,$C0,$C0,$00,$00,$E0,$E0,$E0,$E0,$E0,$E0,$00,$00,$F0,$F0
            .byte $F0,$F0,$F0,$F0,$00,$00,$F8,$F8,$F8,$F8,$F8,$F8,$00,$00,$FC,$FC
            .byte $FC,$FC,$FC,$FC,$00,$00,$FE,$FE,$FE,$FE,$FE,$FE,$00,$00,$FF,$FF
            .byte $FF,$FF,$FF,$FF,$00,$00,$66,$3C,$FF,$3C,$66,$00,$00,$03,$03,$01
            .byte $01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$18,$18,$30,$00,$00,$00
            .byte $7E,$00,$00,$00,$00,$00,$00,$00,$00,$00,$18,$18,$00,$00,$03,$06
            .byte $0C,$18,$30,$60,$00,$1C,$36,$36,$66,$6C,$6C,$38,$00,$18,$38,$18
            .byte $18,$1C,$0C,$0C,$00,$7C,$66,$06,$0E,$38,$72,$7E,$00,$78,$1E,$06
            .byte $1C,$06,$1E,$78,$00,$40,$40,$64,$36,$3F,$06,$02,$00,$3E,$70,$78
            .byte $1C,$0E,$66,$3C,$00,$1C,$36,$60,$78,$6C,$66,$3C,$00,$7C,$0E,$06
            .byte $0C,$0C,$18,$18,$00,$1E,$36,$66,$3C,$66,$6C,$38,$00,$3C,$66,$36
            .byte $1E,$06,$6C,$38,$00,$00,$00,$18,$00,$00,$18,$00,$00,$00,$00,$18
            .byte $00,$00,$18,$18,$30,$08,$08,$08,$08,$08,$18,$0E,$00,$00,$00,$7E
            .byte $00,$7E,$00,$00,$00,$70,$18,$0C,$06,$0C,$18,$70,$00,$3C,$66,$06
            .byte $0C,$18,$00,$18,$00,$00,$00,$00,$00,$55,$00,$01,$55,$40,$00,$95
            .byte $40,$00,$D5,$40,$02,$99,$40,$00,$A9,$00,$00,$28,$00,$00,$3C,$00
            .byte $00,$19,$00,$00,$19,$00,$00,$1A,$00,$00,$16,$00,$00,$3E,$00,$00
            .byte $3F,$00,$00,$3C,$00,$00,$FF,$00,$00,$FE,$00,$00,$3E,$00,$00,$3E
            .byte $00,$00,$A0,$00,$00,$00,$55,$00,$01,$55,$40,$00,$95,$40,$00,$D5
            .byte $40,$02,$99,$40,$00,$A9,$00,$00,$28,$00,$00,$3C,$00,$00,$19,$00
            .byte $00,$19,$00,$00,$19,$00,$00,$19,$00,$00,$19,$00,$00,$FB,$00,$00
            .byte $FF,$00,$03,$FF,$00,$03,$CF,$00,$03,$CF,$00,$00,$EF,$00,$00,$83
            .byte $00,$00,$0A,$00,$00,$00,$55,$00,$01,$55,$40,$00,$95,$40,$00,$D5
            .byte $40,$02,$99,$40,$00,$A9,$00,$00,$28,$00,$00,$3C,$00,$00,$29,$00
            .byte $00,$29,$00,$00,$25,$00,$00,$A5,$00,$00,$95,$00,$03,$FF,$00,$03
            .byte $FF,$00,$03,$CF,$00,$03,$CF,$00,$03,$03,$C0,$0A,$03,$C0,$00,$00
            .byte $C0,$00,$02,$80,$00,$00,$00,$00,$00,$55,$00,$01,$55,$40,$00,$95
            .byte $40,$00,$D5,$40,$02,$99,$40,$00,$A9,$00,$00,$28,$00,$00,$3C,$00
            .byte $00,$29,$00,$00,$29,$00,$00,$29,$00,$00,$25,$00,$00,$2B,$00,$00
            .byte $EB,$00,$00,$FF,$00,$03,$FC,$00,$03,$FF,$80,$03,$CF,$80,$00,$C0
            .byte $80,$02,$80,$00,$00,$00,$00,$00,$00,$55,$00,$01,$55,$40,$01,$56
            .byte $00,$01,$57,$00,$01,$66,$80,$00,$6A,$00,$00,$28,$00,$00,$3C,$00
            .byte $00,$64,$00,$00,$64,$00,$00,$A4,$00,$00,$94,$00,$00,$BC,$00,$00
            .byte $FC,$00,$00,$3C,$00,$00,$FF,$00,$00,$BF,$00,$00,$BC,$00,$00,$BC
            .byte $00,$00,$0A,$00,$00,$00,$55,$00,$01,$55,$40,$01,$56,$00,$01,$57
            .byte $00,$01,$66,$80,$00,$6A,$00,$00,$28,$00,$00,$3C,$00,$00,$64,$00
            .byte $00,$64,$00,$00,$64,$00,$00,$64,$00,$00,$64,$00,$00,$EF,$00,$00
            .byte $FF,$00,$00,$FF,$C0,$00,$F3,$C0,$00,$F3,$C0,$00,$FB,$00,$00,$C2
            .byte $00,$00,$A0,$00,$00,$00,$55,$00,$01,$55,$40,$01,$56,$00,$01,$57
            .byte $00,$01,$66,$80,$00,$6A,$00,$00,$28,$00,$00,$3C,$00,$00,$68,$00
            .byte $00,$68,$00,$00,$58,$00,$00,$5A,$00,$00,$56,$00,$00,$FF,$C0,$00
            .byte $FF,$C0,$00,$F3,$C0,$00,$F3,$C0,$03,$C0,$C0,$03,$C0,$A0,$03,$00
            .byte $00,$02,$80,$00,$00,$00,$00,$00,$00,$55,$00,$01,$55,$40,$01,$56
            .byte $00,$01,$57,$00,$01,$66,$80,$00,$6A,$00,$00,$28,$00,$00,$3C,$00
            .byte $00,$68,$00,$00,$68,$00,$00,$68,$00,$00,$58,$00,$00,$E8,$00,$00
            .byte $EB,$00,$00,$FF,$00,$00,$3F,$C0,$02,$FF,$C0,$02,$F3,$C0,$02,$03
            .byte $00,$00,$02,$80,$00,$00,$00,$00,$00,$55,$00,$01,$55,$40,$00,$95
            .byte $40,$00,$D5,$40,$02,$99,$40,$00,$A9,$00,$00,$28,$00,$00,$3C,$00
            .byte $00,$29,$00,$00,$2A,$00,$00,$16,$80,$00,$15,$A0,$00,$3F,$20,$00
            .byte $FF,$00,$00,$FC,$00,$03,$F0,$00,$03,$C0,$00,$03,$C0,$00,$00,$C0
            .byte $00,$02,$80,$00,$00,$00,$00,$00,$00,$55,$00,$01,$55,$40,$01,$56
            .byte $00,$01,$57,$00,$01,$66,$80,$00,$6A,$00,$00,$28,$00,$00,$3C,$00
            .byte $00,$68,$00,$00,$A8,$00,$02,$94,$00,$0A,$54,$00,$08,$FC,$00,$00
            .byte $FF,$00,$00,$3F,$00,$00,$0F,$C0,$00,$03,$C0,$00,$03,$C0,$00,$03
            .byte $00,$00,$02,$80,$00,$00,$55,$00,$01,$55,$40,$00,$D5,$40,$00,$D5
            .byte $40,$02,$99,$40,$00,$A9,$00,$00,$28,$00,$00,$3C,$00,$00,$69,$00
            .byte $00,$5A,$00,$00,$56,$80,$00,$56,$80,$00,$7A,$00,$00,$74,$00,$00
            .byte $FC,$00,$00,$FC,$00,$00,$3C,$00,$00,$3C,$00,$00,$3C,$00,$00,$3C
            .byte $00,$00,$A8,$00,$00,$00,$55,$00,$01,$55,$40,$01,$57,$00,$01,$57
            .byte $00,$01,$66,$80,$00,$6A,$00,$00,$28,$00,$00,$3C,$00,$00,$69,$00
            .byte $00,$A5,$00,$02,$95,$00,$02,$95,$00,$00,$AD,$00,$00,$1D,$00,$00
            .byte $3F,$00,$00,$3F,$00,$00,$3C,$00,$00,$3C,$00,$00,$3C,$00,$00,$3C
            .byte $00,$00,$2A,$00,$00,$00,$55,$00,$01,$55,$40,$01,$57,$00,$01,$57
            .byte $00,$01,$66,$80,$00,$6A,$00,$00,$28,$00,$00,$3C,$00,$00,$69,$00
            .byte $00,$A5,$00,$02,$95,$00,$02,$95,$00,$00,$AD,$00,$00,$1D,$00,$00
            .byte $3F,$00,$00,$3F,$00,$00,$3C,$00,$00,$3C,$00,$00,$3C,$00,$00,$3C
            .byte $00,$00,$2A,$00,$00,$00,$55,$00,$01,$55,$40,$01,$57,$00,$01,$57
            .byte $00,$01,$66,$80,$00,$6A,$00,$00,$28,$00,$00,$3C,$00,$00,$69,$00
            .byte $00,$A5,$00,$02,$95,$00,$02,$95,$00,$00,$AD,$00,$00,$1D,$00,$00
            .byte $3F,$00,$00,$3F,$00,$00,$3C,$00,$00,$3C,$00,$00,$3C,$00,$00,$3C
            .byte $00,$00,$2A,$00,$00,$00,$55,$00,$01,$55,$40,$01,$57,$00,$01,$57
            .byte $00,$01,$66,$80,$00,$6A,$00,$00,$28,$00,$00,$3C,$00,$00,$69,$00
            .byte $00,$A5,$00,$02,$95,$00,$02,$95,$00,$00,$AD,$00,$00,$1D,$00,$00
            .byte $3F,$00,$00,$3F,$00,$00,$3C,$00,$00,$3C,$00,$00,$3C,$00,$00,$3C
            .byte $00,$00,$2A,$00,$00,$00,$55,$00,$01,$55,$40,$01,$57,$00,$01,$57
            .byte $00,$01,$66,$80,$00,$6A,$00,$00,$28,$00,$00,$3C,$00,$00,$69,$00
            .byte $00,$A5,$00,$02,$95,$00,$02,$95,$00,$00,$AD,$00,$00,$1D,$00,$00
            .byte $3F,$00,$00,$3F,$00,$00,$3C,$00,$00,$3C,$00,$00,$3C,$00,$00,$3C
            .byte $00,$00,$2A,$00,$00,$00,$00,$00,$00,$55,$00,$01,$55,$40,$00,$D5
            .byte $40,$02,$95,$40,$00,$95,$50,$00,$A5,$50,$00,$25,$50,$00,$3D,$50
            .byte $00,$F9,$50,$00,$FA,$50,$00,$3E,$50,$00,$3E,$40,$00,$16,$00,$00
            .byte $15,$00,$00,$14,$00,$00,$55,$00,$00,$56,$00,$00,$16,$00,$00,$16
            .byte $00,$00,$A0,$00,$00,$00,$55,$00,$01,$55,$40,$00,$D5,$40,$02,$95
            .byte $40,$00,$95,$50,$00,$A5,$50,$00,$25,$50,$00,$3D,$50,$00,$E9,$50
            .byte $00,$E9,$50,$00,$3B,$50,$00,$3B,$40,$00,$3B,$00,$00,$59,$00,$00
            .byte $55,$00,$01,$55,$00,$01,$45,$00,$01,$45,$00,$00,$65,$00,$00,$81
            .byte $00,$00,$0A,$00,$00,$00,$55,$00,$01,$55,$40,$00,$D5,$40,$02,$95
            .byte $40,$00,$95,$50,$00,$A5,$50,$00,$25,$50,$00,$3D,$50,$00,$E9,$50
            .byte $00,$E9,$50,$00,$2F,$50,$00,$2F,$40,$00,$AF,$00,$01,$95,$00,$01
            .byte $55,$00,$01,$45,$00,$01,$45,$00,$01,$01,$40,$0A,$01,$40,$00,$00
            .byte $40,$00,$02,$80,$00,$00,$00,$00,$00,$55,$00,$01,$55,$40,$00,$D5
            .byte $40,$02,$95,$40,$00,$95,$50,$00,$A5,$50,$00,$25,$50,$00,$3D,$50
            .byte $00,$E9,$50,$00,$F9,$50,$00,$3B,$50,$00,$3B,$40,$00,$19,$00,$00
            .byte $55,$00,$00,$55,$00,$01,$54,$00,$01,$55,$80,$01,$45,$80,$00,$40
            .byte $80,$02,$80,$00,$00,$00,$00,$00,$00,$55,$00,$01,$55,$40,$01,$57
            .byte $00,$01,$56,$80,$05,$56,$00,$05,$5A,$00,$05,$58,$00,$05,$7C,$00
            .byte $05,$6F,$00,$05,$AF,$00,$05,$BC,$00,$01,$BC,$00,$00,$94,$00,$00
            .byte $54,$00,$00,$14,$00,$00,$55,$00,$00,$95,$00,$00,$94,$00,$00,$94
            .byte $00,$00,$0A,$00,$00,$00,$55,$00,$01,$55,$40,$01,$57,$00,$01,$56
            .byte $80,$05,$56,$00,$05,$5A,$00,$05,$58,$00,$05,$7C,$00,$05,$6B,$00
            .byte $05,$6B,$00,$05,$EC,$00,$01,$EC,$00,$00,$EC,$00,$00,$65,$00,$00
            .byte $55,$00,$00,$55,$40,$00,$51,$40,$00,$51,$40,$00,$59,$00,$00,$42
            .byte $00,$00,$A0,$00,$00,$00,$55,$00,$01,$55,$40,$01,$57,$00,$01,$56
            .byte $80,$05,$56,$00,$05,$5A,$00,$05,$58,$00,$05,$7C,$00,$05,$6B,$00
            .byte $05,$6B,$00,$05,$F8,$00,$01,$F8,$00,$00,$FA,$00,$00,$56,$40,$00
            .byte $55,$40,$00,$51,$40,$00,$51,$40,$01,$40,$40,$01,$40,$A0,$01,$00
            .byte $00,$02,$80,$00,$00,$00,$00,$00,$00,$55,$00,$01,$55,$40,$01,$57
            .byte $00,$01,$56,$80,$05,$56,$00,$05,$5A,$00,$05,$58,$00,$05,$7C,$00
            .byte $05,$6B,$00,$05,$6F,$00,$05,$EC,$00,$01,$EC,$00,$00,$64,$00,$00
            .byte $55,$00,$00,$55,$00,$00,$15,$40,$02,$55,$40,$02,$51,$40,$02,$01
            .byte $00,$00,$02,$80,$00,$00,$00,$00,$00,$55,$00,$01,$55,$40,$00,$D5
            .byte $40,$02,$95,$40,$00,$95,$50,$00,$A5,$50,$00,$25,$50,$00,$3D,$50
            .byte $00,$E9,$50,$00,$F9,$50,$00,$2B,$50,$00,$AF,$40,$00,$15,$00,$00
            .byte $55,$00,$00,$55,$00,$01,$54,$00,$01,$50,$00,$01,$40,$00,$00,$40
            .byte $00,$02,$80,$00,$00,$00,$00,$00,$00,$55,$00,$01,$55,$40,$01,$57
            .byte $00,$01,$56,$80,$05,$56,$00,$05,$5A,$00,$05,$58,$00,$05,$7C,$00
            .byte $05,$6B,$00,$05,$6F,$00,$05,$E8,$00,$01,$FA,$00,$00,$54,$00,$00
            .byte $55,$00,$00,$55,$00,$00,$15,$40,$00,$05,$40,$00,$01,$40,$00,$01
            .byte $00,$00,$02,$80,$00,$00,$55,$00,$01,$55,$40,$00,$D5,$40,$02,$95
            .byte $40,$00,$95,$50,$00,$A5,$50,$00,$25,$50,$00,$3D,$50,$00,$E9,$50
            .byte $00,$E9,$50,$00,$3B,$50,$00,$3B,$40,$00,$3B,$00,$00,$19,$00,$00
            .byte $15,$00,$00,$15,$00,$00,$05,$00,$00,$05,$00,$00,$05,$00,$00,$05
            .byte $00,$00,$2A,$00,$00,$00,$00,$00,$00,$55,$00,$01,$55,$40,$00,$D5
            .byte $40,$02,$95,$40,$00,$95,$50,$00,$A5,$50,$00,$25,$50,$00,$3D,$50
            .byte $00,$E9,$50,$00,$F9,$50,$00,$3B,$50,$00,$3B,$40,$00,$19,$00,$00
            .byte $55,$00,$00,$55,$00,$01,$54,$00,$01,$55,$80,$01,$45,$80,$00,$40
            .byte $80,$02,$80,$00,$00,$00,$55,$00,$01,$55,$40,$01,$57,$00,$01,$56
            .byte $80,$05,$56,$00,$05,$5A,$00,$05,$58,$00,$05,$7C,$00,$05,$6B,$00
            .byte $05,$6B,$00,$05,$EC,$00,$01,$EC,$00,$00,$EC,$00,$00,$64,$00,$00
            .byte $54,$00,$00,$86,$00,$00,$50,$00,$00,$50,$00,$00,$50,$00,$00,$50
            .byte $00,$00,$A8,$00,$00,$00,$55,$00,$01,$55,$40,$01,$57,$00,$01,$56
            .byte $80,$05,$56,$00,$05,$5A,$00,$05,$58,$00,$05,$7C,$00,$05,$6B,$00
            .byte $05,$6B,$00,$05,$EC,$00,$01,$EC,$00,$00,$EC,$00,$00,$64,$00,$00
            .byte $54,$00,$00,$54,$00,$00,$50,$00,$00,$50,$00,$00,$50,$00,$00,$50
            .byte $00,$00,$A8,$00,$00,$00,$55,$00,$01,$55,$40,$01,$57,$00,$01,$56
            .byte $80,$05,$56,$00,$05,$5A,$00,$05,$58,$00,$05,$7C,$00,$05,$6B,$00
            .byte $05,$6B,$00,$05,$EC,$00,$01,$EC,$00,$00,$EC,$00,$00,$64,$00,$00
            .byte $54,$00,$00,$54,$00,$00,$50,$00,$00,$50,$00,$00,$50,$00,$00,$50
            .byte $00,$00,$A8,$00,$00,$00,$55,$00,$01,$55,$40,$01,$57,$00,$01,$56
            .byte $80,$05,$56,$00,$05,$5A,$00,$05,$58,$00,$05,$7C,$00,$05,$6B,$00
            .byte $05,$6B,$00,$05,$EC,$00,$01,$EC,$00,$00,$EC,$00,$00,$64,$00,$00
            .byte $54,$00,$00,$54,$00,$00,$50,$00,$00,$50,$00,$00,$50,$00,$00,$50
            .byte $00,$00,$A8,$00,$00,$00,$55,$00,$01,$55,$40,$01,$57,$00,$01,$56
            .byte $80,$05,$56,$00,$05,$5A,$00,$05,$58,$00,$05,$7C,$00,$05,$6B,$00
            .byte $05,$6B,$00,$05,$EC,$00,$01,$EC,$00,$00,$EC,$00,$00,$64,$00,$00
            .byte $54,$00,$00,$54,$00,$00,$50,$00,$00,$50,$00,$00,$50,$00,$00,$50
            .byte $00,$00,$A8,$00,$00,$00,$55,$00,$01,$55,$40,$01,$57,$00,$01,$56
            .byte $80,$05,$56,$00,$05,$5A,$00,$05,$58,$00,$05,$7C,$00,$05,$6B,$00
            .byte $05,$6B,$00,$05,$EC,$00,$01,$EC,$00,$00,$EC,$00,$00,$64,$00,$00
            .byte $54,$00,$00,$54,$00,$00,$50,$00,$00,$50,$00,$00,$50,$00,$00,$50
            .byte $00,$00,$A8,$00,$00,$00,$55,$00,$01,$55,$40,$01,$57,$00,$01,$56
            .byte $80,$05,$56,$00,$05,$5A,$00,$05,$58,$00,$05,$7C,$00,$05,$6B,$00
            .byte $05,$6B,$00,$05,$EC,$00,$01,$EC,$00,$00,$EC,$00,$00,$64,$00,$00
            .byte $54,$00,$00,$54,$00,$00,$50,$00,$00,$50,$00,$00,$50,$00,$00,$50
            .byte $00,$00,$A8,$00,$00,$05,$55,$00,$15,$F5,$40,$14,$31,$40,$50,$F0
            .byte $50,$40,$C0,$10,$00,$F0,$00,$00,$30,$00,$00,$F0,$00,$00,$C0,$00
            .byte $00,$F0,$00,$00,$30,$00,$00,$F0,$00,$00,$C0,$00,$00,$F0,$00,$0F
            .byte $FF,$00,$0F,$0F,$00,$0F,$0F,$00,$0F,$0F,$00,$0F,$0F,$00,$0F,$0F
            .byte $00,$0F,$0F,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$55,$00,$01,$55,$40,$02,$55,$80,$0A,$FB,$E0
            .byte $0A,$D9,$E0,$0A,$AA,$A0,$02,$69,$80,$02,$96,$80,$00,$AA,$00,$00
            .byte $28,$00,$00,$28,$00,$01,$D7,$40,$05,$7D,$50,$29,$55,$68,$29,$55
            .byte $68,$05,$55,$50,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$55,$00,$01,$55,$40,$02,$55,$80,$0A,$FB,$E0,$0A
            .byte $D9,$E0,$0A,$AA,$A0,$02,$69,$80,$02,$96,$80,$00,$AA,$00,$00,$28
            .byte $00,$00,$28,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$55,$00,$01,$55,$40,$02,$55,$80,$0A,$FB
            .byte $E0,$0A,$D9,$E0,$00,$18,$1C,$1D,$1C,$18,$1C,$1D,$1C,$18,$1C,$1D
            .byte $1C,$18,$1C,$1D,$1C,$1B,$1F,$20,$1F,$1B,$1F,$20,$1F,$1B,$1F,$20
            .byte $20,$21,$21,$20,$23,$18,$1C,$1D,$1C,$18,$1C,$1D,$1C,$18,$1C,$1D
            .byte $1C,$18,$1C,$1D,$1C,$28,$00,$00,$00,$26,$00,$FE,$FE,$28,$00,$00
            .byte $00,$26,$00,$FE,$FE,$29,$26,$25,$23,$22,$21,$1F,$1E,$FA,$FA,$FA
            .byte $FA,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FA
            .byte $FA,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FA
            .byte $FA,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FA
            .byte $FA,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FA
            .byte $FA,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FA
            .byte $FA,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FA
            .byte $FA,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FA
            .byte $FA,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$1E,$00
            .byte $00,$00,$20,$00,$FD,$00,$20,$00,$FD,$00,$1F,$00,$FD,$00,$1E,$00
            .byte $FD,$00,$20,$FA,$FA,$22,$23,$24,$FC,$25,$00,$25,$00,$FC,$FC,$1D
            .byte $FC,$1E,$FC,$1F,$FC,$20,$FC,$21,$21,$21,$20,$00,$00,$00,$00,$00
            .byte $00,$00,$FD,$00,$FA,$0F,$0F,$12,$1C,$8E,$08,$54,$48,$45,$20,$46
            .byte $4F,$52,$45,$53,$54,$11,$11,$11,$9D,$9D,$9D,$9D,$9D,$9D,$9D,$9D
            .byte $9D,$9D,$9D,$9D,$9D,$9D,$9D,$9D,$9D,$9D,$9D,$9D,$1F,$4D,$4F,$56
            .byte $45,$20,$54,$48,$45,$20,$42,$4F,$59,$20,$41,$52,$4F,$55,$4E,$44
            .byte $20,$54,$48,$45,$20,$46,$4F,$52,$45,$53,$54,$11,$20,$20,$20,$20
            .byte $20,$20,$20,$20,$43,$4F,$4C,$4C,$45,$43,$54,$49,$4E,$47,$20,$54
            .byte $48,$45,$20,$42,$4C,$55,$45,$20,$4D,$41,$47,$49,$43,$20,$43,$52
            .byte $4F,$53,$53,$45,$53,$2E,$01,$FF,$FF,$FF,$FF,$FF,$FF,$0F,$0F,$12
            .byte $1C,$54,$48,$45,$20,$43,$49,$4E,$45,$4D,$41,$11,$11,$0D,$1F,$12
            .byte $20,$54,$48,$45,$52,$45,$91,$2C,$11,$53,$20,$41,$20,$4D,$45,$53
            .byte $53,$41,$47,$45,$20,$53,$43,$52,$41,$57,$4C,$45,$44,$20,$49,$4E
            .byte $20,$42,$4C,$4F,$4F,$44,$2E,$2E,$2E,$01,$4E,$2E,$01,$0F,$0F,$12
            .byte $1C,$54,$48,$45,$20,$47,$48,$45,$54,$54,$4F,$11,$11,$11,$9D,$9D
            .byte $9D,$9D,$9D,$9D,$9D,$9D,$9D,$9D,$9D,$9D,$9D,$9D,$9D,$9D,$9D,$9D
            .byte $9D,$9D,$9D,$1F,$53,$41,$56,$45,$20,$59,$4F,$55,$52,$20,$45,$4E
            .byte $45,$52,$47,$59,$2C,$20,$59,$4F,$55,$91,$2C,$11,$4C,$4C,$20,$4E
            .byte $45,$45,$44,$20,$49,$54,$2E,$01,$FF,$FF,$FF,$FF,$FF,$0F,$0E,$1C
            .byte $12,$54,$48,$45,$20,$47,$52,$41,$56,$45,$59,$41,$52,$44,$11,$11
            .byte $11,$9D,$9D,$9D,$9D,$9D,$9D,$9D,$9D,$9D,$9D,$9D,$9D,$9D,$9D,$9D
            .byte $9D,$9D,$9D,$9D,$9D,$9D,$9D,$9D,$9D,$9D,$1F,$54,$48,$45,$20,$4D
            .byte $49,$44,$4E,$49,$47,$48,$54,$20,$48,$4F,$55,$52,$20,$49,$53,$20
            .byte $43,$4C,$4F,$53,$45,$20,$41,$54,$20,$48,$41,$4E,$44,$2C,$11,$20
            .byte $20,$20,$20,$20,$59,$4F,$55,$52,$20,$44,$45,$41,$54,$48,$20,$41
            .byte $57,$41,$49,$54,$53,$20,$49,$4E,$20,$54,$48,$49,$53,$20,$45,$56
            .byte $49,$4C,$20,$4C,$41,$4E,$44,$2E,$01,$FF,$FF,$FF,$FF,$0F,$0C,$1C
            .byte $12,$54,$48,$45,$20,$48,$41,$55,$4E,$54,$45,$44,$20,$48,$4F,$55
            .byte $53,$45,$11,$11,$1F,$0D,$12,$20,$59,$4F,$55,$52,$20,$47,$49,$52
            .byte $4C,$46,$52,$49,$45,$4E,$44,$20,$59,$4F,$55,$20,$41,$52,$45,$20
            .byte $53,$45,$41,$52,$43,$48,$49,$4E,$47,$20,$46,$4F,$52,$2C,$11,$20
            .byte $57,$48,$45,$4E,$20,$59,$4F,$55,$20,$48,$41,$56,$45,$20,$54,$48
            .byte $45,$20,$43,$52,$4F,$53,$53,$45,$53,$20,$53,$48,$45,$91,$2C,$11
            .byte $4C,$4C,$20,$41,$50,$50,$45,$41,$52,$11,$20,$20,$20,$20,$20,$20
            .byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$42,$59,$20,$54,$48,$45,$20
            .byte $44,$4F,$4F,$52,$2E,$01,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$0F,$0C,$1C
            .byte $12,$54,$48,$45,$20,$48,$41,$55,$4E,$54,$45,$44,$20,$48,$4F,$55
            .byte $53,$45,$11,$11,$1F,$0D,$12,$20,$20,$42,$4F,$54,$48,$20,$42,$4F
            .byte $59,$20,$41,$4E,$44,$20,$47,$49,$52,$4C,$20,$4D,$55,$53,$54,$20
            .byte $54,$55,$52,$4E,$20,$41,$52,$4F,$55,$4E,$44,$2C,$0D,$12,$11,$20
            .byte $20,$42,$45,$43,$41,$55,$53,$45,$20,$59,$4F,$55,$52,$20,$51,$55
            .byte $45,$53,$54,$20,$49,$53,$20,$48,$4F,$4D,$45,$57,$41,$52,$44,$20
            .byte $42,$4F,$55,$4E,$44,$2E,$01,$FF,$FF,$FF,$FF,$FF,$FF,$0F,$0E,$1C
            .byte $12,$54,$48,$45,$20,$47,$52,$41,$56,$45,$59,$41,$52,$44,$11,$11
            .byte $1F,$0D,$12,$20,$20,$20,$20,$42,$59,$20,$4E,$4F,$57,$20,$59,$4F
            .byte $55,$52,$20,$45,$4E,$45,$52,$47,$59,$20,$4D,$55,$53,$54,$20,$42
            .byte $45,$20,$4C,$4F,$57,$2C,$0D,$12,$11,$20,$20,$53,$4F,$20,$46,$49
            .byte $4E,$44,$20,$41,$20,$4D,$55,$53,$48,$52,$4F,$4F,$4D,$20,$42,$45
            .byte $46,$4F,$52,$45,$20,$59,$4F,$55,$20,$53,$4C,$4F,$57,$2E,$01,$FF
            .byte $FF,$FF,$FF,$FF,$FF,$0F,$0F,$12,$1C,$54,$48,$45,$20,$47,$48,$45
            .byte $54,$54,$4F,$11,$11,$1F,$0D,$12,$20,$20,$20,$20,$20,$20,$54,$48
            .byte $45,$20,$47,$48,$45,$54,$54,$4F,$20,$49,$53,$20,$41,$20,$4C,$4F
            .byte $4E,$45,$4C,$59,$20,$50,$4C,$41,$43,$45,$2C,$0D,$12,$11,$20,$20
            .byte $53,$4F,$20,$47,$45,$54,$20,$59,$4F,$55,$52,$20,$43,$52,$4F,$53
            .byte $53,$45,$53,$20,$57,$49,$54,$48,$20,$47,$52,$45,$41,$54,$20,$48
            .byte $41,$53,$54,$45,$2E,$01,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$0F,$0F,$12
            .byte $1C,$54,$48,$45,$20,$43,$49,$4E,$45,$4D,$41,$11,$11,$1F,$0D,$12
            .byte $20,$20,$20,$20,$54,$48,$45,$20,$46,$49,$4E,$41,$4C,$20,$4D,$49
            .byte $4E,$55,$54,$45,$53,$20,$41,$52,$45,$20,$57,$49,$54,$48,$20,$59
            .byte $4F,$55,$2C,$0D,$12,$11,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
            .byte $20,$20,$20,$55,$53,$45,$20,$54,$48,$45,$4D,$20,$57,$45,$4C,$4C
            .byte $2E,$01,$FF,$FF,$FF,$0F,$0F,$1C,$12,$54,$48,$45,$20,$46,$4F,$52
            .byte $45,$53,$54,$11,$11,$1F,$0D,$12,$20,$54,$48,$45,$20,$45,$4E,$44
            .byte $20,$49,$53,$20,$4E,$49,$47,$48,$2C,$20,$59,$4F,$55,$91,$2C,$11
            .byte $52,$45,$20,$47,$4F,$49,$4E,$47,$20,$54,$4F,$20,$44,$49,$45,$2E
            .byte $01,$FF,$FF,$FF,$FF,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0
            .byte $A0,$A0,$A0,$A0,$A0,$00,$00,$01,$01,$01,$01,$01,$01,$00,$01,$02
            .byte $03,$02,$00,$F6,$F0,$0A,$00,$3C,$3C,$0C,$14,$80,$E0,$00,$00,$D0
            .byte $00,$00,$20,$20,$F0,$00,$00,$00,$00,$D0,$00,$00,$20,$00,$30,$00
            .byte $00,$70,$50,$D0,$40,$00,$80,$09,$10,$00,$00,$10,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$20,$20,$20,$20,$20,$DC,$04,$05,$04
            .byte $08,$08,$08,$04,$04,$04,$04,$04,$10,$10,$FF,$01,$00,$01,$00,$00
            .byte $40,$10,$20,$04,$10,$E7,$C8,$4D,$21,$21,$03,$00,$01,$00,$00,$11
            .byte $11,$11,$11,$11,$02,$01,$01,$01,$01,$01,$10,$F4,$30,$40,$50,$FF
            .byte $FA,$01,$00,$00,$00,$00,$28,$11,$11,$11,$28,$11,$00,$21,$0D,$FA
            .byte $1D,$1D,$1C,$1C,$1B,$1B,$1A,$1A,$19,$19,$18,$18,$17,$17,$16,$16
            .byte $15,$02,$02,$14,$13,$13,$12,$12,$11,$11,$10,$10,$0F,$0F,$0E,$0E
            .byte $01,$05,$00,$0B,$01,$08,$0B,$0A,$80,$20,$20,$28,$11,$AA,$00,$00
            .byte $80,$80,$80,$21,$0D,$00,$00,$80,$80,$80,$21,$0C,$00,$00,$80,$80
            .byte $80,$21,$0C,$00,$00,$80,$80,$80,$41,$69,$00,$00,$80,$80,$80,$21
            .byte $99,$00,$00,$00,$11,$0A,$00,$09,$09,$09,$09,$09,$C8,$C8,$15,$01
            .byte $C8,$E2,$B3,$01,$01,$05,$00,$FF,$00,$FF,$F9,$F1,$00,$01,$00,$00
            .byte $00,$20,$08,$00,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01
            .byte $01,$01,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07
            .byte $07,$07,$07,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$E2,$A2,$A2
            .byte $A2,$A2,$A2,$A2,$A2,$22,$22,$07,$F7,$F7,$F7,$F7,$87,$E5,$E5,$E5
            .byte $E5,$A5,$E5,$A5,$A5,$65,$A5,$25,$45,$65,$25,$A5,$A5,$E5,$FD,$E5
            .byte $E5,$E5,$E5,$E5,$A5,$FB,$FB,$FB,$FB,$0B,$FB,$FB,$FB,$FB,$8B,$FB
            .byte $FB,$FB,$FB,$BB,$FB,$0B,$7B,$7B,$1B,$FB,$FB,$7B,$FB,$BB,$FB,$FB
            .byte $FB,$FB,$FB,$FB,$FB,$7B,$0B,$7B,$3C,$FB,$FB,$9B,$FB,$FB,$FB,$FB
            .byte $AB,$FB,$FB,$FB,$FB,$BB,$FB,$1B,$FB,$FB,$BB,$FB,$FB,$FB,$FB,$FB
            .byte $FB,$FB,$FB,$AB,$FB,$FB,$FB,$FB,$AB,$FB,$FB,$FB,$FB,$9B,$FB,$FC
            .byte $FF,$FF,$BB,$FB,$0B,$7B,$AB,$2B,$0B,$1B,$EB,$BB,$3B,$0B,$0B,$BB
            .byte $BB,$1B,$FB,$BB,$0B,$9B,$7B,$FB,$3B,$BB,$2B,$FB,$8B,$0B,$2B,$FB
            .byte $0B,$1B,$FB,$2B,$FB,$AB,$0B,$AB,$0F,$FF,$0B,$1B,$2B,$FB,$0B,$0B
            .byte $8B,$AB,$FB,$8B,$8B,$8B,$0B,$FB,$8B,$0B,$0B,$FB,$AB,$AB,$8B,$AB
            .byte $AB,$8B,$BB,$0B,$2B,$2B,$BB,$8B,$0B,$0B,$0B,$9B,$1B,$0B,$FF,$8F
            .byte $AF,$AF,$8B,$0B,$1B,$BD,$0D,$AD,$0D,$BD,$0D,$1D,$AD,$8D,$0D,$AD
            .byte $FD,$0D,$0D,$BD,$0D,$FD,$0D,$AD,$ED,$AD,$2D,$AD,$BD,$9D,$0D,$0D
            .byte $BD,$2D,$1F,$0F,$8F,$1F,$AF,$FF,$0F,$0F,$BF,$0F,$FD,$0B,$FB,$0B
            .byte $8B,$0B,$8B,$8B,$21,$BD,$0D,$0D,$BB,$AB,$2B,$1B,$0B,$8B,$BB,$2B
            .byte $2B,$AB,$BB,$BB,$0B,$7B,$0B,$1B,$0F,$FF,$0F,$AF,$BF,$AF,$FF,$8F
            .byte $0F,$9F,$FF,$9F,$0B,$7B,$EB,$FB,$2B,$0B,$21,$8D,$FD,$FD,$2D,$2D
            .byte $FB,$0B,$FB,$DB,$1B,$FB,$0B,$9B,$0B,$6B,$FB,$9B,$85,$2B,$FB,$7B
            .byte $AF,$4F,$AF,$AF,$0F,$BF,$1F,$2F,$1F,$BF,$0F,$2F,$2B,$AB,$0B,$EB
            .byte $FB,$0B,$0D,$BD,$1D,$0D,$0D,$BD,$AB,$25,$1B,$0B,$FB,$8B,$FB,$AB
            .byte $BB,$BB,$FB,$8B,$0B,$FB,$2B,$7B,$FF,$8F,$0F,$0F,$FF,$FF,$2F,$0F
            .byte $FF,$0F,$0F,$2F,$05,$FB,$0B,$9B,$0B,$FB,$CD,$9A,$0A,$2D,$E5,$8D
            .byte $AB,$AB,$0B,$8B,$05,$BB,$25,$25,$0B,$7D,$0D,$4D,$0B,$0B,$FB,$25
            .byte $9F,$0F,$FF,$0C,$1F,$1F,$AF,$7F,$2F,$9F,$0F,$8B,$0B,$0B,$A5,$0E
            .byte $FB,$1B,$AD,$0A,$0D,$AD,$AB,$BB,$9B,$2B,$8B,$BB,$2B,$AB,$0B,$FB
            .byte $0D,$0D,$FD,$0A,$4B,$BB,$AB,$7B,$FF,$FF,$FF,$3C,$FF,$FF,$0F,$FF
            .byte $FF,$E5,$FF,$9B,$FB,$25,$7B,$7B,$AA,$7B,$7B,$3A,$7D,$A5,$E5,$05
            .byte $FB,$FB,$BB,$FB,$FB,$7B,$7B,$25,$7D,$3A,$3A,$4D,$FB,$E5,$FB,$FB
            .byte $0F,$FF,$F9,$BC,$FF,$0F,$FF,$FF,$FF,$FF,$0F,$25,$FB,$FB,$FB,$9B
            .byte $FB,$FB,$FB,$FA,$BB,$FB,$1B,$E5,$FB,$05,$A5,$FB,$A5,$FB,$BB,$FB
            .byte $FB,$FA,$FD,$FB,$FB,$7B,$7B,$0B,$25,$FB,$39,$39,$9B,$FB,$FB,$FB
            .byte $FB,$AB,$FB,$FB,$FB,$7E,$BB,$7B,$4E,$25,$21,$A5,$25,$E5,$FA,$FB
            .byte $FB,$FB,$A5,$FE,$AE,$7E,$3A,$FB,$FB,$2A,$FB,$25,$FB,$FB,$85,$FC
            .byte $FB,$E1,$FF,$BF,$FB,$0B,$63,$63,$05,$FB,$FB,$A5,$FB,$BB,$FB,$FA
            .byte $E5,$E5,$E5,$E5,$A5,$25,$05,$25,$7B,$7B,$3E,$9E,$21,$FB,$FD,$FD
            .byte $AD,$FD,$FD,$FD,$FD,$BA,$7B,$1C,$7B,$FF,$BF,$FF,$FB,$FB,$E3,$E3
            .byte $E5,$FB,$FB,$2B,$FD,$65,$65,$65,$25,$7E,$7E,$7E,$3E,$9E,$FE,$E3
            .byte $E3,$FB,$BD,$FD,$0D,$FD,$0D,$9D,$2D,$0D,$FD,$0D,$AD,$AD,$FD,$19
            .byte $89,$BF,$2F,$89,$05,$BB,$EB,$0B,$BB,$A5,$2B,$1D,$0A,$0E,$BE,$AE
            .byte $0E,$8E,$1E,$A5,$0E,$7E,$0E,$03,$03,$25,$AB,$AB,$BB,$A5,$FB,$8B
            .byte $0A,$04,$24,$0D,$0D,$7D,$EF,$FF,$2F,$0F,$89,$9B,$FB,$0B,$9B,$2B
            .byte $FB,$0B,$8B,$2B,$2A,$65,$05,$85,$0E,$05,$7E,$9E,$1E,$1E,$E1,$2B
            .byte $AB,$8B,$AB,$05,$07,$A7,$05,$F5,$25,$A4,$04,$1E,$A9,$A9,$0F,$8F
            .byte $F9,$0E,$0A,$BB,$01,$01,$0B,$BB,$25,$7B,$AB,$0C,$3A,$8B,$FE,$0E
            .byte $BE,$0E,$BE,$0E,$2E,$7E,$2E,$AB,$0A,$A5,$85,$0B,$A7,$07,$8B,$9E
            .byte $0E,$2B,$19,$F9,$8F,$0F,$FF,$19,$8B,$FB,$1B,$2B,$01,$A1,$AE,$FE
            .byte $FE,$1E,$0B,$AA,$0A,$0B,$0B,$7B,$0B,$9B,$2B,$01,$21,$FB,$AB,$85
            .byte $05,$05,$AB,$FB,$0B,$1B,$FB,$BB,$11,$09,$0F,$FF,$AF,$9F,$09,$0B
            .byte $81,$BC,$0A,$0C,$01,$A1,$0E,$7E,$0E,$4E,$2E,$BB,$1B,$05,$8B,$FB
            .byte $0B,$AB,$2B,$01,$01,$65,$AB,$0B,$0A,$BB,$A5,$25,$05,$25,$05,$05
            .byte $8F,$AF,$0F,$FF,$1F,$B9,$2B,$0B,$6B,$7B,$2B,$BB,$7B,$FB,$AB,$FB
            .byte $FA,$0E,$0E,$BB,$3B,$05,$9E,$8B,$21,$BA,$AB,$1B,$0B,$FB,$AB,$AB
            .byte $FB,$8B,$A5,$FB,$0E,$9E,$0E,$BF,$2F,$AF,$9F,$9F,$A9,$05,$2B,$0B
            .byte $1B,$FB,$AB,$0B,$FB,$8B,$3E,$7E,$0E,$1E,$FB,$25,$AB,$0E,$AE,$0E
            .byte $BE,$FE,$FE,$FE,$A5,$1B,$A1,$7B,$7B,$9B,$7B,$3E,$3E,$FE,$FF,$FF
            .byte $0F,$BF,$FF,$F9,$85,$25,$25,$25,$25,$25,$25,$7B,$1B,$FA,$FF,$0B
            .byte $FB,$FB,$FB,$FB,$A5,$65,$25,$A5,$25,$25,$05,$25,$25,$E5,$E5,$E5
            .byte $E5,$E5,$A5,$E5,$E5,$15,$FF,$7F,$7F,$FF,$FF,$25,$25,$A5,$E5,$E5
            .byte $FB,$FB,$FB,$FB,$0B,$BB,$7B,$7B,$8C,$3C,$7B,$7B,$7B,$FB,$FB,$0B
            .byte $BB,$FB,$FB,$8B,$FB,$7B,$7B,$7B,$7B,$7B,$7B,$1B,$3B,$FB,$EB,$FB
            .byte $FB,$FB,$FB,$FB,$F0,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01
            .byte $01,$01,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$FF,$03,$FF,$00,$FF,$02,$FF,$01,$FF,$01,$01,$01,$01,$01
            .byte $01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$01,$01,$01,$01,$01
            .byte $01,$01,$01,$01,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $FF,$03,$03,$03,$03,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01
            .byte $01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01
            .byte $01,$01,$01,$01,$01,$01,$01,$01,$01,$50,$01,$01,$01,$01,$01,$01
            .byte $01,$01,$01,$01,$FF,$03,$03,$03,$03,$03,$00,$00,$03,$01,$01,$02
            .byte $02,$00,$00,$03,$03,$01,$01,$02,$02,$00,$00,$03,$03,$03,$01,$01
            .byte $02,$02,$02,$00,$00,$03,$03,$03,$01,$01,$02,$02,$02,$00,$00,$03
            .byte $03,$03,$03,$03,$00,$00,$02,$02,$02,$01,$00,$01,$00,$01,$01,$01
            .byte $01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF
            .byte $FF,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$00,$01,$01,$01,$01,$01,$01
            .byte $00,$00,$00,$00,$01,$F0,$F0,$F6,$F6,$F7,$F7,$F1,$F1,$F1,$F1,$F1
            .byte $F1,$F1,$F1,$F6,$F6,$F1,$F1,$F1,$F1,$F6,$F6,$F0,$F0,$01,$01,$00
            .byte $02,$00,$02,$00,$00,$01,$01,$01,$01,$01,$01,$01,$01,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$FF,$FF,$FF,$FF,$FF,$FF,$F1,$F1,$F1
            .byte $F1,$F1,$F1,$F0,$F0,$03,$01,$00,$01,$00,$02,$00,$02,$00,$02,$00
            .byte $02,$02,$02,$02,$00,$F7,$F7,$F6,$F6,$F7,$F7,$F6,$F6,$F1,$F1,$F1
            .byte $F1,$F7,$F7,$F6,$F6,$F7,$F7,$F1,$F1,$F7,$F7,$F0,$F0,$00,$03,$01
            .byte $03,$01,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$F7,$F7,$F6
            .byte $F6,$F7,$F7,$F6,$F6,$F7,$F7,$F6,$F6,$F7,$F7,$F6,$F6,$F7,$F7,$F6
            .byte $F6,$F7,$F7,$F0,$F0,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FF,$FF,$FF,$03,$03,$03
            .byte $03,$03,$03,$03,$03,$FF,$F7,$F6,$F6,$F7,$F7,$F0,$F0,$FF,$FF,$FF
            .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$F0,$F0,$F6
            .byte $F6,$F7,$F7,$F6,$F6,$F7,$F7,$F6,$F6,$F7,$F7,$F6,$F6,$F7,$F7,$F6
            .byte $F6,$F0,$F0,$F0,$F0,$00,$00,$03,$03,$03,$03,$03,$03,$FF,$FF,$01
            .byte $03,$01,$01,$01,$03,$F0,$F0,$F6,$F6,$F7,$F7,$F6,$F6,$F7,$F7,$F6
            .byte $F6,$F0,$F0,$F6,$F6,$F7,$F7,$F6,$F6,$F0,$F0,$F0,$F0,$00,$00,$00
            .byte $03,$00,$00,$00,$00,$02,$02,$02,$01,$01,$01,$02,$02,$F0,$F0,$F0
            .byte $F0,$F7,$F7,$F6,$F6,$F7,$F7,$F6,$F6,$F0,$F0,$F0,$F0,$F0,$F0,$F0
            .byte $F0,$F0,$F0,$F0,$F0,$00,$00,$01,$01,$01,$01,$01,$01,$02,$01,$01
            .byte $02,$02,$00,$00,$00,$F0,$F0,$F6,$F6,$F0,$F0,$F6,$F6,$F0,$F0,$F6
            .byte $F6,$F0,$F0,$F0,$F0,$F0,$F0,$F0,$F0,$F0,$F0,$F0,$F0,$02,$02,$02
            .byte $02,$FF,$FF,$02,$02,$02,$03,$03,$03,$FF,$02,$02,$03,$F0,$F0,$F6
            .byte $F6,$F0,$F0,$F6,$F6,$F0,$F0,$F6,$F6,$F6,$F6,$F0,$F0,$F0,$F0,$F0
            .byte $F0,$F0,$F0,$F0,$F0,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03
            .byte $03,$03,$03,$03,$03,$F6,$F6,$F0,$F0,$F0,$F0,$F6,$F6,$F0,$F0,$F0
            .byte $F0,$F6,$F6,$F0,$F0,$F0,$F0,$F0,$F0,$F0,$F0,$F0,$F0,$01,$01,$01
            .byte $01,$01,$01,$01,$01,$01,$01,$01,$01,$00,$00,$00,$00,$F1,$F1,$F0
            .byte $F0,$F0,$F0,$F1,$F1,$F0,$F0,$F0,$F0,$F1,$F1,$F0,$F0,$F0,$F0,$F0
            .byte $F0,$F0,$F0,$F0,$F0,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03
            .byte $03,$03,$03,$01,$01,$F0,$F0,$F0,$F0,$F0,$F0,$F0,$F0,$F0,$F0,$F0
            .byte $F0,$F0,$F0,$F0,$F0,$F0,$F0,$F0,$F0,$F0,$F0,$F0,$F0,$00,$00,$03
            .byte $03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$F0,$F0,$F0
            .byte $F0,$F0,$F0,$F0,$F0,$F0,$F0,$F0,$F0,$F0,$F0,$F0,$F0,$F0,$F0,$F0
            .byte $F0,$F0,$F0,$F0,$F0,$03,$03,$03,$03,$FF,$FF,$02,$02,$02,$02,$02
            .byte $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$00,$02
            .byte $02,$00,$00,$02,$02,$02,$02,$02,$01,$02,$02,$00,$00,$02,$02,$FF
            .byte $02,$FF,$02,$02,$02,$02,$02,$FF,$03,$03,$03,$03,$03,$03,$03,$03
            .byte $03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03
            .byte $03,$03,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
            .byte $02,$02,$02,$02,$02,$02,$02,$02,$02,$05,$05,$05,$05,$02,$02,$02
            .byte $02,$02,$02,$02,$02,$02,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$02,$02,$02,$01,$01,$01,$03,$03
            .byte $03,$00,$00,$00,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
            .byte $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$03,$03,$03,$03,$03,$03
            .byte $02,$02,$02,$FF,$01,$01,$01,$02,$02,$02,$01,$00,$03,$03,$03,$03
            .byte $03,$03,$03,$03,$03,$03,$03,$03,$03,$01,$FF,$04,$00,$01,$03,$07
            .byte $0F,$1E,$1C,$FF,$38,$F0,$F0,$B0,$30,$30,$30,$FF,$FF,$FF,$FF,$FF
            .byte $FF,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$00,$00,$FF,$00,$7E,$FF,$FF
            .byte $FF,$7E,$00,$FF,$00,$7E,$C3,$81,$C3,$7E,$00,$FF,$00,$0C,$0E,$0D
            .byte $0D,$0D,$0C,$FF,$0C,$00,$00,$00,$00,$7E,$C3,$81,$C3,$00,$00,$00
            .byte $00,$7E,$FF,$FF,$FF,$06,$06,$06,$06,$7E,$C3,$81,$C3,$06,$06,$06
            .byte $06,$7E,$FF,$FF,$FF,$06,$06,$06,$06,$06,$06,$06,$06,$00,$00,$30
            .byte $30,$00,$00,$FF,$00,$40,$30,$18,$1C,$38,$30,$FF,$18,$7C,$62,$30
            .byte $10,$00,$00,$FF,$00,$0D,$0D,$0C,$0C,$7E,$FF,$FF,$FF,$06,$06,$06
            .byte $06,$06,$06,$FF,$06,$00,$00,$00,$00,$0C,$0E,$FF,$0D,$7E,$00,$00
            .byte $00,$00,$00,$FF,$00,$7E,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$06,$06,$FF,$06,$0C,$0E,$0D,$0D,$0D,$0C,$0C,$0C,$00,$00,$00
            .byte $00,$06,$06,$06,$06,$00,$00,$00,$00,$0C,$0E,$0D,$0D,$00,$00,$30
            .byte $30,$00,$00,$00,$00,$00,$02,$32,$76,$7C,$04,$FF,$08,$10,$10,$00
            .byte $00,$00,$00,$FF,$00,$00,$00,$00,$00,$7E,$7E,$FF,$00,$00,$00,$00
            .byte $00,$00,$00,$FF,$7E,$7E,$00,$00,$00,$00,$00,$FF,$00,$FF,$E7,$C3
            .byte $81,$E7,$E7,$E7,$FF,$10,$30,$7F,$FF,$FF,$7F,$30,$10,$08,$0C,$FE
            .byte $FF,$FF,$FE,$0C,$08,$0F,$1F,$18,$38,$30,$30,$FF,$30,$80,$C0,$60
            .byte $20,$20,$60,$FF,$C0,$EE,$21,$D0,$AD,$21,$D0,$8D,$0F,$45,$60,$FF
            .byte $FF,$FF,$FF,$FF,$FF,$01,$02,$04,$08,$10,$20,$40,$80,$00,$00,$20
            .byte $37,$28,$37,$20,$01,$00,$3B,$11,$FF,$00,$FF,$AA,$2A,$00,$B8,$10
            .byte $F7,$08,$EF,$A8,$E8,$02,$06,$1A,$E2,$02,$E2,$1A,$06,$00,$00,$00
            .byte $00,$00,$1F,$22,$4F,$00,$00,$00,$00,$00,$FF,$00,$FF,$00,$00,$00
            .byte $00,$00,$FF,$00,$FF,$00,$01,$03,$05,$19,$E1,$01,$E1,$FF,$FF,$FF
            .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
            .byte $FF,$FF,$FF,$FF,$FF,$31,$33,$37,$3F,$3E,$3C,$FF,$F0,$80,$80,$00
            .byte $00,$00,$00,$FF,$00,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$00,$00,$7C
            .byte $7E,$7F,$7F,$7F,$7F,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$01,$01,$00
            .byte $00,$00,$00,$00,$00,$4A,$3F,$80,$7F,$00,$00,$00,$00,$CF,$18,$3F
            .byte $C0,$00,$00,$00,$00,$82,$40,$80,$00,$00,$00,$00,$00,$53,$53,$53
            .byte $4F,$22,$1F,$00,$00,$06,$07,$07,$FF,$00,$FF,$00,$00,$60,$FF,$69
            .byte $FF,$09,$FF,$00,$00,$19,$FF,$80,$FF,$80,$FF,$00,$00,$00,$FF,$00
            .byte $FF,$00,$FF,$00,$00,$00,$FE,$01,$FD,$01,$FE,$04,$00,$01,$03,$07
            .byte $0F,$1E,$1C,$FF,$38,$F0,$F0,$B0,$30,$30,$30,$FF,$FF,$FF,$FF,$FF
            .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$7F,$7F,$7F
            .byte $7F,$7F,$7F,$7F,$7F,$00,$00,$00,$FC,$F8,$80,$00,$00,$00,$00,$04
            .byte $3F,$47,$3F,$04,$00,$00,$00,$18,$FF,$FE,$FF,$18,$00,$00,$00,$00
            .byte $FF,$DB,$FF,$00,$00,$00,$00,$13,$FF,$6F,$FF,$13,$00,$FF,$FF,$FF
            .byte $FF,$FF,$FF,$FF,$FF,$60,$98,$87,$80,$40,$40,$20,$20,$00,$00,$07
            .byte $F8,$00,$00,$61,$61,$00,$00,$80,$40,$40,$80,$FF,$FF,$00,$00,$00
            .byte $00,$00,$00,$FF,$FF,$00,$00,$00,$00,$00,$55,$FF,$FF,$39,$71,$73
            .byte $73,$73,$63,$FF,$61,$FF,$98,$98,$18,$18,$18,$FF,$0C,$E0,$70,$18
            .byte $0C,$06,$06,$FF,$06,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$7F,$7F,$7F
            .byte $7F,$7F,$7F,$7F,$E3,$00,$00,$00,$00,$00,$C0,$20,$80,$FF,$FF,$FF
            .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
            .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$00,$0A,$15
            .byte $08,$14,$0A,$04,$08,$20,$E1,$2D,$4C,$20,$1F,$00,$00,$61,$61,$81
            .byte $19,$E6,$00,$00,$00,$FF,$00,$00,$00,$00,$00,$00,$00,$FF,$00,$00
            .byte $00,$00,$00,$00,$00,$FC,$00,$00,$00,$00,$00,$00,$00,$31,$30,$18
            .byte $0C,$06,$01,$FF,$00,$0C,$0C,$0C,$0C,$0C,$8C,$FF,$06,$06,$06,$0C
            .byte $18,$30,$C0,$FF,$00,$00,$00,$28,$00,$50,$00,$78,$00,$A0,$00,$C8
            .byte $00,$F0,$00,$18,$01,$40,$01,$68,$01,$90,$01,$B8,$01,$E0,$01,$08
            .byte $02,$30,$02,$58,$02,$80,$02,$A8,$02,$D0,$02,$F8,$02,$20,$03,$48
            .byte $03,$70,$03,$98,$03,$C0,$03,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
            .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$00,$50,$27,$29,$FF,$FF
            .byte $FF,$FF,$FF,$FF,$FF,$AD,$0F,$45,$29,$0F,$AA,$BD,$87,$CF,$8D,$86
            .byte $02,$60,$EE,$20,$D0,$AD,$20,$D0,$8D,$0E,$45,$60,$FF,$00,$00,$00
            .byte $00,$01,$03,$07,$03,$06,$06,$06,$06,$86,$C6,$CC,$98,$FF,$FF,$FF
            .byte $FF,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$00,$00,$FF,$18,$18,$18,$18
            .byte $18,$18,$18,$FF,$18,$18,$18,$18,$18,$18,$18,$FF,$00,$A9,$67,$85
            .byte $FB,$A9,$04,$85,$FC,$A2,$00,$A0,$00,$A9,$80,$91,$FB,$A5,$FC,$18
            .byte $69,$D4,$85,$FC,$A9,$05,$91,$FB,$A5,$FC,$38,$E9,$D4,$85,$FC,$C8
            .byte $C0,$09,$D0,$E5,$A5,$FB,$18,$69,$28,$85,$FB,$90,$02,$E6,$FC,$E8
            .byte $E0,$16,$D0,$D3,$20,$38,$C0,$60,$7D,$91,$FB,$E8,$8D,$D3,$51,$A5
            .byte $FC,$18,$69,$D4,$85,$FC,$A9,$0B,$91,$FB,$A5,$FC,$38,$E9,$D4,$85
            .byte $FC,$AD,$D3,$51,$60,$F0,$00,$00,$00,$00,$00,$00,$00,$FF,$FF,$FF
            .byte $FF,$FF,$FF,$FF,$FF,$AD,$24,$05,$85,$FB,$A9,$06,$85,$FC,$A2,$00
            .byte $18,$06,$FB,$90,$0B,$06,$FC,$A9,$01,$05,$FC,$85,$FC,$4C,$1D,$52
            .byte $06,$FC,$E8,$E0,$03,$D0,$E9,$60,$EA,$20,$00,$52,$A0,$00,$A9,$00
            .byte $8D,$83,$03,$A2,$00,$A9,$80,$8D,$81,$03,$A9,$01,$8D,$82,$03,$B1
            .byte $FB,$2D,$81,$03,$F0,$09,$AD,$82,$03,$0D,$83,$03,$8D,$83,$03,$E8
            .byte $4E,$81,$03,$0E,$82,$03,$E0,$08,$D0,$E5,$AD,$83,$03,$91,$FB,$C8
            .byte $C0,$08,$D0,$CA,$20,$00,$52,$A5,$FB,$8D,$7B,$C0,$A5,$FC,$8D,$7C
            .byte $C0,$20,$68,$C0,$60,$EA,$EA,$20,$00,$52,$A0,$00,$A9,$00,$91,$FB
            .byte $C8,$C0,$08,$D0,$F9,$A0,$00,$A2,$00,$A9,$78,$85,$FD,$A9,$04,$85
            .byte $FE,$8A,$48,$0A,$AA,$BD,$00,$51,$18,$65,$FD,$85,$FD,$90,$02,$E6
            .byte $FE,$BD,$01,$51,$18,$65,$FE,$85,$FE,$EA,$EA,$B1,$FD,$8D,$81,$03
            .byte $EA,$EA,$68,$AA,$AD,$81,$03,$C9,$80,$D0,$07,$B1,$FB,$1D,$10,$4F
            .byte $91,$FB,$E8,$E0,$08,$D0,$C2,$C8,$C0,$08,$D0,$BB,$4C,$5F,$52,$EA
            .byte $20,$00,$52,$A0,$00,$B1,$FB,$49,$FF,$91,$FB,$C8,$C0,$08,$D0,$F5
            .byte $4C,$5F,$52,$EA,$20,$00,$52,$A0,$00,$A2,$07,$B1,$FB,$9D,$84,$03
            .byte $CA,$C8,$C0,$08,$D0,$F5,$A0,$00,$B9,$84,$03,$91,$FB,$C8,$C0,$08
            .byte $D0,$F6,$4C,$5F,$52,$8E,$81,$03,$8C,$82,$03,$A0,$00,$A9,$00,$85
            .byte $FB,$A9,$D8,$85,$FC,$B1,$FB,$29,$0F,$CD,$81,$03,$D0,$05,$AD,$82
            .byte $03,$91,$FB,$E6,$FB,$D0,$02,$E6,$FC,$A5,$FB,$C9,$E9,$D0,$E6,$A5
            .byte $FC,$C9,$DB,$D0,$E0,$60,$EA,$EA,$EA,$EA,$A2,$06,$A0,$0F,$4C,$00
            .byte $53,$A2,$0F,$A0,$06,$4C,$00,$53,$A2,$00,$A0,$0F,$4C,$00,$53,$E3
            .byte $0C,$03,$EA,$00,$EA

; Memory $5350

l_5350
                    LDA $45FF                       ; (5350) Load A with $45FF
                    BEQ l_535A                      ; (5353) Branch to $535A if Equal
                    DEC $534C                       ; (5355) Decrement $534C
                    BEQ l_535D                      ; (5358) Branch to $535D if Equal

l_535A
                    RTS                             ; (535A) Return from Subroutine

; Memory $535B
            .byte $EA,$EA

; Memory $535D

l_535D
                    LDA $534B                       ; (535D) Load A with $534B
                    STA $534C                       ; (5360) Store A to $534C
                    LDA Sprite0_Y                   ; (5363) Load A with $D001
                    STA $534A                       ; (5366) Store A to $534A
                    LDA #$01                        ; (5369) Set A to #$01 (1 / 00000001)
                    LDX #$00                        ; (536B) Set X to #$00 (0 / 00000000)
                    JSR Sub_PlayerPosition          ; (536D) Jump to Subroutine at $2A04
                    LDA Sprite0_Y                   ; (5370) Load A with $D001
                    CMP $534A                       ; (5373) Subtract $534A from A
                    BNE l_537E                      ; (5376) Branch to $537E if Not Equal
                    JMP l_54A0                      ; (5378) Jump to $54A0

; Memory $537B
            .byte $EA,$EA,$EA

; Memory $537E

l_537E
                    JSR l_54AC                      ; (537E) Jump to Subroutine at $54AC
                    INC $534E                       ; (5381) Increment Memory $534E
                    LDA #$00                        ; (5384) Set A to #$00 (0 / 00000000)
                    STA $4502                       ; (5386) Store A to $4502
                    STA $4503                       ; (5389) Store A to $4503
                    RTS                             ; (538C) Return from Subroutine

; Memory $538D
            .byte $EA

; Memory $538E

l_538E
                    INC $CF02                       ; (538E) Increment Memory $CF02
                    LDA $C19C                       ; (5391) Load A with $C19C
                    BEQ l_5350                      ; (5394) Branch to $5350 if Equal
                    DEC $2A7F                       ; (5396) Decrement $2A7F
                    BEQ l_539E                      ; (5399) Branch to $539E if Equal
                    RTS                             ; (539B) Return from Subroutine

; Memory $539C
            .byte $EA,$EA

; Memory $539E

l_539E
                    JSR l_542B                      ; (539E) Jump to Subroutine at $542B
                    BNE l_53C6                      ; (53A1) Branch to $53C6 if Not Equal
                    LDA #$00                        ; (53A3) Set A to #$00 (0 / 00000000)
                    JSR Sub_PlayerPosition                      ; (53A5) Jump to Subroutine at $2A04
                    JSR l_5437                      ; (53A8) Jump to Subroutine at $5437
                    LDX $2A7E                       ; (53AB) Load X with $2A7E
                    CPX #$18                        ; (53AE) Subtract #$18 from X (24 / 00011000)
                    BNE l_53B5                      ; (53B0) Branch to $53B5 if Not Equal
                    JMP l_53BE                      ; (53B2) Jump to $53BE

l_53B5
                    LDA $544A,X                     ; (53B5) Load A with $544A,X
                    STA $2A7F                       ; (53B8) Store A to $2A7F
                    JMP l_54FC                      ; (53BB) Jump to $54FC

l_53BE
                    LDA #$01                        ; (53BE) Set A to #$01 (1 / 00000001)
                    STA $C19B                       ; (53C0) Store A to $C19B
                    RTS                             ; (53C3) Return from Subroutine

; Memory $53C4
            .byte $EA,$EA

; Memory $53C6

l_53C6
                    LDA #$01                        ; (53C6) Set A to #$01 (1 / 00000001)
                    JSR l_5467                      ; (53C8) Jump to Subroutine at $5467
                    DEC $2A7E                       ; (53CB) Decrement $2A7E
                    LDX $2A7E                       ; (53CE) Load X with $2A7E
                    CPX #$00                        ; (53D1) Subtract #$00 from X (0 / 00000000)
                    BNE l_53D8                      ; (53D3) Branch to $53D8 if Not Equal
                    JMP l_53E2                      ; (53D5) Jump to $53E2

l_53D8
                    LDA $544A,X                     ; (53D8) Load A with $544A,X
                    STA $2A7F                       ; (53DB) Store A to $2A7F
                    JMP l_5518                      ; (53DE) Jump to $5518

; Memory $53E1
            .byte $EA

; Memory $53E2

l_53E2
                    LDA #$00                        ; (53E2) Set A to #$00 (0 / 00000000)
                    STA $C19C                       ; (53E4) Store A to $C19C
                    LDA #$18                        ; (53E7) Set A to #$18 (24 / 00011000)
                    STA $534E                       ; (53E9) Store A to $534E
                    RTS                             ; (53EC) Return from Subroutine

; Memory $53ED
            .byte $EA,$EA

; Memory $53EF

l_53EF
                    LDA #$01                        ; (53EF) Set A to #$01 (1 / 00000001)
                    STA $4502                       ; (53F1) Store A to $4502
                    STA $4503                       ; (53F4) Store A to $4503
                    LDA $534E                       ; (53F7) Load A with $534E
                    CMP $457A                       ; (53FA) Subtract $457A from A
                    BPL l_53FF                      ; (53FD) Branch to $53FF if positive

l_53FF
                    NOP                             ; (53FF) No operation
                    NOP                             ; (5400) No operation
                    NOP                             ; (5401) No operation
                    NOP                             ; (5402) No operation
                    NOP                             ; (5403) No operation
                    NOP                             ; (5404) No operation
                    NOP                             ; (5405) No operation
                    LDA #$00                        ; (5406) Set A to #$00 (0 / 00000000)
                    STA $534E                       ; (5408) Store A to $534E
                    RTS                             ; (540B) Return from Subroutine

; Memory $540C
            .byte $EA,$A9,$00,$8D,$4E,$53,$20,$A7,$2F,$60,$EA,$EA

; Memory $5418

l_5418
                    LDA $534E                       ; (5418) Load A with $534E
                    BNE l_5425                      ; (541B) Branch to $5425 if Not Equal
                    LDA #$01                        ; (541D) Set A to #$01 (1 / 00000001)
                    STA $C19C                       ; (541F) Store A to $C19C
                    JMP l_C1B4                      ; (5422) Jump to $C1B4

l_5425
                    JMP l_C819                      ; (5425) Jump to $C819

; Memory $5428
            .byte $EA,$EA,$E3

; Memory $542B

l_542B
                    LDA Sprite0_Y                   ; (542B) Load A with $D001
                    STA $542A                       ; (542E) Store A to $542A
                    LDA $C19B                       ; (5431) Load A with $C19B
                    RTS                             ; (5434) Return from Subroutine

; Memory $5435
            .byte $EA,$EA

; Memory $5437

l_5437
                    LDA Sprite0_Y                   ; (5437) Load A with $D001
                    CMP $542A                       ; (543A) Subtract $542A from A
                    BNE l_5444                      ; (543D) Branch to $5444 if Not Equal
                    LDA #$01                        ; (543F) Set A to #$01 (1 / 00000001)
                    STA $C19B                       ; (5441) Store A to $C19B

l_5444
                    INC $2A7E                       ; (5444) Increment Memory $2A7E
                    RTS                             ; (5447) Return from Subroutine

; Memory $5448
            .byte $EA,$EA,$05,$05,$06,$06,$07,$08,$09,$09,$0A,$0B,$0C,$0E,$0F,$10
            .byte $12,$14,$16,$18,$1A,$1C,$1F,$22,$25,$29,$2D,$EA,$EA,$EA,$E3

; Memory $5467

l_5467
                    LDA Sprite0_Y                   ; (5467) Load A with $D001
                    STA $5466                       ; (546A) Store A to $5466
                    LDA #$01                        ; (546D) Set A to #$01 (1 / 00000001)
                    JSR Sub_PlayerPosition                      ; (546F) Jump to Subroutine at $2A04
                    LDA $5466                       ; (5472) Load A with $5466
                    CMP Sprite0_Y                   ; (5475) Subtract $D001 from A
                    BEQ l_547B                      ; (5478) Branch to $547B if Equal
                    RTS                             ; (547A) Return from Subroutine

l_547B
                    LDA #$00                        ; (547B) Set A to #$00 (0 / 00000000)
                    STA $C19C                       ; (547D) Store A to $C19C
                    RTS                             ; (5480) Return from Subroutine

; Memory $5481
            .byte $EA,$EA

; Memory $5483

l_5483
                    LDA #$00                        ; (5483) Set A to #$00 (0 / 00000000)
                    STA Voice3Control               ; (5485) Store A to $D412
                    LDA #$0D                        ; (5488) Set A to #$0D (13 / 00001101)
                    STA Voice3AttackDecayLength     ; (548A) Store A to $D413
                    LDA #$00                        ; (548D) Set A to #$00 (0 / 00000000)
                    STA Voice3SustainVolRelease     ; (548F) Store A to $D414
                    LDA $45B7                       ; (5492) Load A with $45B7
                    STA Voice3Control               ; (5495) Store A to $D412
                    LDA #$00                        ; (5498) Set A to #$00 (0 / 00000000)
                    NOP                             ; (549A) No operation
                    NOP                             ; (549B) No operation
                    JMP l_54EA                      ; (549C) Jump to $54EA

; Memory $549F
            .byte $00

; Memory $54A0

l_54A0
                    LDA #$00                        ; (54A0) Set A to #$00 (0 / 00000000)
                    STA Voice3Control               ; (54A2) Store A to $D412
                    STA $549F                       ; (54A5) Store A to $549F
                    JMP l_53EF                      ; (54A8) Jump to $53EF

; Memory $54AB
            .byte $EA

; Memory $54AC

l_54AC
                    LDA $549F                       ; (54AC) Load A with $549F
                    BEQ l_54B4                      ; (54AF) Branch to $54B2 if Equal
                    JMP l_54C1                      ; (54B1) Jump to $54C1
l_54B4              LDA #$01                        ; (54B4) Set A to #$01 (1 / 00000001)
                    STA $549F                       ; (54B6) Store A to $549F
                    JSR l_5483                      ; (54B9) Jump to Subroutine at $5483
                    JMP l_54DC                      ; (54BC) Jump to $54DC

; Memory $54BF
            .byte $73,$80

; Memory $54C1

l_54C1
                    LDA $54C0                       ; (54C1) Load A with $54C0
                    SEC                             ; (54C4) Set Carry Flag
                    SBC #$80                        ; (54C5) Subtract with Carry #$80 (128 / 10000000)
                    STA $54C0                       ; (54C7) Store A to $54C0
                    STA Voice3Frequency1            ; (54CA) Store A to $D40E
                    BCS l_54D2                      ; (54CD) Branch if Carry Set $54D2
                    DEC $54BF                       ; (54CF) Decrement $54BF

l_54D2
                    LDA $54BF                       ; (54D2) Load A with $54BF
                    STA Voice3Frequency2            ; (54D5) Store A to $D40F
                    RTS                             ; (54D8) Return from Subroutine

; Memory $54D9
            .byte $EA,$EA,$EA

; Memory $54DC

l_54DC
                    LDA #$80                        ; (54DC) Set A to #$80 (128 / 10000000)
                    STA $54BF                       ; (54DE) Store A to $54BF
                    STA $54C0                       ; (54E1) Store A to $54C0
                    RTS                             ; (54E4) Return from Subroutine

; Memory $54E5
            .byte $04,$06,$04,$04,$04

; Memory $54EA

l_54EA
                    LDA #$00                        ; (54EA) Set A to #$00 (0 / 00000000)
                    STA $54F9                       ; (54EC) Store A to $54F9
                    LDA #$08                        ; (54EF) Set A to #$08 (8 / 00001000)
                    STA $54FA                       ; (54F1) Store A to $54FA
                    JMP l_C819                      ; (54F4) Jump to $C819

; Memory $54F7
            .byte $EA,$EA,$00,$08,$EA

; Memory $54FC

l_54FC
                    LDA $54F9                       ; (54FC) Load A with $54F9
                    SEC                             ; (54FF) Set Carry Flag
                    SBC #$05                        ; (5500) Subtract with Carry #$05 (5 / 00000101)
                    STA $54F9                       ; (5502) Store A to $54F9
                    STA Voice3Frequency1            ; (5505) Store A to $D40E
                    BCC l_550D                      ; (5508) Branch to $550D if Carry Clear
                    INC $54FA                       ; (550A) Increment Memory $54FA

l_550D
                    LDA $54FA                       ; (550D) Load A with $54FA
                    STA Voice3Frequency2            ; (5510) Store A to $D40F
                    RTS                             ; (5513) Return from Subroutine

; Memory $5514
            .byte $EA,$EA,$EA,$EA

; Memory $5518

l_5518
                    LDA $54F9                       ; (5518) Load A with $54F9
                    CLC                             ; (551B) Clear Carry Flag
                    ADC #$05                        ; (551C) Add with Carry with #$05 (5 / 00000101)
                    STA $54F9                       ; (551E) Store A to $54F9
                    STA Voice3Frequency1            ; (5521) Store A to $D40E
                    BCS l_5526                      ; (5524) Branch if Carry Set $5526

l_5526
                    DEC $54FA                       ; (5526) Decrement $54FA
                    LDA $54FA                       ; (5529) Load A with $54FA
                    STA Voice3Frequency2            ; (552C) Store A to $D40F
                    RTS                             ; (552F) Return from Subroutine

; Memory $5530
            .byte $EA,$EA,$AD,$16,$45,$8D,$00,$D0,$AD,$17,$45,$8D,$01,$D0,$A9,$03
            .byte $8D,$15,$D0,$AD,$18,$45,$8D,$10,$D0,$AD,$F4,$45,$29,$01,$8D,$1C
            .byte $D0,$AD,$10,$45,$8D,$27,$D0,$EA,$23,$C0,$C1,$A2,$00,$AD,$ED,$C1
            .byte $C9,$01,$D0,$05,$A9,$03,$20,$CF,$55,$AD,$ED,$C1,$C9,$FF,$D0,$05
            .byte $A9,$02,$20,$CF,$55,$AD,$EC,$C1,$C9,$01,$D0,$05,$A9,$01,$20,$CF
            .byte $55,$AD,$EC,$C1,$C9,$FF,$D0,$05,$A9,$00,$20,$CF,$55,$AD,$EE,$C1
            .byte $D0,$0E,$A9,$20,$8D,$65,$CF,$8D,$66,$CF,$20,$E7,$C6,$4C,$58,$55
            .byte $AD,$00,$D0,$8D,$16,$45,$AD,$01,$D0,$8D,$17,$45,$AD,$10,$D0,$29
            .byte $01,$8D,$18,$45,$AD,$F8,$07,$8D,$EC,$45,$8D,$47,$08,$A9,$00,$8D
            .byte $15,$D0,$A9,$15,$8D,$18,$D0,$A9,$00,$85,$C6,$60,$EA,$EA,$02,$8D
            .byte $CE,$55,$20,$00,$C9,$AD,$CE,$55,$0A,$18,$69,$D8,$8D,$F8,$07,$60
            .byte $00,$00,$EA,$A9,$93,$20,$D2,$FF,$A2,$88,$A0,$C1,$20,$80,$2A,$A2
            .byte $8E,$A0,$C1,$20,$80,$2A,$A2,$94,$A0,$C1,$20,$80,$2A,$60,$EA,$EA
            .byte $A2,$00,$A9,$FF,$9D,$80,$03,$E8,$E0,$40,$D0,$F6,$A9,$0E,$8D,$F8
            .byte $07,$8D,$F9,$07,$A9,$2C,$8D,$00,$D0,$8D,$02,$D0,$A9,$70,$8D,$01
            .byte $D0,$A9,$9A,$8D,$03,$D0,$A9,$0F,$8D,$27,$D0,$8D,$28,$D0,$A9,$0B
            .byte $8D,$15,$D0,$8D,$10,$D0,$A9,$03,$8D,$1B,$D0,$A2,$00,$A9,$1E,$8D
            .byte $65,$CF,$8D,$66,$CF,$20,$E7,$C6,$EE,$07,$D0,$E8,$E0,$15,$D0,$ED
            .byte $69

; Memory $5651

l_5651
                    LDA $45FF                       ; (5651) Load A with $45FF
                    BEQ l_565E                      ; (5654) Branch to $565E if Equal
                    LDA #$00                        ; (5656) Set A to #$00 (0 / 00000000)
                    STA $4500                       ; (5658) Store A to $4500
                    JMP l_570A                      ; (565B) Jump to $570A

l_565E
                    JMP l_5716                      ; (565E) Jump to $5716

; Memory $5661
            .byte $60

; Memory $5662

l_5662
                    STA $C0E3                       ; (5662) Store A to $C0E3
                    TAX                             ; (5665) Transfer A to X
                    LDA #$01                        ; (5666) Set A to #$01 (1 / 00000001)
                    STA $CF33,X                     ; (5668) Store A to $CF33,X
                    TXA                             ; (566B) Transfer X to A
                    RTS                             ; (566C) Return from Subroutine

l_566D
                    LDX #$00                        ; (566D) Set X to #$00 (0 / 00000000)

l_566F
                    LDA $45E7,X                     ; (566F) Load A with $45E7,X
                    STA $CF76,X                     ; (5672) Store A to $CF76,X
                    INX                             ; (5675) Increment X
                    CPX #$05                        ; (5676) Subtract #$05 from X (5 / 00000101)
                    BNE l_566F                      ; (5678) Branch to $566F if Not Equal
                    LDA $45EC                       ; (567A) Load A with $45EC
                    STA $07F8                       ; (567D) Store A to $07F8
                    RTS                             ; (5680) Return from Subroutine

l_5681
                    LDX #$00                        ; (5681) Set X to #$00 (0 / 00000000)

l_5683
                    LDA $34E8,X                     ; (5683) Load A with $34E8,X
                    CMP $CF9C,X                     ; (5686) Subtract $CF9C,X from A
                    BEQ l_56AC                      ; (5689) Branch to $56AC if Equal
                    CLC                             ; (568B) Clear Carry Flag
                    LDA $CF9C,X                     ; (568C) Load A with $CF9C,X
                    LSR A                           ; (568F) Logical Shift Right Accumulator
                    STA $CF9C,X                     ; (5690) Store A to $CF9C,X
                    BCC l_569C                      ; (5693) Branch to $569C if Carry Clear
                    LDA #$01                        ; (5695) Set A to #$01 (1 / 00000001)
                    STA $CF9C,X                     ; (5697) Store A to $CF9C,X
                    BCS l_56AC                      ; (569A) Branch if Carry Set $56AC

l_569C
                    LDA $54E5,X                     ; (569C) Load A with $54E5,X
                    LSR A                           ; (569F) Logical Shift Right Accumulator
                    STA $54E5,X                     ; (56A0) Store A to $54E5,X
                    CMP #$01                        ; (56A3) Subtract #$01 from A (1 / 00000001)
                    BNE l_56AC                      ; (56A5) Branch to $56AC if Not Equal
                    LDA #$02                        ; (56A7) Set A to #$02 (2 / 00000010)
                    STA $54E5,X                     ; (56A9) Store A to $54E5,X

l_56AC
                    INX                             ; (56AC) Increment X
                    CPX #$05                        ; (56AD) Subtract #$05 from X (5 / 00000101)
                    BNE l_5683                      ; (56AF) Branch to $5683 if Not Equal
                    RTS                             ; (56B1) Return from Subroutine

l_56B2
                    STA $CF9C,X                     ; (56B2) Store A to $CF9C,X
                    LDA $4548,X                     ; (56B5) Load A with $4548,X
                    STA $54E5,X                     ; (56B8) Store A to $54E5,X
                    RTS                             ; (56BB) Return from Subroutine

l_56BC
                    JSR l_566D                      ; (56BC) Jump to Subroutine at $566D
                    RTS                             ; (56BF) Return from Subroutine

; Memory $56C0
            .byte $00,$84,$50,$84,$00,$04,$60,$60,$60,$60,$60,$60,$60,$60,$28,$46
            .byte $F0,$49,$28,$D8,$28,$41,$F0,$44,$28,$04,$A2,$D9,$B5,$00,$09,$80
            .byte $95,$00,$E8,$E0,$F2,$D0,$F5,$60,$A2,$00,$BD,$0D,$CF,$AA,$BD,$19
            .byte $45,$8D,$00,$D0,$BD,$1A,$45,$8D,$01,$D0,$A9,$00,$8D,$10,$D0,$BD
            .byte $1B,$45,$F0,$05,$A9,$01,$8D,$10,$D0,$60

; Memory $570A

l_570A
                    STA $4501                       ; (570A) Store A to $4501
                    LDA #$2C                        ; (570D) Set A to #$2C (44 / 00101100)
                    STA $2A0C                       ; (570F) Store A to $2A0C
                    JSR l_2F47                      ; (5712) Jump to Subroutine at $2F47
                    RTS                             ; (5715) Return from Subroutine

l_5716
                    JSR l_2F47                      ; (5716) Jump to Subroutine at $2F47
                    LDA #$30                        ; (5719) Set A to #$30 (48 / 00110000)
                    STA $2A0C                       ; (571B) Store A to $2A0C
                    RTS                             ; (571E) Return from Subroutine

; Memory $571F
            .byte $A2,$00,$A9,$00,$9D,$00,$30,$9D,$00,$31,$9D,$00,$32,$9D,$00,$33
            .byte $E8,$D0,$F1,$60

; Memory $5733

l_5733
                    NOP                             ; (5733) No operation
                    NOP                             ; (5734) No operation
                    NOP                             ; (5735) No operation
                    LDX #$00                        ; (5736) Set X to #$00 (0 / 00000000)

l_5738
                    LDA $574A,X                     ; (5738) Load A with $574A,X
                    LDA $07CA,X                     ; (573B) Load A with $07CA,X
                    LDA $D805                       ; (573E) Load A with $D805
                    LDA $DBCA,X                     ; (5741) Load A with $DBCA,X
                    INX                             ; (5744) Increment X
                    CPX #$13                        ; (5745) Subtract #$13 from X (19 / 00010011)
                    BNE l_5738                      ; (5747) Branch to $5738 if Not Equal
                    RTS                             ; (5749) Return from Subroutine

; Memory $574A
            .byte $90,$92,$85,$93,$93,$A0,$83,$94,$92,$8C,$A0,$86,$8F,$92,$A0,$8D
            .byte $85,$8E,$95,$EA,$1E,$20,$1E,$1E,$22,$EA,$EA,$EA,$EA,$EA

; Memory $5768

l_5768
                    JMP l_7280                      ; (5768) Jump to $7280

l_576B
                    JSR l_5BB0                      ; (576B) Jump to Subroutine at $5BB0
                    NOP                             ; (576E) No operation
                    NOP                             ; (576F) No operation
                    JSR l_58E6                      ; (5770) Jump to Subroutine at $58E6
                    LDA SpriteEnableRegister        ; (5773) Load A with $D015
                    ORA #$03                        ; (5776) Logical OR with Accumulator and #$03 (3 / 00000011)
                    STA SpriteEnableRegister        ; (5778) Store A to $D015
                    LDA BoyGirlToggle                       ; (577B) Load A with BoyGirlToggle. #00 = Boy / #01 = Girl.
                    BEQ l_5783                      ; (577E) Branch to $5783 if Equal
                    JMP l_57BD                      ; (5780) Jump to $57BD

l_5783
                    LDA #$01                        ; (5783) Set A to #$01 (1 / 00000001)
                    STA BoyGirlToggle                       ; (5785) Store A to BoyGirlToggle
                    LDA #$E8                        ; (5788) Set A to #$E8 (232 / 11101000)
                    STA $582D                       ; (578A) Store A to $582D
                    LDA #$EC                        ; (578D) Set A to #$EC (236 / 11101100)
                    STA $5832                       ; (578F) Store A to $5832
                    LDA #$F0                        ; (5792) Set A to #$F0 (240 / 11110000)
                    STA $58A9                       ; (5794) Store A to $58A9
                    LDA #$F1                        ; (5797) Set A to #$F1 (241 / 11110001)
                    STA $5848                       ; (5799) Store A to $5848
                    LDA #$F6                        ; (579C) Set A to #$F6 (246 / 11110110)
                    STA $584C                       ; (579E) Store A to $584C
                    LDA #$F2                        ; (57A1) Set A to #$F2 (242 / 11110010)
                    STA $5876                       ; (57A3) Store A to $5876
                    LDA #$F6                        ; (57A6) Set A to #$F6 (246 / 11110110)
                    STA $587B                       ; (57A8) Store A to $587B
                    LDA #$F1                        ; (57AB) Set A to #$F1 (241 / 11110001)
                    STA $58A4                       ; (57AD) Store A to $58A4
                    LDA #$F0                        ; (57B0) Set A to #$F0 (240 / 11110000)
                    STA $589B                       ; (57B2) Store A to $589B
                    LDA #$0A                        ; (57B5) Set A to #$0A (10 / 00001010)
                    STA BorderColour                ; (57B7) Store A to $D020
                    JMP l_5844                      ; (57BA) Jump to $5844

l_57BD
                    LDA #$00                        ; (57BD) Set A to #$00 (0 / 00000000)
                    STA BoyGirlToggle                       ; (57BF) Store A to BoyGirlToggle
                    LDA #$D8                        ; (57C2) Set A to #$D8 (216 / 11011000)
                    STA $582D                       ; (57C4) Store A to $582D
                    LDA #$DC                        ; (57C7) Set A to #$DC (220 / 11011100)
                    STA $5832                       ; (57C9) Store A to $5832
                    LDA #$E0                        ; (57CC) Set A to #$E0 (224 / 11100000)
                    STA $58A9                       ; (57CE) Store A to $58A9
                    LDA #$E1                        ; (57D1) Set A to #$E1 (225 / 11100001)
                    STA $5848                       ; (57D3) Store A to $5848
                    LDA #$E6                        ; (57D6) Set A to #$E6 (230 / 11100110)
                    STA $584C                       ; (57D8) Store A to $584C
                    LDA #$E2                        ; (57DB) Set A to #$E2 (226 / 11100010)
                    STA $5876                       ; (57DD) Store A to $5876
                    LDA #$E6                        ; (57E0) Set A to #$E6 (230 / 11100110)
                    STA $587B                       ; (57E2) Store A to $587B
                    LDA #$E1                        ; (57E5) Set A to #$E1 (225 / 11100001)
                    STA $58A4                       ; (57E7) Store A to $58A4
                    LDA #$E0                        ; (57EA) Set A to #$E0 (224 / 11100000)
                    STA $589B                       ; (57EC) Store A to $589B
                    LDA #$06                        ; (57EF) Set A to #$06 (6 / 00000110)
                    STA BorderColour                ; (57F1) Store A to $D020
                    JMP l_5844                      ; (57F4) Jump to $5844

; Memory $57F7
            .byte $EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA

; Memory $5800

l_5800
                    INC $CF02                       ; (5800) Increment Memory $CF02
                    JSR Sub_GoSlowRedZone           ; (5803) Jump to Subroutine at $5961
                    JSR Sub_HealthBarUpdates        ; (5806) Jump to Subroutine at $5B00
                    NOP                             ; (5809) No operation
                    NOP                             ; (580A) No operation
                    LDA $5A00                       ; (580B) Load A with $5A00
                    CMP #$00                        ; (580E) Subtract #$00 from A (0 / 00000000)
                    BEQ l_5818                      ; (5810) Branch to $5818 if Equal
                    LDA Var_JumpDirection           ; (5812) Load A with Var_JumpDirection
                    STA LeftRightInput              ; (5815) Store A to LeftRightInput

l_5818
                    LDA $C19C                       ; (5818) Load A with $C19C
                    CMP #$00                        ; (581B) Subtract #$00 from A (0 / 00000000)
                    BNE l_5836                      ; (581D) Branch to $5836 if Not Equal
                    LDA #$A9                        ; (581F) Set A to #$A9 (169 / 10101001)
                    STA $C84D                       ; (5821) Store A to $C84D
                    LDA #$AD                        ; (5824) Set A to #$AD (173 / 10101101)
                    STA $5980                       ; (5826) Store A to $5980
                    JSR Sub_CheckSlidingOnRope      ; (5829) Jump to Subroutine at $58B3
                    LDA #$E8                        ; (582C) Set A to #$E8 (232 / 11101000)
                    STA $C79C                       ; (582E) Store A to $C79C
                    LDA #$EC                        ; (5831) Set A to #$EC (236 / 11101100)
                    STA $C7C6                       ; (5833) Store A to $C7C6

l_5836
                    JMP l_59E6                      ; (5836) Jump to $59E6

; Memory $5839
            .byte $EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA

; Memory $5844

l_5844
                    LDA $07F8                       ; (5844) Load A with $07F8
                    CMP #$F1                        ; (5847) Subtract #$F1 from A (241 / 11110001)
                    BNE l_5850                      ; (5849) Branch to $5850 if Not Equal
                    LDA #$F6                        ; (584B) Set A to #$F6 (246 / 11110110)
                    STA $07F8                       ; (584D) Store A to $07F8

l_5850
                    LDX Sprite0_X                   ; (5850) Load X with $D000
                    LDA $5A02                       ; (5853) Load A with $5A02
                    STX $5A02                       ; (5856) Store X to $5A02
                    CMP $5A02                       ; (5859) Subtract $5A02 from A
                    BEQ l_5864                      ; (585C) Branch to $5864 if Equal
                    LDA #$00                        ; (585E) Set A to #$00 (0 / 00000000)
                    STA $5A03                       ; (5860) Store A to $5A03

l_5863
                    RTS                             ; (5863) Return from Subroutine

l_5864
                    INC $5A03                       ; (5864) Increment Memory $5A03
                    LDA $5A03                       ; (5867) Load A with $5A03
                    CMP #$90                        ; (586A) Subtract #$90 from A (144 / 10010000)
                    BNE l_5863                      ; (586C) Branch to $5863 if Not Equal
                    LDA $07F8                       ; (586E) Load A with $07F8
                    AND #$04                        ; (5871) Logical AND with Accumulator and #$04 (4 / 00000100)
                    BNE l_587A                      ; (5873) Branch to $587A if Not Equal
                    LDA #$F2                        ; (5875) Set A to #$F2 (242 / 11110010)
                    JMP l_587C                      ; (5877) Jump to $587C

l_587A
                    LDA #$F6                        ; (587A) Set A to #$F6 (246 / 11110110)

l_587C
                    STA $07F8                       ; (587C) Store A to $07F8
                    RTS                             ; (587F) Return from Subroutine

l_5880
                    LDA #$00                        ; (5880) Set A to #$00 (0 / 00000000)
                    STA $5A00                       ; (5882) Store A to $5A00
                    LDA LeftRightInput                       ; (5885) Load A with LeftRightInput
                    STA Var_JumpDirection                       ; (5888) Store A to Var_JumpDirection
                    LDA #$60                        ; (588B) Set A to #$60 (96 / 01100000)
                    STA $C84D                       ; (588D) Store A to $C84D
                    STA $5980                       ; (5890) Store A to $5980
                    LDA $07F8                       ; (5893) Load A with $07F8
                    AND #$04                        ; (5896) Logical AND with Accumulator and #$04 (4 / 00000100)
                    BNE l_58A3                      ; (5898) Branch to $58A3 if Not Equal
                    LDA #$F0                        ; (589A) Set A to #$F0 (240 / 11110000)
                    NOP                             ; (589C) No operation
                    STA $07F8                       ; (589D) Store A to $07F8
                    JMP l_58A8                      ; (58A0) Jump to $58A8

l_58A3
                    LDA #$F1                        ; (58A3) Set A to #$F1 (241 / 11110001)
                    STA $07F8                       ; (58A5) Store A to $07F8

l_58A8
                    LDA #$F0                        ; (58A8) Set A to #$F0 (240 / 11110000)
                    STA $C79C                       ; (58AA) Store A to $C79C
                    STA $C7C6                       ; (58AD) Store A to $C7C6
                    JMP l_5483                      ; (58B0) Jump to $5483

Sub_CheckSlidingOnRope
                    LDA $4503                       ; (58B3) Load A with $4503
                    BNE l_58BB                      ; (58B6) Branch to $58BB if Not Equal
                    RTS                             ; (58B8) Return from Subroutine

; Memory $58B9
            .byte $EA,$EA

; Memory $58BB

l_58BB
                    LDX #$00                        ; (58BB) Set X to #$00 (0 / 00000000)
                    LDA KeyJoy2                     ; (58BD) Load A with $DC00
                    AND #$10                        ; (58C0) Logical AND with Accumulator and #$10 (16 / 00010000)
                    BNE l_58C7                      ; (58C2) Branch to $58C7 if Not Equal
                    NOP                             ; (58C4) No operation
                    LDX #$01                        ; (58C5) Set X to #$01 (1 / 00000001)

l_58C7
                    LDA $C5                         ; (58C7) Load A with $C5
                    CMP #$37                        ; (58C9) Subtract #$37 from A (55 / 00110111)
                    BNE l_58CF                      ; (58CB) Branch to $58CF if Not Equal
                    LDX #$01                        ; (58CD) Set X to #$01 (1 / 00000001)

l_58CF
                    CPX #$00                        ; (58CF) Subtract #$00 from X (0 / 00000000)
                    BNE l_58DB                      ; (58D1) Branch to $58DB if Not Equal
                    LDA #$00                        ; (58D3) Set A to #$00 (0 / 00000000)
                    STA $5A06                       ; (58D5) Store A to $5A06
                    JMP l_5844                      ; (58D8) Jump to $5844

l_58DB
                    LDA $5A06                       ; (58DB) Load A with $5A06
                    BEQ l_58E3                      ; (58DE) Branch to $58E3 if Equal
                    JMP l_5844                      ; (58E0) Jump to $5844

l_58E3
                    JMP l_5768                      ; (58E3) Jump to $5768

l_58E6
                    LDA #$01                        ; (58E6) Set A to #$01 (1 / 00000001)
                    STA $5A06                       ; (58E8) Store A to $5A06
                    LDX Sprite0_X                   ; (58EB) Load X with $D000
                    LDA Sprite1_X                   ; (58EE) Load A with $D002
                    STA Sprite0_X                   ; (58F1) Store A to $D000
                    STX Sprite1_X                   ; (58F4) Store X to $D002
                    LDX Sprite0_Y                   ; (58F7) Load X with $D001
                    JMP l_5919                      ; (58FA) Jump to $5919

; Memory $58FD
            .byte $8D,$F8,$07

; Memory $5900

l_5900
                    JSR l_2CA4                      ; (5900) Jump to Subroutine at $2CA4
                    LDA #$E0                        ; (5903) Set A to #$E0 (224 / 11100000)
                    STA Sprite1_X                   ; (5905) Store A to $D002
                    STA Sprite1_Y                   ; (5908) Store A to $D003
                    LDA #$06                        ; (590B) Set A to #$06 (6 / 00000110)
                    NOP                             ; (590D) No operation
                    STA BorderColour                ; (590E) Store A to $D020
                    LDA #$EE                        ; (5911) Set A to #$EE (238 / 11101110)
                    STA $07F9                       ; (5913) Store A to $07F9
                    RTS                             ; (5916) Return from Subroutine

; Memory $5917
            .byte $EA,$EA

; Memory $5919

l_5919
                    LDA Sprite1_Y                   ; (5919) Load A with $D003
                    STA Sprite0_Y                   ; (591C) Store A to $D001
                    STX Sprite1_Y                   ; (591F) Store X to $D003
                    LDA Sprite_upper_X              ; (5922) Load A with $D010
                    AND #$01                        ; (5925) Logical AND with Accumulator and #$01 (1 / 00000001)
                    TAX                             ; (5927) Transfer A to X
                    LDA Sprite_upper_X              ; (5928) Load A with $D010
                    AND #$02                        ; (592B) Logical AND with Accumulator and #$02 (2 / 00000010)
                    TAY                             ; (592D) Transfer A to Y
                    LDA Sprite_upper_X              ; (592E) Load A with $D010
                    AND #$FC                        ; (5931) Logical AND with Accumulator and #$FC (252 / 11111100)
                    STA $5A07                       ; (5933) Store A to $5A07
                    CPY #$00                        ; (5936) Subtract #$00 from Y (0 / 00000000)
                    BEQ l_5942                      ; (5938) Branch to $5942 if Equal
                    LDA #$01                        ; (593A) Set A to #$01 (1 / 00000001)
                    ORA $5A07                       ; (593C) Logical OR with Accumulator and $5A07
                    STA $5A07                       ; (593F) Store A to $5A07

l_5942
                    CPX #$00                        ; (5942) Subtract #$00 from X (0 / 00000000)
                    BEQ l_594E                      ; (5944) Branch to $594E if Equal
                    LDA #$02                        ; (5946) Set A to #$02 (2 / 00000010)
                    ORA $5A07                       ; (5948) Logical OR with Accumulator and $5A07
                    STA $5A07                       ; (594B) Store A to $5A07

l_594E
                    LDA $5A07                       ; (594E) Load A with $5A07
                    STA Sprite_upper_X              ; (5951) Store A to $D010
                    LDX $07F8                       ; (5954) Load X with $07F8
                    LDA $07F9                       ; (5957) Load A with $07F9
                    STA $07F8                       ; (595A) Store A to $07F8
                    STX $07F9                       ; (595D) Store X to $07F9
                    RTS                             ; (5960) Return from Subroutine

Sub_GoSlowRedZone
                    LDA $0430                       ; (5961) Load A with $0430
                    CMP #$A9                        ; (5964) Subtract #$A9 from A (169 / 10101001)
                    BEQ l_5973                      ; (5966) Branch to $5973 if Equal
                    LDA #$80                        ; (5968) Set A to #$80 (128 / 10000000)
                    STA $CA19                       ; (596A) Store A to $CA19
                    LDA #$04                        ; (596D) Set A to #$04 (4 / 00000100)
                    STA GoSlowRedZone                       ; (596F) Store A to GoSlowRedZone
                    RTS                             ; (5972) Return from Subroutine

l_5973
                    LDA GoSlowRedZone                       ; (5973) Load A with GoSlowRedZone
                    CMP #$04                        ; (5976) Subtract #$04 from A (4 / 00000100)
                    BEQ l_597B                      ; (5978) Branch to $597B if Equal
                    RTS                             ; (597A) Return from Subroutine

l_597B
                    JMP l_5A88                      ; (597B) Jump to $5A88

; Memory $597E
            .byte $EA,$EA

; Memory $5980

l_5980
                    LDA $07F8                       ; (5980) Load A with $07F8
                    AND #$03                        ; (5983) Logical AND with Accumulator and #$03 (3 / 00000011)
                    CMP #$03                        ; (5985) Subtract #$03 from A (3 / 00000011)
                    BEQ l_598F                      ; (5987) Branch to $598F if Equal
                    INC $07F8                       ; (5989) Increment Memory $07F8
                    JMP l_5997                      ; (598C) Jump to $5997

l_598F
                    LDA $07F8                       ; (598F) Load A with $07F8
                    AND #$FC                        ; (5992) Logical AND with Accumulator and #$FC (252 / 11111100)
                    STA $07F8                       ; (5994) Store A to $07F8

l_5997
                    RTS                             ; (5997) Return from Subroutine

Sub_GetCurrentHealthBar
                    LDX #$FF                        ; (5998) Set X to #$FF (255 / 11111111)

l_599A
                    INX                             ; (599A) Increment X
                    LDA $042E,X                     ; (599B) Load A with $042E,X
                    CMP #$A9                        ; (599E) Subtract #$A9 from A (169 / 10101001)
                    BEQ l_599A                      ; (59A0) Branch to $599A if Equal
                    RTS                             ; (59A2) Return from Subroutine

l_ReduceHealthBar
                    JSR Sub_GetCurrentHealthBar                      ; (59A3) Jump to Subroutine at $5998
                    LDA $042E,X                     ; (59A6) Load A with $042E,X
                    CMP #$A1                        ; (59A9) Subtract #$A1 from A (161 / 10100001)
                    BEQ l_59B3                      ; (59AB) Branch to $59B3 if Equal
                    DEC $042E,X                     ; (59AD) Decrement $042E,X
                    RTS                             ; (59B0) Return from Subroutine

; Memory $59B1
            .byte $EA,$EA

; Memory $59B3

l_59B3
                    CPX #$00                        ; (59B3) Subtract #$00 from X (0 / 00000000)
                    BEQ l_59C0                      ; (59B5) Branch to $59C0 if Equal
                    DEX                             ; (59B7) Decrement X
                    LDA #$A8                        ; (59B8) Set A to #$A8 (168 / 10101000)
                    STA $042E,X                     ; (59BA) Store A to $042E,X
                    RTS                             ; (59BD) Return from Subroutine

; Memory $59BE
            .byte $EA,$EA

; Memory $59C0

l_59C0
                    JMP l_NoHealthLeft              ; (59C0) Jump to $5A70

l_59C3
                    JSR Sub_GetCurrentHealthBar     ; (59C3) Jump to Subroutine at $5998
                    CPX #$21                        ; (59C6) Subtract #$21 from X (33 / 00100001)
                    BEQ l_59D0                      ; (59C8) Branch to $59D0 if Equal
                    INC $042E,X                     ; (59CA) Increment Memory $042E,X
                    RTS                             ; (59CD) Return from Subroutine

; Memory $59CE
            .byte $EA,$EA

; Memory $59D0

l_59D0
                    LDA #$0A                        ; (59D0) Set A to #$0A (10 / 00001010)
                    STA $CF5A                       ; (59D2) Store A to $CF5A
                    LDA #$00                        ; (59D5) Set A to #$00 (0 / 00000000)
                    STA $CF5B                       ; (59D7) Store A to $CF5B
                    LDA #$11                        ; (59DA) Set A to #$11 (17 / 00010001)
                    STA $CF5C                       ; (59DC) Store A to $CF5C
                    JSR l_CE42                      ; (59DF) Jump to Subroutine at $CE42
                    RTS                             ; (59E2) Return from Subroutine

; Memory $59E3
            .byte $EA,$EA,$EA

; Memory $59E6

l_59E6
                    LDA $C19C                       ; (59E6) Load A with $C19C
                    BEQ l_59F9                      ; (59E9) Branch to $59F9 if Equal
                    DEC $5A09                       ; (59EB) Decrement $5A09
                    BNE l_59F8                      ; (59EE) Branch to $59F8 if Not Equal
                    LDA #$00                        ; (59F0) Set A to #$00 (0 / 00000000)
                    STA $5A09                       ; (59F2) Store A to $5A09
                    JSR l_ReduceHealthBar                      ; (59F5) Jump to Subroutine at $59A3

l_59F8
                    RTS                             ; (59F8) Return from Subroutine

l_59F9
                    JMP l_5A20                      ; (59F9) Jump to $5A20

; Memory $59FC
            .byte $EA,$EA,$EA,$EA,$00,$01,$70,$C1,$FF,$00,$00,$20,$01,$64,$96,$02
            .byte $12,$00,$10,$01,$00,$00,$12,$00,$01,$0A,$09,$FF,$FF,$FF,$FF,$FF
            .byte $FF,$FF,$FF,$FF

; Memory $5A20

l_5A20
                    LDA LeftRightInput              ; (5A20) Load A with LeftRightInput
                    BEQ l_5A3C                      ; (5A23) Branch to $5A3C if Equal
                    DEC $5A0A                       ; (5A25) Decrement $5A0A
                    BNE l_5A3C                      ; (5A28) Branch to $5A3C if Not Equal
                    LDA #$FF                        ; (5A2A) Set A to #$FF (255 / 11111111)
                    STA $5A0A                       ; (5A2C) Store A to $5A0A
                    DEC $5A0B                       ; (5A2F) Decrement $5A0B
                    BNE l_5A3C                      ; (5A32) Branch to $5A3C if Not Equal
                    LDA #$03                        ; (5A34) Set A to #$03 (3 / 00000011)
                    STA $5A0B                       ; (5A36) Store A to $5A0B
                    JSR l_ReduceHealthBar           ; (5A39) Jump to Subroutine at $59A3

l_5A3C
                    RTS                             ; (5A3C) Return from Subroutine

; Memory $5A3D
            .byte $FF,$FF,$FF,$F6

; Memory $5A41

l_5A41
                    JSR l_7659                      ; (5A41) Jump to Subroutine at $7659
                    LDA BoyGirlToggle               ; (5A44) Load A with BoyGirlToggle. #00 = Boy / #01 = Girl.
                    BNE l_ChangeBorderPink          ; (5A47) Branch to $5A4F if Not Equal
                    LDA #$06                        ; (5A49) Set A to #$06 (6 / 00000110)
                    STA BorderColour                ; (5A4B) Store A to $D020
                    RTS                             ; (5A4E) Return from Subroutine

l_ChangeBorderPink
                    LDA #$0A                        ; (5A4F) Set A to #$0A (10 / 00001010)
                    STA BorderColour                ; (5A51) Store A to $D020
                    RTS                             ; (5A54) Return from Subroutine

; Memory $5A55
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00

; Memory $5A60

l_5A60
                    LDA #$02                        ; (5A60) Set A to #$02 (2 / 00000010)
                    STA GoSlowRedZone                       ; (5A62) Store A to GoSlowRedZone
                    LDA #$00                        ; (5A65) Set A to #$00 (0 / 00000000)
                    STA $CF07                       ; (5A67) Store A to $CF07
                    JMP l_5D80                      ; (5A6A) Jump to $5D80

; Memory $5A6D
            .byte $00,$00,$00

; Memory $5A70

l_NoHealthLeft
                    LDA #$01                        ; (5A70) Set A to #$01 (1 / 00000001)
                    STA Var_GameOverFlag                ; (5A72) Store A to Var_GameOverFlag
                    LDA #$02                        ; (5A75) Set A to #$02 (2 / 00000010)
                    STA GoSlowRedZone               ; (5A77) Store A to GoSlowRedZone
                    LDA #$00                        ; (5A7A) Set A to #$00 (0 / 00000000)
                    STA $CF07                       ; (5A7C) Store A to $CF07
                    LDA #$20                        ; (5A7F) Set A to #$20 (32 / 00100000)
                    STA $CA19                       ; (5A81) Store A to $CA19
                    RTS                             ; (5A84) Return from Subroutine

; Memory $5A85
            .byte $FF,$FF,$FF

; Memory $5A88

l_5A88
                    LDA #$02                        ; (5A88) Set A to #$02 (2 / 00000010)
                    STA GoSlowRedZone                       ; (5A8A) Store A to GoSlowRedZone
                    LDA #$00                        ; (5A8D) Set A to #$00 (0 / 00000000)
                    STA $CF07                       ; (5A8F) Store A to $CF07
                    LDA #$20                        ; (5A92) Set A to #$20 (32 / 00100000)
                    STA $CA19                       ; (5A94) Store A to $CA19
                    RTS                             ; (5A97) Return from Subroutine

; Memory $5A98
            .byte $EA,$EA

; Memory $5A9A

l_5A9A
                    CMP #$4D                        ; (5A9A) Subtract #$4D from A (77 / 01001101)
                    BMI l_5AAA                      ; (5A9C) Branch to $5AAA if minus 
                    CPY #$50                        ; (5A9E) Subtract #$50 from Y (80 / 01010000)
                    BEQ l_5AA5                      ; (5AA0) Branch to $5AA5 if Equal
                    JMP l_PlayerMidAir                      ; (5AA2) Jump to $2A57

l_5AA5
                    DEC $5A0F                       ; (5AA5) Decrement $5A0F
                    BEQ l_5AAD                      ; (5AA8) Branch to $5AAD if Equal

l_5AAA
                    RTS                             ; (5AAA) Return from Subroutine

; Memory $5AAB
            .byte $EA,$EA

; Memory $5AAD

l_5AAD
                    LDX #$08                        ; (5AAD) Set X to #$08 (8 / 00001000)
                    STX $5A0F                       ; (5AAF) Store X to $5A0F
                    NOP                             ; (5AB2) No operation
                    CMP #$53                        ; (5AB3) Subtract #$53 from A (83 / 01010011)
                    BNE l_5ABF                      ; (5AB5) Branch to $5ABF if Not Equal
                    LDA #$A0                        ; (5AB7) Set A to #$A0 (160 / 10100000)
                    STA ($FB),Y                     ; (5AB9) Store A to ($FB),Y
                    RTS                             ; (5ABB) Return from Subroutine

; Memory $5ABC
            .byte $EA,$EA,$60

; Memory $5ABF

l_5ABF
                    LDA ($FB),Y                     ; (5ABF) Load A with ($FB),Y
                    TAX                             ; (5AC1) Transfer A to X
                    INX                             ; (5AC2) Increment X
                    TXA                             ; (5AC3) Transfer X to A
                    STA ($FB),Y                     ; (5AC4) Store A to ($FB),Y
                    RTS                             ; (5AC6) Return from Subroutine

l_GetMushroom 
                    CMP #$54                        ; (5AC7) Subtract #$54 from A (84 / 01010100)
                    BNE l_5AD5                      ; (5AC9) Branch to $5AD5 if Not Equal
                    LDX #$18                        ; (5ACB) Set X to #$18 (24 / 00011000)
                    JSR l_5B18                      ; (5ACD) Jump to Subroutine at $5B18
                    LDA #$A0                        ; (5AD0) Set A to #$A0 (160 / 10100000)
                    STA ($FB),Y                     ; (5AD2) Store A to ($FB),Y
                    RTS                             ; (5AD4) Return from Subroutine

l_5AD5
                    CMP #$55                        ; (5AD5) Subtract #$55 from A (85 / 01010101)
                    BNE l_5AE3                      ; (5AD7) Branch to $5AE3 if Not Equal
                    LDX #$19                        ; (5AD9) Set X to #$19 (25 / 00011001)
                    JSR l_5B44                      ; (5ADB) Jump to Subroutine at $5B44
                    LDA #$A0                        ; (5ADE) Set A to #$A0 (160 / 10100000)
                    STA ($FB),Y                     ; (5AE0) Store A to ($FB),Y
                    RTS                             ; (5AE2) Return from Subroutine

l_5AE3
                    CMP #$56                        ; (5AE3) Subtract #$56 from A (86 / 01010110)
                    BNE l_5B57                      ; (5AE5) Branch to $5B57 if Not Equal
                    LDA #$64                        ; (5AE7) Set A to #$64 (100 / 01100100)
                    STA $CF5A                       ; (5AE9) Store A to $CF5A
                    LDA #$00                        ; (5AEC) Set A to #$00 (0 / 00000000)
                    STA $CF5B                       ; (5AEE) Store A to $CF5B
                    LDA #$11                        ; (5AF1) Set A to #$11 (17 / 00010001)
                    STA $CF5C                       ; (5AF3) Store A to $CF5C
                    JSR l_CE42                      ; (5AF6) Jump to Subroutine at $CE42
                    LDA #$A0                        ; (5AF9) Set A to #$A0 (160 / 10100000)
                    STA ($FB),Y                     ; (5AFB) Store A to ($FB),Y
                    RTS                             ; (5AFD) Return from Subroutine

; Memory $5AFE
            .byte $EA,$EA

; Memory $5B00

Sub_HealthBarUpdates
                    LDA $5A0D                       ; (5B00) Load A with $5A0D
                    BEQ l_5B15                      ; (5B03) Branch to $5B15 if Equal
                    DEC $5A0E                       ; (5B05) Decrement $5A0E
                    BNE l_5B15                      ; (5B08) Branch to $5B15 if Not Equal
                    LDA #$10                        ; (5B0A) Set A to #$10 (16 / 00010000)
                    STA $5A0E                       ; (5B0C) Store A to $5A0E
                    DEC $5A0D                       ; (5B0F) Decrement $5A0D
                    JSR l_59C3                      ; (5B12) Jump to Subroutine at $59C3

l_5B15
                    JMP l_5B2C                      ; (5B15) Jump to $5B2C

l_5B18
                    STX $5A10                       ; (5B18) Store X to $5A10

l_5B1B
                    DEC $5A10                       ; (5B1B) Decrement $5A10
                    BEQ l_5B28                      ; (5B1E) Branch to $5B28 if Equal
                    INC $5A0D                       ; (5B20) Increment Memory $5A0D
                    BEQ l_5B28                      ; (5B23) Branch to $5B28 if Equal
                    JMP l_5B1B                      ; (5B25) Jump to $5B1B

l_5B28
                    RTS                             ; (5B28) Return from Subroutine

; Memory $5B29
            .byte $EA,$EA,$EA

; Memory $5B2C

l_5B2C
                    LDA $5A11                       ; (5B2C) Load A with $5A11
                    BEQ l_5B41                      ; (5B2F) Branch to $5B41 if Equal
                    DEC $5A12                       ; (5B31) Decrement $5A12
                    BNE l_5B41                      ; (5B34) Branch to $5B41 if Not Equal
                    LDA #$12                        ; (5B36) Set A to #$12 (18 / 00010010)
                    STA $5A12                       ; (5B38) Store A to $5A12
                    DEC $5A11                       ; (5B3B) Decrement $5A11
                    JSR l_72BA                      ; (5B3E) Jump to Subroutine at $72BA

l_5B41
                    RTS                             ; (5B41) Return from Subroutine

; Memory $5B42
            .byte $EA,$EA

; Memory $5B44

l_5B44
                    STX $5A13                       ; (5B44) Store X to $5A13

l_5B47
                    DEC $5A13                       ; (5B47) Decrement $5A13
                    BEQ l_5B54                      ; (5B4A) Branch to $5B54 if Equal
                    INC $5A11                       ; (5B4C) Increment Memory $5A11
                    BEQ l_5B54                      ; (5B4F) Branch to $5B54 if Equal
                    JMP l_5B47                      ; (5B51) Jump to $5B47

l_5B54
                    RTS                             ; (5B54) Return from Subroutine

; Memory $5B55
            .byte $EA,$EA

; Memory $5B57

l_5B57
                    CMP #$57                        ; (5B57) Subtract #$57 from A (87 / 01010111)
                    BNE l_5B89                      ; (5B59) Branch to $5B89 if Not Equal
                    JMP l_7F50                      ; (5B5B) Jump to $7F50

l_5B5E
                    NOP                             ; (5B5E) No operation
                    LDA Adr_MagicCrossNumRight                       ; (5B5F) Load A with Adr_MagicCrossNumRight
                    CMP #$B9                        ; (5B62) Subtract #$B9 from A (185 / 10111001)
                    BEQ l_5B6C                      ; (5B64) Branch to $5B6C if Equal
                    INC Adr_MagicCrossNumRight                       ; (5B66) Increment Memory Adr_MagicCrossNumRight
                    JMP l_5B86                      ; (5B69) Jump to $5B86

l_5B6C
                    LDA Adr_MagicCrossNumLeft                        ; (5B6C) Load A with Adr_MagicCrossNumLeft 
                    CMP #$B9                        ; (5B6F) Subtract #$B9 from A (185 / 10111001)
                    BNE l_5B7E                      ; (5B71) Branch to $5B7E if Not Equal
                    LDA #$B0                        ; (5B73) Set A to #$B0 (176 / 10110000)
                    STA Adr_MagicCrossNumRight      ; (5B75) Store A to Adr_MagicCrossNumRight
                    STA Adr_MagicCrossNumLeft       ; (5B78) Store A to Adr_MagicCrossNumLeft 
                    JMP l_5B86                      ; (5B7B) Jump to $5B86

l_5B7E
                    LDA #$B0                        ; (5B7E) Set A to #$B0 (176 / 10110000)
                    STA Adr_MagicCrossNumRight      ; (5B80) Store A to Adr_MagicCrossNumRight
                    INC Adr_MagicCrossNumLeft       ; (5B83) Increment Memory Adr_MagicCrossNumLeft 

l_5B86
                    JMP l_7F00                      ; (5B86) Jump to $7F00

l_5B89
                    CMP #$62                        ; (5B89) Subtract #$62 from A (98 / 01100010)
                    BPL l_5B95                      ; (5B8B) Branch to $5B95 if positive

l_5B8D
                    CPY #$50                        ; (5B8D) Subtract #$50 from Y (80 / 01010000)
                    BEQ l_5B94                      ; (5B8F) Branch to $5B94 if Equal
                    JMP l_PlayerMidAir                      ; (5B91) Jump to $2A57

l_5B94
                    RTS                             ; (5B94) Return from Subroutine

l_5B95
                    CMP #$66                        ; (5B95) Subtract #$66 from A (102 / 01100110)
                    BPL l_5BAD                      ; (5B97) Branch to $5BAD if positive
                    CPY #$50                        ; (5B99) Subtract #$50 from Y (80 / 01010000)
                    BEQ l_5BA0                      ; (5B9B) Branch to $5BA0 if Equal
                    JMP l_PlayerMidAir                      ; (5B9D) Jump to $2A57

l_5BA0
                    DEC $5A14                       ; (5BA0) Decrement $5A14
                    BNE l_5B94                      ; (5BA3) Branch to $5B94 if Not Equal
                    LDA #$03                        ; (5BA5) Set A to #$03 (3 / 00000011)
                    STA $5A14                       ; (5BA7) Store A to $5A14
                    JMP l_PlayerMidAir                      ; (5BAA) Jump to $2A57

l_5BAD
                    JMP l_7673                      ; (5BAD) Jump to $7673

l_5BB0
                    LDA CurrentRasterLine           ; (5BB0) Load A with $D012
                    CMP #$10                        ; (5BB3) Subtract #$10 from A (16 / 00010000)
                    BNE l_5BB0                      ; (5BB5) Branch to $5BB0 if Not Equal
                    LDA ScreenControlRegister       ; (5BB7) Load A with $D011
                    AND #$80                        ; (5BBA) Logical AND with Accumulator and #$80 (128 / 10000000)
                    BNE l_5BB0                      ; (5BBC) Branch to $5BB0 if Not Equal
                    RTS                             ; (5BBE) Return from Subroutine

; Memory $5BBF
            .byte $00,$B2,$FF,$B5,$00,$30,$EA,$EA

; Memory $5BC7

l_5BC7
                    LDX #$BF                        ; (5BC7) Set X to #$BF (191 / 10111111)
                    LDY #$5B                        ; (5BC9) Load Y with #$5B (91 / 01011011)
                    JSR l_2A80                      ; (5BCB) Jump to Subroutine at $2A80
                    LDA #$00                        ; (5BCE) Set A to #$00 (0 / 00000000)
                    STA SpriteEnableRegister        ; (5BD0) Store A to $D015
                    LDA #$00                        ; (5BD3) Set A to #$00 (0 / 00000000)
                    STA ExtraBackgroundColor1       ; (5BD5) Store A to $D022
                    STA ExtraBackgroundColor2       ; (5BD8) Store A to $D023
                    LDY #$74                        ; (5BDB) Load Y with #$74 (116 / 01110100)
                    LDA ($11),Y                     ; (5BDD) Load A with ($11),Y
                    TAX                             ; (5BDF) Transfer A to X
                    INY                             ; (5BE0) Increment Y Register
                    LDA ($11),Y                     ; (5BE1) Load A with ($11),Y
                    TAY                             ; (5BE3) Transfer A to Y
                    JSR l_5C4F                      ; (5BE4) Jump to Subroutine at $5C4F
                    SEI                             ; (5BE7) Set Interrupt Disable Flag
                    LDA #$18                        ; (5BE8) Set A to #$18 (24 / 00011000)
                    STA $B7                         ; (5BEA) Store A to $B7
                    LDA #$6A                        ; (5BEC) Set A to #$6A (106 / 01101010)
                    STA $B8                         ; (5BEE) Store A to $B8
                    CLI                             ; (5BF0) Clear Interrupt Disable Flag
                    JMP l_7610                      ; (5BF1) Jump to $7610

; Memory $5BF4
            .byte $F0,$FB,$60,$EA,$EA,$EA,$EA,$6A,$00,$01,$00,$15

; Memory $5C00

l_5C00
                    LDA #$E7                        ; (5C00) Set A to #$E7 (231 / 11100111)
                    STA $5BFF                       ; (5C02) Store A to $5BFF
                    JSR l_5CC5                      ; (5C05) Jump to Subroutine at $5CC5
                    TAX                             ; (5C08) Transfer A to X
                    LDA #$45                        ; (5C09) Set A to #$45 (69 / 01000101)
                    STA $FB                         ; (5C0B) Store A to $FB
                    LDA #$05                        ; (5C0D) Set A to #$05 (5 / 00000101)
                    STA $FC                         ; (5C0F) Store A to $FC
                    LDA #$45                        ; (5C11) Set A to #$45 (69 / 01000101)
                    STA $FD                         ; (5C13) Store A to $FD
                    LDA #$D9                        ; (5C15) Set A to #$D9 (217 / 11011001)
                    STA $FE                         ; (5C17) Store A to $FE
                    LDY #$00                        ; (5C19) Load Y with #$00 (0 / 00000000)

l_5C1B
                    JSR l_5C87                      ; (5C1B) Jump to Subroutine at $5C87
                    JMP l_5CAA                      ; (5C1E) Jump to $5CAA

l_5C21
                    STA ($FB),Y                     ; (5C21) Store A to ($FB),Y
                    LDA #$0A                        ; (5C23) Set A to #$0A (10 / 00001010)
                    STA ($FD),Y                     ; (5C25) Store A to ($FD),Y
                    INX                             ; (5C27) Increment X
                    CPX #$05                        ; (5C28) Subtract #$05 from X (5 / 00000101)
                    BEQ l_5C34                      ; (5C2A) Branch to $5C34 if Equal
                    TYA                             ; (5C2C) Transfer Y to A
                    CLC                             ; (5C2D) Clear Carry Flag
                    ADC #$28                        ; (5C2E) Add with Carry with #$28 (40 / 00101000)
                    TAY                             ; (5C30) Transfer A to Y
                    JMP l_5C1B                      ; (5C31) Jump to $5C1B

l_5C34
                    TYA                             ; (5C34) Transfer Y to A
                    SEC                             ; (5C35) Set Carry Flag
                    SBC #$9F                        ; (5C36) Subtract with Carry #$9F (159 / 10011111)
                    TAY                             ; (5C38) Transfer A to Y
                    LDX #$00                        ; (5C39) Set X to #$00 (0 / 00000000)
                    INC $5BFE                       ; (5C3B) Increment Memory $5BFE
                    LDA $5BFE                       ; (5C3E) Load A with $5BFE
                    CMP #$03                        ; (5C41) Subtract #$03 from A (3 / 00000011)
                    BNE l_5C4B                      ; (5C43) Branch to $5C4B if Not Equal
                    LDA #$00                        ; (5C45) Set A to #$00 (0 / 00000000)
                    STA $5BFE                       ; (5C47) Store A to $5BFE
                    INY                             ; (5C4A) Increment Y Register

l_5C4B
                    JMP l_5C1B                      ; (5C4B) Jump to $5C1B

; Memory $5C4E
            .byte $60

; Memory $5C4F

l_5C4F
                    JSR l_5CD8                      ; (5C4F) Jump to Subroutine at $5CD8
                    NOP                             ; (5C52) No operation
                    NOP                             ; (5C53) No operation
                    LDA #$00                        ; (5C54) Set A to #$00 (0 / 00000000)
                    STA BorderColour                ; (5C56) Store A to $D020
                    STA BackgroundColour            ; (5C59) Store A to $D021
                    STA $5BFD                       ; (5C5C) Store A to $5BFD
                    JSR l_5C00                      ; (5C5F) Jump to Subroutine at $5C00
                    LDA ScreenControl               ; (5C62) Load A with $D016
                    ORA #$10                        ; (5C65) Logical OR with Accumulator and #$10 (16 / 00010000)
                    STA ScreenControl               ; (5C67) Store A to $D016
                    LDA #$1C                        ; (5C6A) Set A to #$1C (28 / 00011100)
                    STA VIC2MemSetup                ; (5C6C) Store A to $D018
                    LDX #$00                        ; (5C6F) Set X to #$00 (0 / 00000000)

l_5C71
                    LDA $5D00,X                     ; (5C71) Load A with $5D00,X
                    STA $04D6,X                     ; (5C74) Store A to $04D6,X
                    LDA #$02                        ; (5C77) Set A to #$02 (2 / 00000010)
                    STA $D8D6,X                     ; (5C79) Store A to $D8D6,X
                    INX                             ; (5C7C) Increment X
                    CPX #$0E                        ; (5C7D) Subtract #$0E from X (14 / 00001110)
                    BNE l_5C71                      ; (5C7F) Branch to $5C71 if Not Equal
                    JSR l_72E0                      ; (5C81) Jump to Subroutine at $72E0
                    RTS                             ; (5C84) Return from Subroutine

; Memory $5C85
            .byte $EA,$EA

; Memory $5C87

l_5C87
                    INC $5BFD                       ; (5C87) Increment Memory $5BFD
                    LDA $5BFD                       ; (5C8A) Load A with $5BFD
                    CMP #$06                        ; (5C8D) Subtract #$06 from A (6 / 00000110)
                    BNE l_5CA0                      ; (5C8F) Branch to $5CA0 if Not Equal
                    LDA #$01                        ; (5C91) Set A to #$01 (1 / 00000001)
                    STA $5BFD                       ; (5C93) Store A to $5BFD
                    LDA $5BFF                       ; (5C96) Load A with $5BFF
                    SEC                             ; (5C99) Set Carry Flag
                    SBC #$63                        ; (5C9A) Subtract with Carry #$63 (99 / 01100011)
                    STA $5BFF                       ; (5C9C) Store A to $5BFF
                    RTS                             ; (5C9F) Return from Subroutine

l_5CA0
                    LDA $5BFF                       ; (5CA0) Load A with $5BFF
                    CLC                             ; (5CA3) Clear Carry Flag
                    ADC #$19                        ; (5CA4) Add with Carry with #$19 (25 / 00011001)
                    STA $5BFF                       ; (5CA6) Store A to $5BFF
                    RTS                             ; (5CA9) Return from Subroutine

l_5CAA
                    INC $5BFB                       ; (5CAA) Increment Memory $5BFB
                    LDA $5BFB                       ; (5CAD) Load A with $5BFB
                    CMP #$6A                        ; (5CB0) Subtract #$6A from A (106 / 01101010)
                    BEQ l_5CBA                      ; (5CB2) Branch to $5CBA if Equal
                    LDA $5BFF                       ; (5CB4) Load A with $5BFF
                    JMP l_5C21                      ; (5CB7) Jump to $5C21

l_5CBA
                    LDY #$31                        ; (5CBA) Load Y with #$31 (49 / 00110001)
                    LDA #$32                        ; (5CBC) Set A to #$32 (50 / 00110010)
                    STA ($FB),Y                     ; (5CBE) Store A to ($FB),Y
                    LDA #$0A                        ; (5CC0) Set A to #$0A (10 / 00001010)
                    STA ($FD),Y                     ; (5CC2) Store A to ($FD),Y
                    RTS                             ; (5CC4) Return from Subroutine

l_5CC5
                    LDA #$00                        ; (5CC5) Set A to #$00 (0 / 00000000)
                    STA $5BFE                       ; (5CC7) Store A to $5BFE
                    STA $5BFB                       ; (5CCA) Store A to $5BFB
                    STA $5BFC                       ; (5CCD) Store A to $5BFC
                    STA $5BFD                       ; (5CD0) Store A to $5BFD
                    RTS                             ; (5CD3) Return from Subroutine

; Memory $5CD4
            .byte $00,$00,$00,$00

; Memory $5CD8

l_5CD8
                    LDA #$93                        ; (5CD8) Set A to #$93 (147 / 10010011)
                    JSR $FFD2                       ; (5CDA) Jump to Subroutine at $FFD2
                    STX $FB                         ; (5CDD) Store X to $FB
                    STY $FC                         ; (5CDF) Store Y to $FC
                    LDY #$00                        ; (5CE1) Load Y with #$00 (0 / 00000000)
                    LDA ($FB),Y                     ; (5CE3) Load A with ($FB),Y
                    TAX                             ; (5CE5) Transfer A to X
                    INY                             ; (5CE6) Increment Y Register
                    LDA ($FB),Y                     ; (5CE7) Load A with ($FB),Y
                    TAY                             ; (5CE9) Transfer A to Y
                    CLC                             ; (5CEA) Clear Carry Flag
                    JSR $FFF0                       ; (5CEB) Jump to Subroutine at $FFF0
                    LDY #$02                        ; (5CEE) Load Y with #$02 (2 / 00000010)

l_5CF0
                    LDA ($FB),Y                     ; (5CF0) Load A with ($FB),Y
                    CMP #$01                        ; (5CF2) Subtract #$01 from A (1 / 00000001)
                    BEQ l_5CFD                      ; (5CF4) Branch to $5CFD if Equal
                    INY                             ; (5CF6) Increment Y Register
                    JSR $FFD2                       ; (5CF7) Jump to Subroutine at $FFD2
                    JMP l_5CF0                      ; (5CFA) Jump to $5CF0

l_5CFD
                    RTS                             ; (5CFD) Return from Subroutine

; Memory $5CFE
            .byte $EA,$EA,$8D,$81,$93,$94,$85,$92,$94,$92,$8F,$8E,$89,$83,$A0,$93
            .byte $0F,$12,$1C,$8E,$08,$54,$48,$45,$20,$46,$4F,$52,$45,$53,$54,$01
            .byte $00,$00

; Memory $5D20

l_5D20
                    LDX #$00                        ; (5D20) Set X to #$00 (0 / 00000000)
                    LDY #$B0                        ; (5D22) Load Y with #$B0 (176 / 10110000)
                    STX $FB                         ; (5D24) Store X to $FB
                    STY $FC                         ; (5D26) Store Y to $FC
                    LDA #$00                        ; (5D28) Set A to #$00 (0 / 00000000)
                    STA $FD                         ; (5D2A) Store A to $FD
                    LDA #$D8                        ; (5D2C) Set A to #$D8 (216 / 11011000)
                    STA $FE                         ; (5D2E) Store A to $FE

l_5D30
                    LDY #$00                        ; (5D30) Load Y with #$00 (0 / 00000000)
                    LDA ($FB),Y                     ; (5D32) Load A with ($FB),Y
                    STA ($FD),Y                     ; (5D34) Store A to ($FD),Y
                    INY                             ; (5D36) Increment Y Register
                    LSR A                           ; (5D37) Logical Shift Right Accumulator
                    LSR A                           ; (5D38) Logical Shift Right Accumulator
                    LSR A                           ; (5D39) Logical Shift Right Accumulator
                    LSR A                           ; (5D3A) Logical Shift Right Accumulator
                    STA ($FD),Y                     ; (5D3B) Store A to ($FD),Y
                    INC $FB                         ; (5D3D) Increment Memory $FB
                    BNE l_5D43                      ; (5D3F) Branch to $5D43 if Not Equal
                    INC $FC                         ; (5D41) Increment Memory $FC

l_5D43
                    INC $FD                         ; (5D43) Increment Memory $FD
                    BNE l_5D49                      ; (5D45) Branch to $5D49 if Not Equal
                    INC $FE                         ; (5D47) Increment Memory $FE

l_5D49
                    INC $FD                         ; (5D49) Increment Memory $FD
                    BNE l_5D4F                      ; (5D4B) Branch to $5D4F if Not Equal
                    INC $FE                         ; (5D4D) Increment Memory $FE

l_5D4F
                    LDA $FE                         ; (5D4F) Load A with $FE
                    CMP #$DB                        ; (5D51) Subtract #$DB from A (219 / 11011011)
                    BNE l_5D30                      ; (5D53) Branch to $5D30 if Not Equal
                    LDA $FD                         ; (5D55) Load A with $FD
                    CMP #$F0                        ; (5D57) Subtract #$F0 from A (240 / 11110000)
                    BNE l_5D30                      ; (5D59) Branch to $5D30 if Not Equal
                    RTS                             ; (5D5B) Return from Subroutine

; Memory $5D5C
            .byte $00,$00,$00,$00

; Memory $5D60

l_5D60
                    LDA #$01                        ; (5D60) Set A to #$01 (1 / 00000001)
                    STA BoyGirlToggle                       ; (5D62) Store A to BoyGirlToggle
                    JSR l_576B                      ; (5D65) Jump to Subroutine at $576B
                    RTS                             ; (5D68) Return from Subroutine

; Memory $5D69
            .byte $EA,$EA,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00

; Memory $5D80

l_5D80
                    LDA ScreenControl               ; (5D80) Load A with $D016
                    ORA #$10                        ; (5D83) Logical OR with Accumulator and #$10 (16 / 00010000)
                    STA ScreenControl               ; (5D85) Store A to $D016
                    LDA #$0B                        ; (5D88) Set A to #$0B (11 / 00001011)
                    STA ExtraBackgroundColor2       ; (5D8A) Store A to $D023
                    LDA #$01                        ; (5D8D) Set A to #$01 (1 / 00000001)
                    STA ExtraBackgroundColor3       ; (5D8F) Store A to $D024
                    JSR l_5E0A                      ; (5D92) Jump to Subroutine at $5E0A
                    JMP l_5651                      ; (5D95) Jump to $5651

l_5D98
                    JSR l_CFC0                      ; (5D98) Jump to Subroutine at $CFC0
                    LDA #$10                        ; (5D9B) Set A to #$10 (16 / 00010000)
                    STA $B7                         ; (5D9D) Store A to $B7
                    STA $B9                         ; (5D9F) Store A to $B9
                    LDA #$6B                        ; (5DA1) Set A to #$6B (107 / 01101011)
                    STA $B8                         ; (5DA3) Store A to $B8
                    STA $BA                         ; (5DA5) Store A to $BA
                    RTS                             ; (5DA7) Return from Subroutine

; Memory $5DA8
            .byte $00

; Memory $5DA9

l_5DA9
                    LDA $02FF                       ; (5DA9) Load A with $02FF
                    BEQ l_5DA9                      ; (5DAC) Branch to $5DA9 if Equal
                    JSR l_61D2                      ; (5DAE) Jump to Subroutine at $61D2
                    LDA #$00                        ; (5DB1) Set A to #$00 (0 / 00000000)
                    STA $5A0D                       ; (5DB3) Store A to $5A0D
                    STA $5A11                       ; (5DB6) Store A to $5A11
                    JMP l_ThisRunsAfterDeath                      ; (5DB9) Jump to $2DA0

; Memory $5DBC
            .byte $00,$00,$00,$00,$DD,$DD,$DD,$DD,$DD,$DD,$DD,$DD,$DD,$DD,$DD,$DD
            .byte $DD,$DD,$DD,$DD,$DD,$DD,$DD,$DD,$DD,$DD,$DD,$DD,$DD,$DD,$DD,$DD
            .byte $DD,$DD,$DD,$DD,$DD,$85,$FB,$A9,$80,$85,$FC,$A9,$FB,$A2,$00,$A0
            .byte $C0,$20,$D8,$FF,$60,$00,$00,$00,$00,$01,$45,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$A2,$0D,$A0,$5D,$20,$4F,$5C,$60,$00,$00

; Memory $5E0A

l_5E0A
                    LDA ProgrammableLogicArray      ; (5E0A) Load A with $01
                    AND #$FE                        ; (5E0C) Logical AND with Accumulator and #$FE (254 / 11111110)
                    STA ProgrammableLogicArray      ; (5E0E) Store A to $01
                    LDA ProgrammableLogicArray      ; (5E10) Load A with $01
                    AND #$01                        ; (5E12) Logical AND with Accumulator and #$01 (1 / 00000001)
                    BNE l_5E0A                      ; (5E14) Branch to $5E0A if Not Equal
                    RTS                             ; (5E16) Return from Subroutine

; Memory $5E17
            .byte $00,$00

; Memory $5E19

l_5E19
                    LDA $7290,X                     ; (5E19) Load A with $7290,X
                    STA $11                         ; (5E1C) Store A to $11
                    LDA $7291,X                     ; (5E1E) Load A with $7291,X
                    STA $12                         ; (5E21) Store A to $12
                    NOP                             ; (5E23) No operation
                    NOP                             ; (5E24) No operation
                    JSR l_5A41                      ; (5E25) Jump to Subroutine at $5A41
                    NOP                             ; (5E28) No operation
                    NOP                             ; (5E29) No operation
                    LDX $11                         ; (5E2A) Load X with $11
                    LDY $12                         ; (5E2C) Load Y with $12
                    JSR l_72A4                      ; (5E2E) Jump to Subroutine at $72A4
                    LDA $11                         ; (5E31) Load A with $11
                    CLC                             ; (5E33) Clear Carry Flag
                    ADC #$06                        ; (5E34) Add with Carry with #$06 (6 / 00000110)
                    TAX                             ; (5E36) Transfer A to X
                    LDY $12                         ; (5E37) Load Y with $12
                    JSR l_2A80                      ; (5E39) Jump to Subroutine at $2A80
                    LDY #$0C                        ; (5E3C) Load Y with #$0C (12 / 00001100)
                    LDA ($11),Y                     ; (5E3E) Load A with ($11),Y
                    STA $5D21                       ; (5E40) Store A to $5D21
                    INY                             ; (5E43) Increment Y Register
                    TYA                             ; (5E44) Transfer Y to A
                    PHA                             ; (5E45) Push Accumulator to Stack
                    LDA ($11),Y                     ; (5E46) Load A with ($11),Y
                    STA $5D23                       ; (5E48) Store A to $5D23
                    JSR l_5D20                      ; (5E4B) Jump to Subroutine at $5D20
                    PLA                             ; (5E4E) Pull Accumulator from Stack
                    TAY                             ; (5E4F) Transfer A to Y
                    INY                             ; (5E50) Increment Y Register
                    LDA ($11),Y                     ; (5E51) Load A with ($11),Y
                    STA ExtraBackgroundColor1       ; (5E53) Store A to $D022
                    INY                             ; (5E56) Increment Y Register
                    LDA ($11),Y                     ; (5E57) Load A with ($11),Y
                    STA ExtraBackgroundColor2       ; (5E59) Store A to $D023
                    INY                             ; (5E5C) Increment Y Register
                    LDA ($11),Y                     ; (5E5D) Load A with ($11),Y
                    JSR l_7F20                      ; (5E5F) Jump to Subroutine at $7F20
                    INY                             ; (5E62) Increment Y Register
                    LDA ($11),Y                     ; (5E63) Load A with ($11),Y
                    JSR l_7F27                      ; (5E65) Jump to Subroutine at $7F27
                    INY                             ; (5E68) Increment Y Register
                    LDA ($11),Y                     ; (5E69) Load A with ($11),Y
                    JSR l_7F2E                      ; (5E6B) Jump to Subroutine at $7F2E
                    INY                             ; (5E6E) Increment Y Register
                    LDA ($11),Y                     ; (5E6F) Load A with ($11),Y
                    STA $07F8                       ; (5E71) Store A to $07F8
                    INY                             ; (5E74) Increment Y Register
                    LDA ($11),Y                     ; (5E75) Load A with ($11),Y
                    STA Sprite1_X                   ; (5E77) Store A to $D002
                    INY                             ; (5E7A) Increment Y Register
                    LDA ($11),Y                     ; (5E7B) Load A with ($11),Y
                    STA Sprite1_Y                   ; (5E7D) Store A to $D003
                    INY                             ; (5E80) Increment Y Register
                    LDA $4518                       ; (5E81) Load A with $4518
                    AND #$FD                        ; (5E84) Logical AND with Accumulator and #$FD (253 / 11111101)
                    ORA ($11),Y                     ; (5E86) Logical OR with Accumulator ($11),Y
                    STA Sprite_upper_X              ; (5E88) Store A to $D010
                    INY                             ; (5E8B) Increment Y Register
                    LDA ($11),Y                     ; (5E8C) Load A with ($11),Y
                    STA $07F9                       ; (5E8E) Store A to $07F9
                    INY                             ; (5E91) Increment Y Register
                    LDA ($11),Y                     ; (5E92) Load A with ($11),Y
                    STA $CF68                       ; (5E94) Store A to $CF68
                    INY                             ; (5E97) Increment Y Register
                    LDA ($11),Y                     ; (5E98) Load A with ($11),Y
                    STA $CF69                       ; (5E9A) Store A to $CF69
                    INY                             ; (5E9D) Increment Y Register
                    LDA ($11),Y                     ; (5E9E) Load A with ($11),Y
                    STA $CF6A                       ; (5EA0) Store A to $CF6A
                    INY                             ; (5EA3) Increment Y Register
                    LDA ($11),Y                     ; (5EA4) Load A with ($11),Y
                    STA $CF6B                       ; (5EA6) Store A to $CF6B
                    INY                             ; (5EA9) Increment Y Register
                    LDA ($11),Y                     ; (5EAA) Load A with ($11),Y
                    STA $CF6C                       ; (5EAC) Store A to $CF6C
                    INY                             ; (5EAF) Increment Y Register
                    LDA ($11),Y                     ; (5EB0) Load A with ($11),Y
                    STA $CF3D                       ; (5EB2) Store A to $CF3D
                    INY                             ; (5EB5) Increment Y Register
                    LDA ($11),Y                     ; (5EB6) Load A with ($11),Y
                    STA $CF3E                       ; (5EB8) Store A to $CF3E
                    INY                             ; (5EBB) Increment Y Register
                    LDA ($11),Y                     ; (5EBC) Load A with ($11),Y
                    STA $CF3F                       ; (5EBE) Store A to $CF3F
                    INY                             ; (5EC1) Increment Y Register
                    LDA ($11),Y                     ; (5EC2) Load A with ($11),Y
                    STA $CF40                       ; (5EC4) Store A to $CF40
                    INY                             ; (5EC7) Increment Y Register
                    LDA ($11),Y                     ; (5EC8) Load A with ($11),Y
                    STA $CF41                       ; (5ECA) Store A to $CF41
                    INY                             ; (5ECD) Increment Y Register
                    LDA ($11),Y                     ; (5ECE) Load A with ($11),Y
                    STA $CF38                       ; (5ED0) Store A to $CF38
                    INY                             ; (5ED3) Increment Y Register
                    LDA ($11),Y                     ; (5ED4) Load A with ($11),Y
                    STA $CF39                       ; (5ED6) Store A to $CF39
                    INY                             ; (5ED9) Increment Y Register
                    LDA ($11),Y                     ; (5EDA) Load A with ($11),Y
                    STA $CF3A                       ; (5EDC) Store A to $CF3A
                    INY                             ; (5EDF) Increment Y Register
                    LDA ($11),Y                     ; (5EE0) Load A with ($11),Y
                    STA $CF3B                       ; (5EE2) Store A to $CF3B
                    INY                             ; (5EE5) Increment Y Register
                    LDA ($11),Y                     ; (5EE6) Load A with ($11),Y
                    STA $CF3C                       ; (5EE8) Store A to $CF3C
                    INY                             ; (5EEB) Increment Y Register
                    LDA ($11),Y                     ; (5EEC) Load A with ($11),Y
                    STA $45AD                       ; (5EEE) Store A to $45AD
                    INY                             ; (5EF1) Increment Y Register
                    LDA ($11),Y                     ; (5EF2) Load A with ($11),Y
                    STA $45AE                       ; (5EF4) Store A to $45AE
                    INY                             ; (5EF7) Increment Y Register
                    LDA ($11),Y                     ; (5EF8) Load A with ($11),Y
                    STA $45AF                       ; (5EFA) Store A to $45AF
                    INY                             ; (5EFD) Increment Y Register
                    LDA ($11),Y                     ; (5EFE) Load A with ($11),Y
                    STA $45B0                       ; (5F00) Store A to $45B0
                    INY                             ; (5F03) Increment Y Register
                    LDA ($11),Y                     ; (5F04) Load A with ($11),Y
                    STA $45B1                       ; (5F06) Store A to $45B1
                    INY                             ; (5F09) Increment Y Register
                    LDA ($11),Y                     ; (5F0A) Load A with ($11),Y
                    STA $CF9C                       ; (5F0C) Store A to $CF9C
                    INY                             ; (5F0F) Increment Y Register
                    LDA ($11),Y                     ; (5F10) Load A with ($11),Y
                    STA $CF9D                       ; (5F12) Store A to $CF9D
                    INY                             ; (5F15) Increment Y Register
                    LDA ($11),Y                     ; (5F16) Load A with ($11),Y
                    STA $CF9E                       ; (5F18) Store A to $CF9E
                    INY                             ; (5F1B) Increment Y Register
                    LDA ($11),Y                     ; (5F1C) Load A with ($11),Y
                    STA $CF9F                       ; (5F1E) Store A to $CF9F
                    INY                             ; (5F21) Increment Y Register
                    LDA ($11),Y                     ; (5F22) Load A with ($11),Y
                    STA $CFA0                       ; (5F24) Store A to $CFA0
                    INY                             ; (5F27) Increment Y Register
                    LDA ($11),Y                     ; (5F28) Load A with ($11),Y
                    STA $54E5                       ; (5F2A) Store A to $54E5
                    INY                             ; (5F2D) Increment Y Register
                    LDA ($11),Y                     ; (5F2E) Load A with ($11),Y
                    STA $54E6                       ; (5F30) Store A to $54E6
                    INY                             ; (5F33) Increment Y Register
                    LDA ($11),Y                     ; (5F34) Load A with ($11),Y
                    STA $54E7                       ; (5F36) Store A to $54E7
                    INY                             ; (5F39) Increment Y Register
                    LDA ($11),Y                     ; (5F3A) Load A with ($11),Y
                    STA $54E8                       ; (5F3C) Store A to $54E8
                    INY                             ; (5F3F) Increment Y Register
                    LDA ($11),Y                     ; (5F40) Load A with ($11),Y
                    STA $54E9                       ; (5F42) Store A to $54E9
                    INY                             ; (5F45) Increment Y Register
                    LDA ($11),Y                     ; (5F46) Load A with ($11),Y
                    STA $45E2                       ; (5F48) Store A to $45E2
                    INY                             ; (5F4B) Increment Y Register
                    LDA ($11),Y                     ; (5F4C) Load A with ($11),Y
                    STA $45E3                       ; (5F4E) Store A to $45E3
                    INY                             ; (5F51) Increment Y Register
                    LDA ($11),Y                     ; (5F52) Load A with ($11),Y
                    STA $45E4                       ; (5F54) Store A to $45E4
                    INY                             ; (5F57) Increment Y Register
                    LDA ($11),Y                     ; (5F58) Load A with ($11),Y
                    STA $45E5                       ; (5F5A) Store A to $45E5
                    INY                             ; (5F5D) Increment Y Register
                    LDA ($11),Y                     ; (5F5E) Load A with ($11),Y
                    STA $45E6                       ; (5F60) Store A to $45E6
                    INY                             ; (5F63) Increment Y Register
                    LDA ($11),Y                     ; (5F64) Load A with ($11),Y
                    STA $575E                       ; (5F66) Store A to $575E
                    INY                             ; (5F69) Increment Y Register
                    LDA ($11),Y                     ; (5F6A) Load A with ($11),Y
                    STA $575F                       ; (5F6C) Store A to $575F
                    INY                             ; (5F6F) Increment Y Register
                    LDA ($11),Y                     ; (5F70) Load A with ($11),Y
                    STA $5760                       ; (5F72) Store A to $5760
                    INY                             ; (5F75) Increment Y Register
                    LDA ($11),Y                     ; (5F76) Load A with ($11),Y
                    STA $5761                       ; (5F78) Store A to $5761
                    INY                             ; (5F7B) Increment Y Register
                    LDA ($11),Y                     ; (5F7C) Load A with ($11),Y
                    STA $5762                       ; (5F7E) Store A to $5762
                    INY                             ; (5F81) Increment Y Register
                    LDA ($11),Y                     ; (5F82) Load A with ($11),Y
                    STA $CF24                       ; (5F84) Store A to $CF24
                    INY                             ; (5F87) Increment Y Register
                    LDA ($11),Y                     ; (5F88) Load A with ($11),Y
                    STA $CF25                       ; (5F8A) Store A to $CF25
                    INY                             ; (5F8D) Increment Y Register
                    LDA ($11),Y                     ; (5F8E) Load A with ($11),Y
                    STA $CF26                       ; (5F90) Store A to $CF26
                    INY                             ; (5F93) Increment Y Register
                    LDA ($11),Y                     ; (5F94) Load A with ($11),Y
                    STA $CF27                       ; (5F96) Store A to $CF27
                    INY                             ; (5F99) Increment Y Register
                    LDA ($11),Y                     ; (5F9A) Load A with ($11),Y
                    STA $CF28                       ; (5F9C) Store A to $CF28
                    LDX #$00                        ; (5F9F) Set X to #$00 (0 / 00000000)

l_5FA1
                    INY                             ; (5FA1) Increment Y Register
                    LDA ($11),Y                     ; (5FA2) Load A with ($11),Y
                    STA $4519,X                     ; (5FA4) Store A to $4519,X
                    INX                             ; (5FA7) Increment X
                    CPX #$19                        ; (5FA8) Subtract #$19 from X (25 / 00011001)
                    BNE l_5FA1                      ; (5FAA) Branch to $5FA1 if Not Equal
                    LDA #$0E                        ; (5FAC) Set A to #$0E (14 / 00001110)
                    STA $5FDC                       ; (5FAE) Store A to $5FDC
                    JSR l_5FC0                      ; (5FB1) Jump to Subroutine at $5FC0
                    LDA #$0A                        ; (5FB4) Set A to #$0A (10 / 00001010)
                    STA $5FDC                       ; (5FB6) Store A to $5FDC
                    JSR l_5FC0                      ; (5FB9) Jump to Subroutine at $5FC0
                    JMP l_7600                      ; (5FBC) Jump to $7600

; Memory $5FBF
            .byte $EA

; Memory $5FC0

l_5FC0
                    LDX #$00                        ; (5FC0) Set X to #$00 (0 / 00000000)

l_5FC2
                    INY                             ; (5FC2) Increment Y Register
                    LDA ($11),Y                     ; (5FC3) Load A with ($11),Y
                    STA $FB                         ; (5FC5) Store A to $FB
                    INY                             ; (5FC7) Increment Y Register
                    LDA ($11),Y                     ; (5FC8) Load A with ($11),Y
                    STA $FC                         ; (5FCA) Store A to $FC
                    TYA                             ; (5FCC) Transfer Y to A
                    PHA                             ; (5FCD) Push Accumulator to Stack
                    LDY #$00                        ; (5FCE) Load Y with #$00 (0 / 00000000)
                    LDA #$57                        ; (5FD0) Set A to #$57 (87 / 01010111)
                    STA ($FB),Y                     ; (5FD2) Store A to ($FB),Y
                    LDA $FC                         ; (5FD4) Load A with $FC
                    CLC                             ; (5FD6) Clear Carry Flag
                    ADC #$D4                        ; (5FD7) Add with Carry with #$D4 (212 / 11010100)
                    STA $FC                         ; (5FD9) Store A to $FC
                    LDA #$0A                        ; (5FDB) Set A to #$0A (10 / 00001010)
                    STA ($FB),Y                     ; (5FDD) Store A to ($FB),Y
                    PLA                             ; (5FDF) Pull Accumulator from Stack
                    TAY                             ; (5FE0) Transfer A to Y
                    INX                             ; (5FE1) Increment X
                    CPX #$05                        ; (5FE2) Subtract #$05 from X (5 / 00000101)
                    BNE l_5FC2                      ; (5FE4) Branch to $5FC2 if Not Equal
                    RTS                             ; (5FE6) Return from Subroutine

; Memory $5FE7
            .byte $EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$00,$70,$80,$70,$00,$71,$80
            .byte $71,$00,$72,$EA,$EA,$EA,$EA,$EA,$EA,$40,$03,$D3,$5B,$00,$FF,$FF
            .byte $FF,$F5,$45,$FF,$FF,$FF,$F7,$FF,$90,$F7,$50,$FF,$DC,$4B,$00,$00
            .byte $D0,$FF,$FF,$00,$FF,$D7,$FF,$FF,$FF,$FF,$FD,$00,$50,$DC,$FF,$FF
            .byte $FF,$FF,$FF,$00,$FF,$54,$FF,$F7,$EF,$FF,$FF,$00,$00,$F5,$00,$DF
            .byte $DD,$FF,$F5,$FF,$FF,$00,$BE,$FF,$EF,$DF,$F7,$FF,$9F,$FF,$DF,$FF
            .byte $00,$FF,$EF,$FF,$D0,$FF,$FF,$F5,$BF,$04,$7F,$11,$B2,$91,$00,$FF
            .byte $7F,$00,$FF,$00,$FF,$00,$FF,$CA,$50,$FF,$F7,$00,$FF,$FF,$00,$FF
            .byte $00,$FE,$FF,$00,$F1,$FF,$A0,$00,$B7,$FA,$46,$FF,$B5,$00,$00,$FF
            .byte $00,$BE,$FF,$00,$FF,$DB,$08,$FF,$FF,$C2,$00,$AB,$0A,$45,$00,$CB
            .byte $00,$FF,$FF,$84,$BA,$84,$10,$8F,$00,$FF,$00,$00,$90,$81,$FF,$FF
            .byte $E5,$6D,$00,$FF,$FF,$C0,$14,$00,$15

; Memory $60A0

l_60A0
                    LDA #$05                        ; (60A0) Set A to #$05 (5 / 00000101)
                    STA FilterCutOff1               ; (60A2) Store A to $D415
                    LDA #$45                        ; (60A5) Set A to #$45 (69 / 01000101)
                    STA FilterCutOff2               ; (60A7) Store A to $D416
                    LDA #$F1                        ; (60AA) Set A to #$F1 (241 / 11110001)
                    STA FilterControl               ; (60AC) Store A to $D417
                    LDA #$3F                        ; (60AF) Set A to #$3F (63 / 00111111)
                    STA $D418                       ; (60B1) Store A to $D418
                    RTS                             ; (60B4) Return from Subroutine

; Memory $60B5
            .byte $A9,$03,$C5,$02,$D0,$0C,$AE,$AC,$02,$CA,$8E,$04,$D4,$A9,$50,$8D
            .byte $0B,$D4,$4C,$31,$EA

; Memory $60CA

l_60CA
                    LDA #$00                        ; (60CA) Set A to #$00 (0 / 00000000)
                    STA $02                         ; (60CC) Store A to $02
                    STA $02FF                       ; (60CE) Store A to $02FF
                    LDX #$20                        ; (60D1) Set X to #$20 (32 / 00100000)

l_60D3
                    STA Voice1Frequency1,X          ; (60D3) Store A to $D400,X
                    DEX                             ; (60D6) Decrement X
                    BNE l_60D3                      ; (60D7) Branch to $60D3 if Not Equal
                    LDA #$F8                        ; (60D9) Set A to #$F8 (248 / 11111000)
                    STA $B7                         ; (60DB) Store A to $B7
                    STA $B9                         ; (60DD) Store A to $B9
                    LDA #$61                        ; (60DF) Set A to #$61 (97 / 01100001)
                    STA $B8                         ; (60E1) Store A to $B8
                    STA $BA                         ; (60E3) Store A to $BA
                    JSR l_60A0                      ; (60E5) Jump to Subroutine at $60A0
                    SEI                             ; (60E8) Set Interrupt Disable Flag
                    LDA #$F5                        ; (60E9) Set A to #$F5 (245 / 11110101)
                    STA IRQExecAddr1                ; (60EB) Store A to $0314
                    LDA #$60                        ; (60EE) Set A to #$60 (96 / 01100000)
                    STA IRQExecAddr2                ; (60F0) Store A to $0315
                    CLI                             ; (60F3) Clear Interrupt Disable Flag
                    RTS                             ; (60F4) Return from Subroutine

; Memory $60F5
            .byte $A0,$00,$C5,$02,$F0,$05,$C6,$02,$4C,$B5,$60,$E6,$B7,$D0,$02,$E6
            .byte $B8,$B1,$B7,$8D,$0C,$61,$4C,$74,$61,$20,$E9,$61,$8D,$01,$D4,$20
            .byte $E9,$61,$8D,$00,$D4,$AD,$AC,$02,$8C,$04,$D4,$8D,$04,$D4,$4C,$00
            .byte $61,$20,$E9,$61,$8D,$08,$D4,$20,$E9,$61,$8D,$07,$D4,$AD,$AD,$02
            .byte $8C,$0B,$D4,$8D,$0B,$D4,$4C,$00,$61,$20,$E9,$61,$8D,$01,$D4,$20
            .byte $E9,$61,$8D,$00,$D4,$20,$E9,$61,$8D,$08,$D4,$20,$E9,$61,$8D,$07
            .byte $D4,$8C,$04,$D4,$8C,$0B,$D4,$AD,$AC,$02,$8D,$04,$D4,$AD,$AD,$02
            .byte $8D,$0B,$D4,$4C,$00,$61,$20,$E9,$61,$8D,$AA,$02,$4C,$31,$EA,$AD
            .byte $AA,$02,$85,$02,$4C,$31,$EA,$EE,$FF,$02,$4C,$31,$EA,$20,$E9,$61
            .byte $8D,$AC,$02,$20,$E9,$61,$8D,$AD,$02,$4C,$00,$61,$20,$E9,$61,$8D
            .byte $05,$D4,$20,$E9,$61,$8D,$0C,$D4,$20,$E9,$61,$8D,$06,$D4,$20,$E9
            .byte $61,$8D,$0D,$D4,$4C,$00,$61,$20,$E9,$61,$8D,$02,$D4,$20,$E9,$61
            .byte $8D,$03,$D4,$20,$E9,$61,$8D,$09,$D4,$20,$E9,$61,$8D,$0A,$D4,$4C
            .byte $00,$61,$A5,$B9,$85,$B7,$A5,$BA,$85,$B8,$4C,$31,$EA

; Memory $61D2

l_61D2
                    LDA #$00                        ; (61D2) Set A to #$00 (0 / 00000000)
                    LDX #$20                        ; (61D4) Set X to #$20 (32 / 00100000)

l_61D6
                    STA Voice1Frequency1,X          ; (61D6) Store A to $D400,X
                    DEX                             ; (61D9) Decrement X
                    BNE l_61D6                      ; (61DA) Branch to $61D6 if Not Equal
                    SEI                             ; (61DC) Set Interrupt Disable Flag
                    LDA #$31                        ; (61DD) Set A to #$31 (49 / 00110001)
                    STA IRQExecAddr1                ; (61DF) Store A to $0314
                    LDA #$EA                        ; (61E2) Set A to #$EA (234 / 11101010)
                    STA IRQExecAddr2                ; (61E4) Store A to $0315
                    CLI                             ; (61E7) Clear Interrupt Disable Flag
                    RTS                             ; (61E8) Return from Subroutine

; Memory $61E9
            .byte $E6,$B7,$D0,$02,$E6,$B8,$B1,$B7,$60,$00,$FF,$00,$FF,$00,$FF,$DD
            .byte $91,$07,$07,$58,$7A,$6B,$06,$AC,$00,$02,$00,$02,$82,$41,$21,$0E
            .byte $04,$30,$74,$74,$0E,$04,$B4,$74,$74,$0E,$05,$98,$74,$74,$0E,$06
            .byte $47,$74,$74,$0E,$04,$B4,$74,$74,$74,$0E,$0B,$30,$74,$0E,$04,$B4
            .byte $74,$74,$74,$74,$0E,$04,$30,$74,$74,$0E,$04,$B4,$74,$74,$0E,$05
            .byte $98,$74,$74,$0E,$06,$47,$74,$74,$0E,$04,$B4,$74,$74,$74,$0E,$09
            .byte $68,$74,$0E,$04,$B4,$74,$74,$74,$74,$3E,$04,$30,$4B,$45,$74,$74
            .byte $0E,$04,$B4,$74,$26,$43,$0F,$74,$0E,$05,$98,$74,$74,$0E,$06,$47
            .byte $74,$74,$0E,$04,$B4,$74,$74,$74,$74,$0E,$09,$68,$74,$74,$74,$74
            .byte $3E,$04,$30,$43,$0F,$74,$74,$0E,$04,$B4,$74,$26,$3F,$4B,$74,$0E
            .byte $05,$98,$74,$74,$0E,$06,$47,$74,$74,$0E,$04,$B4,$74,$74,$74,$74
            .byte $0E,$09,$68,$74,$74,$74,$0E,$0B,$30,$74,$3E,$04,$30,$32,$3C,$74
            .byte $74,$0E,$04,$B4,$74,$26,$3F,$4B,$74,$0E,$05,$98,$74,$74,$0E,$06
            .byte $47,$74,$26,$38,$63,$74,$0E,$04,$B4,$74,$74,$74,$74,$0E,$09,$68
            .byte $74,$74,$74,$74,$0E,$04,$30,$74,$74,$0E,$04,$B4,$74,$74,$0E,$05
            .byte $98,$74,$74,$0E,$06,$47,$74,$74,$0E,$04,$B4,$74,$74,$74,$74,$0E
            .byte $09,$68,$74,$74,$74,$0E,$0B,$30,$74,$82,$41,$41,$3E,$04,$30,$54
            .byte $7D,$74,$74,$0E,$04,$B4,$74,$26,$4B,$45,$74,$0E,$05,$98,$74,$74
            .byte $0E,$06,$47,$74,$74,$0E,$04,$B4,$74,$74,$74,$74,$0E,$09,$68,$74
            .byte $74,$74,$74,$3E,$04,$30,$43,$0F,$74,$74,$0E,$04,$B4,$74,$26,$3F
            .byte $4B,$74,$0E,$05,$98,$74,$74,$0E,$06,$47,$74,$74,$0E,$04,$B4,$74
            .byte $74,$74,$74,$0E,$09,$68,$74,$74,$74,$74,$3E,$04,$30,$32,$3C,$74
            .byte $74,$0E,$04,$B4,$74,$26,$3F,$4B,$74,$0E,$05,$98,$74,$74,$0E,$06
            .byte $47,$74,$26,$38,$63,$74,$0E,$04,$B4,$74,$74,$74,$0E,$0B,$30,$74
            .byte $0E,$04,$B4,$74,$74,$74,$74,$0E,$04,$30,$74,$74,$0E,$04,$B4,$74
            .byte $74,$0E,$05,$98,$74,$74,$0E,$06,$47,$74,$74,$0E,$04,$B4,$74,$74
            .byte $74,$0E,$09,$68,$74,$0E,$04,$B4,$74,$74,$74,$74,$AC,$00,$02,$00
            .byte $08,$91,$07,$03,$58,$38,$00,$00,$00,$0E,$03,$BB,$74,$74,$26,$25
            .byte $A2,$74,$74,$3E,$04,$B4,$2C,$C1,$74,$74,$3E,$03,$BB,$25,$A2,$74
            .byte $74,$3E,$04,$30,$2A,$3E,$74,$74,$74,$3E,$04,$B4,$2C,$C1,$74,$74
            .byte $74,$3E,$05,$47,$32,$3C,$74,$0E,$06,$47,$74,$00,$91,$07,$05,$58
            .byte $58,$0E,$03,$23,$74,$74,$26,$2C,$C1,$74,$74,$3E,$03,$BB,$38,$63
            .byte $74,$74,$3E,$03,$23,$2C,$C1,$74,$74,$3E,$04,$30,$32,$3C,$74,$74
            .byte $74,$3E,$04,$B4,$38,$63,$74,$74,$74,$3E,$05,$47,$3B,$BE,$74,$74
            .byte $00,$00,$AC,$00,$02,$00,$04,$00,$00,$00,$91,$07,$08,$58,$AA,$00
            .byte $00,$3E,$04,$30,$3B,$BE,$74,$74,$0E,$04,$B4,$74,$26,$38,$63,$74
            .byte $0E,$05,$98,$74,$74,$0E,$06,$47,$74,$74,$0E,$04,$B4,$74,$74,$74
            .byte $0E,$0B,$30,$74,$0E,$04,$B4,$74,$74,$74,$74,$0E,$04,$30,$74,$74
            .byte $0E,$04,$B4,$74,$74,$0E,$05,$98,$74,$74,$0E,$06,$47,$74,$74,$0E
            .byte $04,$B4,$74,$74,$74,$0E,$09,$86,$74,$0E,$04,$B4,$74,$74,$74,$74
            .byte $AC,$00,$02,$00,$02,$91,$07,$03,$58,$38,$0E,$03,$BB,$74,$74,$26
            .byte $25,$A2,$74,$74,$3E,$04,$B4,$2C,$C1,$74,$74,$3E,$03,$BB,$25,$A2
            .byte $74,$74,$3E,$04,$30,$2A,$3E,$74,$74,$74,$3E,$04,$B4,$2C,$C1,$74
            .byte $74,$74,$3E,$05,$47,$32,$3C,$74,$0E,$06,$47,$74,$AC,$00,$02,$00
            .byte $03,$91,$07,$05,$58,$68,$0E,$03,$23,$74,$74,$26,$2C,$C1,$74,$74
            .byte $3E,$03,$BB,$38,$63,$74,$74,$3E,$03,$23,$2C,$C1,$74,$74,$3E,$04
            .byte $30,$32,$3C,$74,$74,$74,$3E,$04,$B4,$38,$63,$74,$74,$74,$3E,$05
            .byte $47,$3B,$BE,$74,$74,$AC,$00,$02,$00,$04,$91,$07,$07,$78,$7A,$3E
            .byte $04,$30,$3B,$BE,$74,$74,$0E,$04,$B4,$74,$26,$38,$63,$74,$0E,$05
            .byte $98,$74,$74,$0E,$06,$47,$74,$74,$0E,$04,$B4,$74,$74,$74,$0E,$0B
            .byte $30,$74,$0E,$04,$B4,$74,$74,$74,$74,$0E,$04,$30,$74,$74,$0E,$04
            .byte $B4,$74,$74,$0E,$05,$98,$74,$74,$0E,$06,$47,$74,$74,$0E,$04,$B4
            .byte $74,$74,$74,$0E,$09,$68,$74,$0E,$04,$B4,$74,$74,$74,$74,$82,$11
            .byte $21,$91,$07,$07,$78,$78,$3E,$1C,$C1,$02,$18,$74,$74,$3E,$04,$B4
            .byte $02,$5A,$74,$74,$3E,$1C,$31,$02,$CC,$74,$74,$3E,$00,$00,$03,$23
            .byte $74,$74,$3E,$04,$B4,$02,$5A,$74,$74,$74,$26,$05,$98,$74,$3E,$02
            .byte $5F,$02,$5A,$74,$74,$74,$74,$3E,$1C,$C1,$02,$18,$74,$74,$3E,$04
            .byte $B4,$02,$5A,$74,$74,$3E,$1C,$31,$02,$CC,$74,$74,$3E,$00,$00,$03
            .byte $23,$74,$74,$3E,$04,$B4,$02,$5A,$74,$74,$74,$74,$3E,$09,$68,$04
            .byte $B4,$74,$74,$74,$74,$3E,$1C,$C1,$02,$18,$74,$74,$3E,$04,$B4,$02
            .byte $5A,$74,$74,$3E,$1C,$31,$02,$CC,$74,$74,$3E,$00,$00,$03,$23,$74
            .byte $74,$3E,$04,$B4,$02,$5A,$74,$74,$74,$26,$05,$50,$74,$3E,$04,$B4
            .byte $02,$5A,$74,$74,$74,$74,$3E,$1C,$C1,$02,$18,$74,$74,$3E,$04,$B4
            .byte $02,$5A,$74,$74,$3E,$1C,$31,$02,$CC,$74,$74,$3E,$00,$00,$03,$23
            .byte $74,$74,$3E,$04,$B4,$02,$5A,$74,$74,$74,$74,$3E,$09,$68,$04,$B4
            .byte $74,$74,$74,$74,$91,$05,$07,$58,$78,$82,$41,$21,$26,$02,$18,$74
            .byte $74,$3E,$54,$7D,$02,$5A,$74,$0E,$43,$0F,$74,$3E,$38,$63,$02,$CC
            .byte $74,$0E,$4B,$45,$74,$3E,$3F,$4B,$03,$23,$74,$0E,$32,$3C,$74,$3E
            .byte $43,$0F,$02,$5A,$74,$0E,$38,$63,$74,$0E,$2C,$C1,$74,$0E,$3F,$4B
            .byte $74,$3E,$32,$3C,$04,$B4,$74,$0E,$2A,$3E,$74,$0E,$38,$63,$74,$0E
            .byte $2C,$C1,$74,$3E,$25,$A2,$02,$18,$74,$0E,$38,$63,$74,$3E,$2C,$C1
            .byte $02,$5A,$74,$0E,$25,$A2,$74,$3E,$32,$3C,$02,$CC,$74,$0E,$2A,$3E
            .byte $74,$3E,$21,$87,$03,$23,$74,$0E,$2C,$C1,$74,$3E,$25,$A2,$02,$5A
            .byte $74,$0E,$1F,$A5,$74,$0E,$2A,$3E,$74,$0E,$21,$87,$74,$3E,$1C,$31
            .byte $04,$B4,$74,$0E,$25,$A2,$74,$0E,$1F,$A5,$74,$0E,$19,$1E,$74,$00
            .byte $00,$00,$00,$00,$91,$07,$07,$78,$78,$82,$11,$21,$3E,$1C,$C1,$02
            .byte $18,$74,$74,$3E,$04,$B4,$02,$5A,$74,$74,$3E,$1C,$31,$02,$CC,$74
            .byte $74,$3E,$00,$00,$03,$23,$74,$74,$3E,$04,$B4,$02,$5A,$74,$74,$74
            .byte $26,$05,$98,$74,$3E,$04,$B4,$02,$5A,$74,$74,$74,$74,$3E,$1C,$C1
            .byte $02,$18,$74,$74,$3E,$04,$B4,$02,$5A,$74,$74,$3E,$1C,$31,$02,$CC
            .byte $74,$74,$3E,$00,$00,$03,$23,$74,$74,$3E,$04,$B4,$02,$5A,$74,$74
            .byte $74,$74,$3E,$09,$68,$04,$B4,$74,$74,$74,$74,$00,$00,$00,$00,$91
            .byte $05,$07,$58,$78,$82,$41,$21,$26,$02,$18,$74,$74,$3E,$54,$7D,$02
            .byte $5A,$74,$0E,$43,$0F,$74,$3E,$3F,$4B,$02,$CC,$74,$0E,$4B,$45,$74
            .byte $3E,$3F,$4B,$03,$23,$74,$0E,$32,$3C,$74,$3E,$43,$0F,$02,$5A,$74
            .byte $0E,$38,$63,$74,$0E,$2C,$C1,$74,$0E,$3F,$4B,$74,$3E,$32,$3C,$04
            .byte $B4,$74,$0E,$2A,$3E,$74,$0E,$38,$63,$74,$0E,$2C,$C1,$74,$3E,$25
            .byte $A2,$02,$18,$74,$0E,$38,$63,$74,$3E,$2C,$C1,$02,$5A,$74,$0E,$25
            .byte $A2,$74,$3E,$32,$3C,$02,$CC,$74,$0E,$2A,$3E,$74,$3E,$21,$87,$03
            .byte $23,$74,$0E,$2C,$C1,$74,$3E,$25,$A2,$02,$5A,$74,$0E,$1F,$A5,$74
            .byte $0E,$2A,$3E,$74,$0E,$21,$87,$74,$3E,$1C,$31,$04,$B4,$74,$0E,$25
            .byte $A2,$74,$0E,$1F,$A5,$74,$0E,$19,$1E,$74,$00,$00,$82,$11,$21,$3E
            .byte $1C,$C1,$02,$18,$74,$74,$3E,$04,$B4,$02,$5A,$74,$74,$3E,$1C,$31
            .byte $02,$CC,$74,$74,$3E,$00,$00,$03,$23,$74,$74,$3E,$04,$B4,$02,$5A
            .byte $74,$74,$74,$26,$05,$98,$74,$3E,$04,$B4,$02,$5A,$74,$74,$74,$74
            .byte $3E,$1C,$C1,$02,$18,$74,$74,$3E,$04,$B4,$02,$5A,$74,$74,$3E,$1C
            .byte $31,$02,$CC,$74,$74,$3E,$00,$00,$03,$23,$74,$74,$3E,$04,$B4,$02
            .byte $5A,$74,$74,$74,$74,$3E,$09,$68,$04,$B4,$74,$74,$74,$74,$82,$41
            .byte $21,$00,$00,$00,$00,$26,$03,$BB,$74,$0E,$12,$D1,$74,$0E,$16,$60
            .byte $74,$0E,$1C,$31,$74,$3E,$25,$A2,$07,$77,$74,$0E,$2C,$C1,$74,$3E
            .byte $38,$63,$03,$BB,$74,$0E,$4B,$45,$74,$3E,$59,$83,$04,$30,$74,$0E
            .byte $4B,$45,$74,$0E,$38,$63,$74,$0E,$2C,$C1,$74,$3E,$25,$A2,$02,$18
            .byte $74,$0E,$1C,$31,$74,$3E,$16,$60,$02,$18,$74,$0E,$12,$D1,$74,$26
            .byte $03,$23,$74,$0E,$0E,$EF,$74,$0E,$10,$C3,$74,$0E,$12,$D1,$74,$3E
            .byte $15,$1F,$06,$47,$74,$0E,$16,$60,$74,$3E,$19,$1E,$03,$23,$74,$0E
            .byte $1C,$31,$74,$3E,$1D,$DF,$04,$30,$74,$0E,$21,$87,$74,$0E,$25,$A2
            .byte $74,$0E,$2A,$3E,$74,$3E,$2C,$C1,$02,$18,$74,$0E,$32,$3C,$74,$0E
            .byte $38,$63,$74,$0E,$1D,$DF,$74,$82,$11,$21,$00,$00,$00,$3E,$1C,$C1
            .byte $02,$18,$74,$74,$3E,$04,$B4,$02,$5A,$74,$74,$3E,$1C,$31,$02,$CC
            .byte $74,$74,$3E,$00,$00,$03,$23,$74,$74,$3E,$04,$B4,$02,$5A,$74,$74
            .byte $74,$26,$05,$50,$74,$3E,$04,$B4,$02,$5A,$74,$74,$74,$74,$3E,$1C
            .byte $C1,$02,$18,$74,$74,$3E,$04,$B4,$02,$5A,$74,$74,$3E,$1C,$31,$02
            .byte $CC,$74,$74,$3E,$00,$00,$03,$23,$74,$74,$3E,$04,$B4,$02,$5A,$74
            .byte $74,$74,$74,$3E,$09,$68,$04,$B4,$74,$74,$74,$74,$82,$41,$21,$00
            .byte $26,$03,$F4,$74,$0E,$12,$D1,$74,$0E,$16,$60,$74,$0E,$1C,$31,$74
            .byte $3E,$25,$A2,$07,$E9,$74,$0E,$2C,$C1,$74,$3E,$25,$A2,$03,$F4,$74
            .byte $0E,$1C,$31,$74,$3E,$1A,$9C,$05,$47,$74,$0E,$2A,$3E,$74,$0E,$21
            .byte $87,$74,$0E,$1A,$9C,$74,$3E,$15,$1F,$02,$A3,$74,$0E,$10,$C3,$74
            .byte $3E,$0D,$4E,$02,$A3,$74,$0E,$10,$C3,$74,$3E,$12,$D1,$02,$CC,$74
            .byte $0E,$15,$1F,$74,$0E,$16,$60,$74,$0E,$19,$1E,$74,$3E,$1C,$31,$02
            .byte $CC,$74,$0E,$1F,$A5,$74,$3E,$21,$87,$02,$CC,$74,$0E,$25,$A2,$74
            .byte $3E,$2A,$3E,$03,$23,$74,$0E,$2C,$C1,$74,$3E,$32,$3C,$03,$23,$74
            .byte $0E,$38,$63,$74,$3E,$3F,$4B,$03,$86,$74,$0E,$47,$0C,$74,$3E,$4B
            .byte $45,$03,$86,$74,$0E,$54,$7D,$74,$91,$99,$99,$A9,$A9,$82,$41,$41
            .byte $AC,$00,$08,$00,$08,$00,$00,$3E,$06,$47,$07,$77,$74,$3E,$07,$0C
            .byte $08,$61,$74,$3E,$07,$77,$09,$68,$74,$3E,$08,$61,$0A,$8F,$74,$3E
            .byte $09,$68,$0B,$30,$74,$3E,$0A,$8F,$0C,$8F,$74,$3E,$0B,$30,$0E,$18
            .byte $74,$3E,$0C,$8F,$0E,$EF,$74,$3E,$0E,$18,$10,$C3,$74,$3E,$0E,$EF
            .byte $12,$D1,$74,$3E,$10,$C3,$15,$1F,$74,$3E,$12,$D1,$16,$60,$74,$3E
            .byte $15,$1F,$19,$1E,$74,$3E,$16,$60,$1C,$31,$74,$3E,$19,$1E,$1F,$A5
            .byte $74,$3E,$1C,$31,$23,$86,$91,$55,$55,$57,$57,$74,$C7,$DD,$DD,$DD
            .byte $91,$0A,$0A,$AA,$AA,$6B,$07,$AC,$00,$08,$00,$08,$82,$21,$21,$3E
            .byte $12,$D1,$1C,$31,$74,$00,$00,$3E,$12,$D1,$1C,$31,$74,$00,$00,$3E
            .byte $12,$D1,$1C,$31,$74,$74,$00,$3E,$0F,$D2,$1F,$A5,$74,$00,$00,$3E
            .byte $0F,$D2,$1F,$A5,$74,$00,$00,$3E,$0F,$D2,$1F,$A5,$74,$74,$00,$3E
            .byte $15,$1F,$19,$1E,$74,$00,$00,$3E,$12,$D1,$17,$B5,$74,$00,$00,$3E
            .byte $15,$1F,$19,$1E,$74,$00,$00,$3E,$0F,$D2,$25,$A2,$74,$00,$00,$3E
            .byte $0E,$18,$23,$86,$74,$74,$00,$3E,$17,$B5,$23,$86,$74,$00,$00,$3E
            .byte $17,$B5,$25,$A2,$74,$00,$00,$3E,$19,$1E,$2A,$3E,$74,$00,$00,$3E
            .byte $19,$1E,$25,$A2,$74,$00,$00,$3E,$19,$1E,$23,$86,$74,$00,$00,$3E
            .byte $19,$1E,$1F,$A5,$74,$00,$00,$3E,$1C,$31,$2A,$3E,$74,$74,$00,$3E
            .byte $0E,$18,$25,$A2,$74,$00,$00,$3E,$0E,$18,$2A,$3E,$74,$00,$00,$3E
            .byte $12,$D1,$2F,$6B,$74,$74,$00,$6B,$04,$3E,$2A,$3E,$32,$3C,$74,$3E
            .byte $2F,$6B,$38,$63,$74,$00,$00,$3E,$32,$3C,$3F,$4B,$74,$00,$00,$3E
            .byte $38,$63,$47,$0C,$74,$00,$00,$3E,$3F,$4B,$4B,$45,$74,$00,$00,$3E
            .byte $47,$0C,$54,$7D,$74,$00,$00,$3E,$4B,$45,$5E,$D6,$74,$74,$74,$74
            .byte $74,$74,$74,$7C,$74,$D2,$DD,$DD,$91,$09,$09,$9A,$9A,$6B,$09,$AC
            .byte $00,$08,$00,$08,$82,$41,$41,$3E,$04,$B4,$09,$68,$74,$0E,$09,$68
            .byte $74,$3E,$05,$47,$0E,$18,$74,$0E,$09,$68,$74,$3E,$05,$98,$0E,$18
            .byte $74,$0E,$0E,$18,$74,$3E,$06,$47,$12,$D1,$74,$0E,$11,$C3,$74,$3E
            .byte $07,$0C,$12,$D1,$74,$0E,$15,$1F,$74,$3E,$07,$77,$16,$60,$74,$0E
            .byte $19,$1E,$74,$3E,$08,$61,$1C,$31,$74,$3E,$09,$68,$1D,$DF,$74,$3E
            .byte $0A,$8F,$21,$87,$74,$3E,$0B,$30,$25,$A2,$74,$00,$00,$00,$00,$3E
            .byte $04,$B4,$09,$68,$74,$0E,$09,$68,$74,$3E,$05,$47,$0E,$18,$74,$0E
            .byte $09,$68,$74,$3E,$05,$98,$0E,$18,$74,$0E,$0E,$18,$74,$3E,$06,$47
            .byte $12,$D1,$74,$0E,$11,$C3,$74,$3E,$07,$0C,$12,$D1,$74,$0E,$15,$1F
            .byte $74,$3E,$07,$77,$16,$60,$74,$0E,$19,$1E,$74,$3E,$07,$0C,$1C,$31
            .byte $74,$3E,$07,$0C,$1C,$31,$74,$3E,$04,$B4,$25,$A2,$74,$74,$74,$74
            .byte $74,$74,$74,$7C,$74,$D2,$DD,$10,$0C,$00,$3C,$FF,$F5,$9E,$00,$FF
            .byte $DB,$FF,$F1,$FE,$DB,$10,$06,$00,$00,$90,$20,$FF,$00,$00,$0A,$FB
            .byte $1F,$FF,$FF,$FB,$FF,$A0,$FF,$F0,$0F,$DF,$00,$71,$FF,$B0,$8F,$DF
            .byte $FF,$F7,$00,$DF,$8F,$FF,$FF,$04,$02,$0F,$5B,$00,$FF,$FF,$FF,$74
            .byte $05,$FF,$FF,$EF,$FF,$FF,$10,$F7,$58,$FF,$9C,$4B,$00,$00,$24,$FF
            .byte $FF,$00,$FF,$D7,$FF,$FF,$7F,$FF,$FD,$00,$00,$8C,$FF,$FF,$FF,$FF
            .byte $FF,$00,$DF,$04,$FF,$75,$EB,$FF,$FF,$00,$00,$B5,$00,$FF,$DD,$FF
            .byte $24,$FF,$FF,$00,$FE,$FF,$FF,$DB,$F7,$FF,$9F,$FF,$DF,$FF,$00,$FF
            .byte $EF,$FF,$10,$FF,$FF,$F5,$BF,$04,$7F,$01,$B2,$80,$00,$F7,$7F,$00
            .byte $FF,$00,$FF,$00,$FF,$4A,$34,$FF,$FE,$00,$FF,$FF,$00,$FF,$00,$FE
            .byte $FF,$00,$75,$FF,$A0,$00,$B4,$DA,$4E,$FF,$B5,$00,$00,$FF,$00,$BE
            .byte $FF,$00,$FF,$DB,$08,$FF,$FF,$82,$00,$AB,$0A,$45,$00,$8B,$00,$FF
            .byte $FF,$90,$BA,$84,$00,$8B,$00,$FF,$00,$00,$80,$80,$FF,$FF,$E5,$00
            .byte $00,$FF,$FF,$40,$34,$00,$05,$5F,$80,$FF,$8F,$00,$FF,$C5,$00,$0B
            .byte $31,$30,$FF,$DF,$D7,$76,$FF,$FF,$00,$FF,$00,$20,$00,$00,$00,$FF
            .byte $43,$9F,$06,$00,$FF,$FF,$24,$FF,$B1,$90,$20,$00,$20,$FF,$02,$02
            .byte $00,$FF,$80,$B9,$DF,$80,$FF,$90,$0C,$00,$3C,$FF,$EF,$DF,$00,$FF
            .byte $DB,$FF,$FD,$FF,$DB,$00,$06,$20,$00,$B0,$30,$FF,$00,$00,$6A,$FB
            .byte $0F,$FF,$FF,$FB,$FF,$A0,$FF,$F0,$0F,$DF,$00,$71,$FF,$B4,$8F,$FF
            .byte $FF,$F7,$00,$DF,$CF,$FF,$FF,$00,$02,$85,$5B,$00,$EF,$FF,$FF,$E4
            .byte $05,$F5,$FF,$EF,$BF,$FF,$10,$F7,$50,$FF,$94,$6B,$00,$00,$A4,$FF
            .byte $FF,$00,$FF,$87,$FF,$FF,$FF,$FF,$F5,$00,$00,$84,$FF,$FF,$FF,$FF
            .byte $FF,$00,$DF,$04,$FF,$F0,$EB,$FF,$FF,$00,$00,$B5,$00,$DF,$DD,$FF
            .byte $A4,$FF,$FF,$00,$FE,$FF,$FF,$DB,$F7,$FF,$95,$FF,$DF,$FF,$00,$F7
            .byte $EF,$FB,$00,$FF,$FF,$E4,$BF,$00,$7F,$01,$B0,$80,$00,$FF,$7F,$00
            .byte $FF,$00,$FF,$00,$FF,$0A,$00,$FF,$FE,$00,$FF,$FF,$00,$FF,$00,$FE
            .byte $FF,$00,$F1,$FF,$A0,$00,$B4,$D8,$44,$FF,$A5,$00,$00,$FF,$00,$BE
            .byte $FF,$00,$FF,$DB,$08,$FF,$FF,$83,$00,$AB,$0A,$45,$00,$CB,$00,$FF
            .byte $FF,$90,$BA,$84,$10,$8B,$00,$FF,$00,$00,$80,$80,$FF,$FF,$E5,$00
            .byte $00,$FF,$FF,$C0,$00,$00,$05,$DF,$80,$FF,$8F,$00,$FF,$C7,$00,$0B
            .byte $31,$30,$FF,$DF,$84,$74,$FF,$FF,$00,$FF,$00,$20,$00,$00,$00,$FF
            .byte $C0,$9F,$06,$00,$FD,$FF,$24,$F7,$A0,$80,$20,$00,$20,$FF,$02,$00
            .byte $00,$FF,$80,$B1,$DF,$80,$FF,$90,$0C,$00,$3C,$FF,$F5,$DE,$00,$FF
            .byte $DB,$FF,$F1,$FC,$DB,$00,$06,$20,$00,$90,$20,$FF,$00,$00,$2A,$FB
            .byte $0F,$FF,$FF,$FB,$FF,$A0,$FF,$F2,$0F,$DF,$00,$71,$FF,$B0,$8F,$FF
            .byte $FF,$F6,$80,$DF,$8F,$FF,$FF,$44,$00,$4D,$5F,$00,$FF,$FF,$FF,$F5
            .byte $45,$FD,$FF,$EF,$FF,$FF,$10,$F7,$50,$FF,$DC,$4B,$00,$00,$54,$FF
            .byte $FF,$00,$FF,$D7,$FF,$FF,$FF,$FF,$FD,$00,$40,$CC,$FF,$FF,$FF,$FF
            .byte $FF,$00,$DF,$54,$FF,$FD,$EF,$FF,$FF,$00,$00,$F5,$00,$DF,$DD,$FF
            .byte $F5,$FF,$FF,$00,$FE,$FF,$FF,$DB,$F7,$FF,$9D,$FF,$DF,$FF,$00,$FF
            .byte $EF,$FF,$50,$FF,$FF,$F5,$BF,$04,$7F,$01,$B0,$91,$00,$FF,$7F,$00
            .byte $FF,$00,$FF,$00,$FF,$4A,$14,$FF,$FC,$00,$FF,$FF,$00,$FF,$00,$FF
            .byte $FF,$00,$F5,$FF,$A0,$00,$B4,$DA,$4C,$FF,$B5,$00,$00,$FF,$00,$BE
            .byte $FF,$00,$FF,$DB,$08,$FF,$FF,$C2,$00,$AB,$0A,$45,$00,$8F,$00,$FF
            .byte $FF,$90,$BA,$84,$10,$8F,$00,$FF,$00,$00,$80,$80,$FF,$FF,$E5,$00
            .byte $00,$FF,$FF,$50,$54,$00,$05,$5F,$80,$FF,$CF,$00,$FF,$C5,$00,$0B
            .byte $31,$30,$FF,$DF,$D5,$7C,$FF,$FF,$00,$FF,$10,$20,$00,$00,$00,$FF
            .byte $51,$DF,$06,$00,$FF,$FF,$04,$FF,$B1,$90,$20,$00,$20,$FF,$02,$00
            .byte $00,$FF,$80,$F9,$DF,$80,$FF,$10,$0C,$00,$3C,$FF,$FF,$5F,$00,$FF
            .byte $DB,$FF,$FD,$FE,$DB,$10,$14,$00,$00,$90,$34,$FF,$00,$00,$4A,$FB
            .byte $5F,$FF,$FF,$FB,$FF,$A0,$FF,$F0,$0F,$DF,$00,$71,$FF,$FC,$8F,$DF
            .byte $FF,$F7,$40,$DF,$DF,$FF,$FF,$40,$00,$4D,$5B,$00,$CF,$FF,$FF,$6C
            .byte $45,$F5,$FF,$EF,$FF,$FF,$10,$F7,$58,$FF,$DC,$4B,$00,$00,$44,$FF
            .byte $FF,$00,$FF,$47,$FF,$FF,$FF,$FF,$FD,$00,$40,$CC,$FF,$EF,$FF,$FF
            .byte $FF,$00,$DF,$44,$FF,$FB,$EF,$FF,$FF,$00,$00,$B5,$00,$DF,$DD,$FF
            .byte $64,$FF,$FF,$00,$FE,$FF,$FF,$DB,$F7,$FF,$95,$FF,$DF,$FF,$00,$FB
            .byte $EF,$DB,$50,$FF,$FF,$E4,$BF,$00,$7F,$01,$F0,$80,$00,$FF,$7F,$00
            .byte $FF,$00,$FF,$00,$FF,$4A,$40,$FF,$FC,$00,$FD,$FF,$00,$FF,$00,$FE
            .byte $FF,$00,$71,$FF,$A0,$00,$3C,$D8,$4C,$FF,$A5,$00,$00,$FF,$00,$BE
            .byte $FF,$00,$FF,$DB,$08,$FF,$FF,$C3,$00,$AB,$0A,$45,$00,$CB,$00,$FF
            .byte $FF,$90,$BA,$84,$50,$DF,$00,$FF,$00,$00,$80,$80,$FF,$FF,$E5,$00
            .byte $00,$FF,$FF,$41,$40,$00,$05,$5F,$80,$FF,$CF,$00,$FF,$C5,$00,$0B
            .byte $31,$30,$FF,$DF,$84,$7C,$FF,$FF,$00,$FF,$00,$20,$00,$00,$00,$FF
            .byte $51,$DF,$06,$00,$FD,$FF,$04,$FF,$A1,$90,$00,$00,$20,$FF,$02,$02
            .byte $00,$FF,$80,$B1,$DF,$80,$FF,$10,$0C,$00,$3C,$FF,$FD,$5F,$00,$FF
            .byte $DB,$FF,$F1,$FC,$DB,$00,$04,$00,$00,$90,$64,$FF,$00,$00,$4A,$FB
            .byte $4F,$FF,$FF,$FB,$FF,$A0,$FF,$F0,$0F,$DF,$00,$71,$FF,$7C,$8F,$DF
            .byte $FF,$F7,$40,$DF,$CF,$FF,$FF,$50,$84,$F0,$87,$50,$04,$00,$80,$FF
            .byte $83,$00,$30,$00,$88,$01,$07,$80,$E0,$00,$E2,$E0,$E0,$00,$F2,$88
            .byte $88,$88,$98,$A4,$88,$88,$88,$98,$A4,$8B,$8B,$8B,$9B,$A7,$02,$03
            .byte $04,$05,$06,$23,$26,$19,$20,$80,$04,$04,$04,$04,$08,$10,$10,$10
            .byte $0D,$0D,$00,$26,$46,$1E,$20,$4A,$4A,$4A,$4A,$4A,$30,$10,$00,$00
            .byte $00,$D7,$10,$00,$00,$00,$3F,$10,$10,$00,$00,$11,$DE,$00,$00,$00
            .byte $B5,$DE,$00,$20,$00,$87,$04,$97,$04,$04,$07,$95,$05,$A4,$06,$E8
            .byte $07,$E8,$07,$E8,$07,$E8,$07,$E8,$07,$05,$00,$00,$41,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$50,$8E,$F0,$91,$50,$04,$00,$8A,$FF
            .byte $8D,$00,$30,$00,$92,$0B,$02,$E0,$B0,$00,$E2,$A0,$70,$00,$F2,$80
            .byte $36,$37,$35,$34,$80,$36,$37,$35,$34,$83,$36,$37,$35,$34,$06,$07
            .byte $07,$07,$07,$18,$03,$04,$05,$06,$04,$04,$04,$04,$04,$10,$30,$20
            .byte $20,$20,$1E,$24,$6B,$70,$73,$4A,$4A,$4A,$4A,$4A,$00,$E0,$00,$00
            .byte $00,$30,$00,$00,$FF,$00,$50,$00,$00,$D0,$00,$70,$00,$00,$70,$00
            .byte $80,$00,$00,$50,$00,$56,$05,$D1,$05,$F9,$06,$34,$07,$F6,$06,$E8
            .byte $07,$E8,$07,$E8,$07,$E8,$07,$E8,$07,$05,$02,$78,$41,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$50,$98,$F0,$9B,$50,$04,$00,$94,$FF
            .byte $97,$00,$30,$00,$9C,$0C,$07,$80,$A0,$00,$E2,$70,$A3,$00,$F2,$A0
            .byte $84,$90,$3C,$2C,$A0,$84,$90,$3C,$2C,$A3,$87,$93,$3F,$33,$0B,$0B
            .byte $0B,$05,$0C,$23,$33,$08,$1F,$08,$04,$04,$04,$04,$04,$10,$10,$20
            .byte $10,$10,$1E,$22,$1E,$22,$22,$4A,$4A,$4A,$4A,$4A,$00,$E3,$00,$00
            .byte $00,$50,$E0,$08,$00,$10,$00,$30,$00,$00,$B0,$41,$E1,$20,$00,$00
            .byte $50,$40,$40,$00,$80,$51,$04,$04,$05,$A7,$05,$DE,$05,$6D,$05,$E8
            .byte $07,$E8,$07,$E8,$07,$E8,$07,$E8,$07,$05,$04,$B8,$41,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$50,$A2,$F0,$A5,$50,$04,$00,$9E,$FF
            .byte $A1,$00,$30,$00,$A6,$01,$0C,$80,$D0,$00,$E2,$50,$D0,$00,$F2,$98
            .byte $A0,$9C,$94,$8C,$98,$A0,$9C,$94,$8C,$9B,$A3,$9F,$97,$8F,$02,$03
            .byte $04,$01,$09,$23,$26,$19,$20,$08,$04,$04,$04,$04,$04,$20,$20,$20
            .byte $20,$20,$1E,$1E,$1E,$22,$22,$4A,$4A,$4A,$4A,$4A,$00,$80,$00,$00
            .byte $60,$00,$80,$00,$00,$60,$00,$80,$00,$00,$60,$41,$80,$20,$00,$60
            .byte $50,$80,$40,$00,$60,$E8,$04,$CB,$06,$E6,$06,$51,$07,$1E,$05,$E8
            .byte $07,$E8,$07,$E8,$07,$E8,$07,$E8,$07,$05,$06,$08,$42,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$50,$AC,$F0,$AF,$50,$04,$00,$A8,$FF
            .byte $AB,$00,$30,$00,$B0,$01,$09,$80,$E0,$00,$E2,$90,$E0,$00,$F2,$9C
            .byte $A4,$98,$90,$8C,$9C,$A4,$98,$90,$8C,$9F,$A7,$9B,$93,$8F,$00,$03
            .byte $04,$08,$06,$1F,$28,$10,$08,$08,$04,$06,$04,$04,$04,$09,$09,$09
            .byte $09,$09,$1E,$20,$1E,$1E,$22,$4A,$4A,$4A,$4A,$4A,$00,$D0,$00,$00
            .byte $20,$20,$F0,$00,$00,$00,$00,$D0,$00,$00,$20,$00,$30,$00,$00,$70
            .byte $50,$D0,$40,$00,$80,$A5,$06,$4F,$05,$86,$06,$CA,$04,$CE,$04,$E8
            .byte $07,$E8,$07,$E8,$07,$E8,$07,$E8,$07,$05,$08,$88,$42,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00

; Memory $7280

l_7280
                    LDY #$73                        ; (7280) Load Y with #$73 (115 / 01110011)
                    LDA ($11),Y                     ; (7282) Load A with ($11),Y
                    CMP #$0A                        ; (7284) Subtract #$0A from A (10 / 00001010)
                    BMI l_728B                      ; (7286) Branch to $728B if minus 
                    JMP l_576B                      ; (7288) Jump to $576B

l_728B
                    RTS                             ; (728B) Return from Subroutine

; Memory $728C
            .byte $00,$00,$00,$00,$00,$70,$80,$70,$00,$71,$80,$71,$00,$72,$00,$73
            .byte $80,$73,$00,$74,$80,$74,$00,$75

; Memory $72A4

l_72A4
                    SEI                             ; (72A4) Set Interrupt Disable Flag
                    LDA $00                         ; (72A5) Load A with $00
                    ORA #$02                        ; (72A7) Logical OR with Accumulator and #$02 (2 / 00000010)
                    STA $00                         ; (72A9) Store A to $00
                    LDA #$34                        ; (72AB) Set A to #$34 (52 / 00110100)
                    STA ProgrammableLogicArray      ; (72AD) Store A to $01
                    JSR l_2A80                      ; (72AF) Jump to Subroutine at $2A80
                    LDA #$36                        ; (72B2) Set A to #$36 (54 / 00110110)
                    STA ProgrammableLogicArray      ; (72B4) Store A to $01
                    CLI                             ; (72B6) Clear Interrupt Disable Flag
                    RTS                             ; (72B7) Return from Subroutine

; Memory $72B8
            .byte $EA,$04

; Memory $72BA

l_72BA
                    JSR l_ReduceHealthBar                      ; (72BA) Jump to Subroutine at $59A3
                    DEC $72B9                       ; (72BD) Decrement $72B9
                    BNE l_72DD                      ; (72C0) Branch to $72DD if Not Equal
                    LDA #$04                        ; (72C2) Set A to #$04 (4 / 00000100)
                    STA $72B9                       ; (72C4) Store A to $72B9

l_72C7
                    LDA CurrentRasterLine           ; (72C7) Load A with $D012
                    CMP #$10                        ; (72CA) Subtract #$10 from A (16 / 00010000)
                    BNE l_72C7                      ; (72CC) Branch to $72C7 if Not Equal
                    LDA ScreenControlRegister       ; (72CE) Load A with $D011
                    AND #$80                        ; (72D1) Logical AND with Accumulator and #$80 (128 / 10000000)
                    BNE l_72C7                      ; (72D3) Branch to $72C7 if Not Equal
                    LDA BorderColour                ; (72D5) Load A with $D020
                    EOR #$08                        ; (72D8) Exclusive OR (XOR) with Accumulator and #$08 (8 / 00001000)
                    STA BorderColour                ; (72DA) Store A to $D020

l_72DD
                    RTS                             ; (72DD) Return from Subroutine

; Memory $72DE
            .byte $00,$00

; Memory $72E0

l_72E0
                    LDA #$AC                        ; (72E0) Set A to #$AC (172 / 10101100)
                    STA $04BA                       ; (72E2) Store A to $04BA
                    LDA #$02                        ; (72E5) Set A to #$02 (2 / 00000010)
                    STA $D8BA                       ; (72E7) Store A to $D8BA
                    JMP l_75E0                      ; (72EA) Jump to $75E0

l_72ED
                    LDX #$00                        ; (72ED) Set X to #$00 (0 / 00000000)

l_72EF
                    LDA $77C0,X                     ; (72EF) Load A with $77C0,X
                    STA $0400,X                     ; (72F2) Store A to $0400,X
                    LDA #$04                        ; (72F5) Set A to #$04 (4 / 00000100)
                    STA $D800,X                     ; (72F7) Store A to $D800,X
                    INX                             ; (72FA) Increment X
                    CPX #$28                        ; (72FB) Subtract #$28 from X (40 / 00101000)
                    BNE l_72EF                      ; (72FD) Branch to $72EF if Not Equal
                    RTS                             ; (72FF) Return from Subroutine

; Memory $7300
            .byte $28,$EC,$F0,$EF,$50,$04,$00,$A8,$FF,$AB,$00,$30,$00,$B0,$01,$09
            .byte $80,$E0,$00,$E2,$70,$C8,$00,$F2,$A0,$A4,$94,$90,$38,$A0,$A4,$94
            .byte $90,$38,$A3,$A7,$97,$93,$3B,$00,$0B,$01,$08,$0B,$1F,$28,$10,$08
            .byte $20,$04,$06,$04,$04,$04,$09,$09,$09,$09,$09,$1E,$20,$1E,$1E,$22
            .byte $4A,$4A,$4A,$4A,$4A,$00,$D0,$00,$00,$20,$20,$F0,$00,$00,$00,$00
            .byte $D0,$00,$00,$20,$00,$30,$00,$00,$70,$50,$D0,$40,$00,$80,$19,$05
            .byte $7D,$04,$45,$06,$C8,$06,$55,$06,$CA,$04,$6E,$05,$D6,$06,$52,$06
            .byte $6C,$07,$0A,$0A,$18,$43,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $28,$E8,$F0,$EB,$50,$04,$00,$9E,$FF,$A1,$00,$30,$00,$A6,$01,$0C
            .byte $F0,$D0,$00,$E2,$E0,$D0,$00,$F2,$98,$A0,$2C,$94,$8C,$98,$A0,$2C
            .byte $94,$8C,$9B,$A3,$33,$97,$8F,$02,$03,$0E,$01,$09,$23,$26,$06,$20
            .byte $08,$04,$04,$04,$04,$04,$20,$20,$20,$20,$20,$1E,$1E,$22,$22,$22
            .byte $4A,$4A,$4A,$4A,$4A,$00,$80,$00,$00,$60,$00,$80,$00,$00,$60,$50
            .byte $40,$10,$00,$60,$41,$DE,$20,$00,$00,$50,$80,$40,$00,$80,$C2,$04
            .byte $CE,$06,$3B,$07,$9A,$07,$FF,$06,$33,$06,$45,$05,$43,$06,$4C,$06
            .byte $41,$07,$0A,$0C,$88,$43,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $28,$E4,$F0,$E7,$50,$04,$00,$94,$FF,$97,$00,$30,$00,$9C,$0C,$07
            .byte $80,$A0,$00,$E2,$70,$A3,$00,$F2,$A0,$84,$90,$3C,$2C,$A0,$84,$90
            .byte $3C,$2C,$A3,$87,$93,$3F,$33,$0B,$0B,$0B,$05,$01,$23,$33,$08,$1F
            .byte $08,$04,$04,$04,$04,$04,$10,$10,$20,$10,$10,$1E,$22,$1E,$22,$22
            .byte $4A,$4A,$4A,$4A,$4A,$00,$E3,$00,$00,$00,$50,$E0,$08,$00,$10,$00
            .byte $30,$00,$00,$B0,$41,$E1,$20,$00,$00,$50,$40,$40,$00,$60,$71,$05
            .byte $B1,$06,$1B,$06,$C5,$07,$B4,$05,$ED,$04,$AB,$05,$9C,$05,$6D,$05
            .byte $2C,$07,$0A,$0E,$F0,$43,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $28,$E0,$F0,$E3,$50,$04,$00,$8A,$FF,$8D,$00,$30,$00,$92,$0B,$02
            .byte $80,$60,$00,$E2,$A0,$70,$00,$F2,$80,$36,$37,$35,$34,$80,$36,$37
            .byte $35,$34,$83,$36,$37,$35,$34,$06,$07,$07,$07,$07,$10,$03,$04,$05
            .byte $06,$04,$04,$04,$04,$04,$10,$30,$20,$20,$20,$1E,$24,$6B,$70,$73
            .byte $4A,$4A,$4A,$4A,$4A,$00,$E0,$00,$00,$00,$30,$00,$00,$FF,$00,$50
            .byte $00,$00,$D0,$00,$70,$00,$00,$70,$00,$80,$00,$00,$50,$00,$52,$05
            .byte $CE,$05,$35,$07,$1E,$07,$CC,$07,$84,$07,$1C,$06,$04,$05,$3B,$06
            .byte $D1,$06,$0A,$10,$58,$44,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $28,$78,$F0,$7B,$50,$04,$00,$80,$FF,$83,$00,$30,$00,$88,$01,$07
            .byte $F0,$E0,$00,$E2,$E0,$E0,$00,$F2,$88,$88,$88,$2C,$A4,$88,$88,$88
            .byte $2C,$A4,$8B,$F2,$8B,$33,$A7,$02,$03,$04,$0B,$00,$23,$26,$19,$08
            .byte $40,$04,$04,$04,$04,$04,$10,$10,$10,$0D,$0D,$00,$26,$46,$22,$20
            .byte $4A,$4A,$4A,$4A,$4A,$30,$10,$00,$00,$00,$D7,$10,$00,$00,$00,$3F
            .byte $10,$10,$00,$00,$50,$40,$20,$00,$A0,$C0,$FF,$00,$00,$00,$73,$05
            .byte $DE,$06,$4F,$07,$5B,$06,$6E,$04,$20,$05,$D4,$06,$85,$06,$5F,$04
            .byte $96,$04,$0A,$12,$B0,$44,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00

; Memory $7580

l_7580
                    JSR l_C9F1                      ; (7580) Jump to Subroutine at $C9F1
                    CPY #$00                        ; (7583) Subtract #$00 from Y (0 / 00000000)
                    BNE l_75A4                      ; (7585) Branch to $75A4 if Not Equal
                    JSR l_C9F1                      ; (7587) Jump to Subroutine at $C9F1
                    CPY #$40                        ; (758A) Subtract #$40 from Y (64 / 01000000)
                    BPL l_7599                      ; (758C) Branch to $7599 if positive
                    LDA ExtraBackgroundColor1       ; (758E) Load A with $D022
                    EOR #$02                        ; (7591) Exclusive OR (XOR) with Accumulator and #$02 (2 / 00000010)
                    STA ExtraBackgroundColor1       ; (7593) Store A to $D022
                    JMP l_75A4                      ; (7596) Jump to $75A4

l_7599
                    LDA ExtraBackgroundColor2       ; (7599) Load A with $D023
                    EOR #$02                        ; (759C) Exclusive OR (XOR) with Accumulator and #$02 (2 / 00000010)
                    STA $7523                       ; (759E) Store A to $7523
                    JMP l_75A4                      ; (75A1) Jump to $75A4

l_75A4
                    RTS                             ; (75A4) Return from Subroutine

; Memory $75A5
            .byte $00,$00

; Memory $75A7

l_75A7
                    LDA #$EA                        ; (75A7) Set A to #$EA (234 / 11101010)
                    STA $0328                       ; (75A9) Store A to $0328
                    JMP l_5A60                      ; (75AC) Jump to $5A60

; Memory $75AF
            .byte $00

; Memory $75B0

l_75B0
                    LDA $5A11                       ; (75B0) Load A with $5A11
                    BNE l_75C7                      ; (75B3) Branch to $75C7 if Not Equal
                    LDA BoyGirlToggle                       ; (75B5) Load A with BoyGirlToggle. #00 = Boy / #01 = Girl.
                    BNE l_75C2                      ; (75B8) Branch to $75C2 if Not Equal
                    LDA #$06                        ; (75BA) Set A to #$06 (6 / 00000110)
                    STA BorderColour                ; (75BC) Store A to $D020
                    JMP l_7FAE                      ; (75BF) Jump to $7FAE

l_75C2
                    LDA #$0A                        ; (75C2) Set A to #$0A (10 / 00001010)
                    STA BorderColour                ; (75C4) Store A to $D020

l_75C7
                    JMP l_7FAE                      ; (75C7) Jump to $7FAE

; Memory $75CA
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00

; Memory $75E0

l_75E0
                    LDA $DA5C                       ; (75E0) Load A with $DA5C
                    AND #$0F                        ; (75E3) Logical AND with Accumulator and #$0F (15 / 00001111)
                    CMP #$01                        ; (75E5) Subtract #$01 from A (1 / 00000001)
                    BNE l_75EC                      ; (75E7) Branch to $75EC if Not Equal
                    JMP l_72ED                      ; (75E9) Jump to $72ED

l_75EC
                    RTS                             ; (75EC) Return from Subroutine

; Memory $75ED
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00

; Memory $7600

l_7600
                    INY                             ; (7600) Increment Y Register
                    LDA ($11),Y                     ; (7601) Load A with ($11),Y
                    STA $5A15                       ; (7603) Store A to $5A15
                    LDA #$03                        ; (7606) Set A to #$03 (3 / 00000011)
                    STA SpriteEnableRegister        ; (7608) Store A to $D015
                    RTS                             ; (760B) Return from Subroutine

; Memory $760C
            .byte $00,$00,$00,$00

; Memory $7610

l_7610
                    LDA $02FF                       ; (7610) Load A with $02FF
                    BNE l_7639                      ; (7613) Branch to $7639 if Not Equal
                    JSR l_C9F1                      ; (7615) Jump to Subroutine at $C9F1
                    CPY #$00                        ; (7618) Subtract #$00 from Y (0 / 00000000)
                    BNE l_7610                      ; (761A) Branch to $7610 if Not Equal
                    JSR l_C9F1                      ; (761C) Jump to Subroutine at $C9F1
                    CPY #$40                        ; (761F) Subtract #$40 from Y (64 / 01000000)
                    BPL l_762E                      ; (7621) Branch to $762E if positive
                    LDA ExtraBackgroundColor1       ; (7623) Load A with $D022
                    EOR #$02                        ; (7626) Exclusive OR (XOR) with Accumulator and #$02 (2 / 00000010)
                    STA ExtraBackgroundColor1       ; (7628) Store A to $D022
                    JMP l_7610                      ; (762B) Jump to $7610

l_762E
                    LDA ExtraBackgroundColor2       ; (762E) Load A with $D023
                    EOR #$02                        ; (7631) Exclusive OR (XOR) with Accumulator and #$02 (2 / 00000010)
                    STA ExtraBackgroundColor2       ; (7633) Store A to $D023
                    JMP l_7610                      ; (7636) Jump to $7610

l_7639
                    JSR l_60CA                      ; (7639) Jump to Subroutine at $60CA
                    RTS                             ; (763C) Return from Subroutine

; Memory $763D
            .byte $00,$00

; Memory $763F

l_763F
                    LDA #$00                        ; (763F) Set A to #$00 (0 / 00000000)
                    STA $FB                         ; (7641) Store A to $FB
                    LDA #$04                        ; (7643) Set A to #$04 (4 / 00000100)
                    STA $FC                         ; (7645) Store A to $FC
                    LDY #$00                        ; (7647) Load Y with #$00 (0 / 00000000)

l_7649
                    LDA ($FB),Y                     ; (7649) Load A with ($FB),Y
                    STA $0200,Y                     ; (764B) Store A to $0200,Y
                    INY                             ; (764E) Increment Y Register
                    CPY #$50                        ; (764F) Subtract #$50 from Y (80 / 01010000)
                    BNE l_7649                      ; (7651) Branch to $7649 if Not Equal
                    JMP l_5BC7                      ; (7653) Jump to $5BC7

; Memory $7656
            .byte $EA,$EA,$EA

; Memory $7659

l_7659
                    JSR l_763F                      ; (7659) Jump to Subroutine at $763F
                    LDA #$00                        ; (765C) Set A to #$00 (0 / 00000000)
                    STA $FB                         ; (765E) Store A to $FB
                    LDA #$02                        ; (7660) Set A to #$02 (2 / 00000010)
                    STA $FC                         ; (7662) Store A to $FC
                    LDY #$00                        ; (7664) Load Y with #$00 (0 / 00000000)

l_7666
                    LDA ($FB),Y                     ; (7666) Load A with ($FB),Y
                    STA $0400,Y                     ; (7668) Store A to $0400,Y
                    INY                             ; (766B) Increment Y Register
                    CPY #$50                        ; (766C) Subtract #$50 from Y (80 / 01010000)
                    BNE l_7666                      ; (766E) Branch to $7666 if Not Equal
                    RTS                             ; (7670) Return from Subroutine

; Memory $7671
            .byte $00,$00

; Memory $7673

l_7673
                    CMP #$70                        ; (7673) Subtract #$70 from A (112 / 01110000)
                    BMI l_767A                      ; (7675) Branch to $767A if minus 
                    JMP l_5B8D                      ; (7677) Jump to $5B8D

l_767A
                    RTS                             ; (767A) Return from Subroutine

; Memory $767B
            .byte $00,$00,$00,$00,$08

; Memory $7680

l_7680
                    STX $767F                       ; (7680) Store X to $767F
                    CPX #$0A                        ; (7683) Subtract #$0A from X (10 / 00001010)
                    BPL l_769A                      ; (7685) Branch to $769A if positive
                    LDA $7FE8,X                     ; (7687) Load A with $7FE8,X
                    STA $7FE4                       ; (768A) Store A to $7FE4
                    LDA $7FE9,X                     ; (768D) Load A with $7FE9,X
                    STA $7FE5                       ; (7690) Store A to $7FE5
                    LDX #$E0                        ; (7693) Set X to #$E0 (224 / 11100000)
                    LDY #$7F                        ; (7695) Load Y with #$7F (127 / 01111111)
                    JSR l_2A80                      ; (7697) Jump to Subroutine at $2A80

l_769A
                    LDX $767F                       ; (769A) Load X with $767F
                    INX                             ; (769D) Increment X
                    INX                             ; (769E) Increment X
                    JSR l_5E19                      ; (769F) Jump to Subroutine at $5E19
                    LDA BoyGirlToggle                       ; (76A2) Load A with BoyGirlToggle. #00 = Boy / #01 = Girl.
                    BEQ l_76BB                      ; (76A5) Branch to $76BB if Equal
                    LDA $07F8                       ; (76A7) Load A with $07F8
                    LDX $07F9                       ; (76AA) Load X with $07F9
                    STA $07F9                       ; (76AD) Store A to $07F9
                    STX $07F8                       ; (76B0) Store X to $07F8
                    LDA #$0A                        ; (76B3) Set A to #$0A (10 / 00001010)
                    STA BorderColour                ; (76B5) Store A to $D020
                    JMP l_76C0                      ; (76B8) Jump to $76C0

l_76BB
                    LDA #$06                        ; (76BB) Set A to #$06 (6 / 00000110)
                    STA BorderColour                ; (76BD) Store A to $D020

l_76C0
                    LDY #$73                        ; (76C0) Load Y with #$73 (115 / 01110011)
                    LDA #$01                        ; (76C2) Set A to #$01 (1 / 00000001)
                    STA $C19B                       ; (76C4) Store A to $C19B
                    LDA ($11),Y                     ; (76C7) Load A with ($11),Y
                    CMP #$0A                        ; (76C9) Subtract #$0A from A (10 / 00001010)
                    BMI l_76D5                      ; (76CB) Branch to $76D5 if minus 
                    LDA #$03                        ; (76CD) Set A to #$03 (3 / 00000011)
                    STA SpriteEnableRegister        ; (76CF) Store A to $D015
                    RTS                             ; (76D2) Return from Subroutine

; Memory $76D3
            .byte $EA,$EA

; Memory $76D5

l_76D5
                    LDA #$01                        ; (76D5) Set A to #$01 (1 / 00000001)
                    STA SpriteEnableRegister        ; (76D7) Store A to $D015
                    RTS                             ; (76DA) Return from Subroutine

; Memory $76DB
            .byte $EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA
            .byte $EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA
            .byte $EA,$EA,$EA,$EA,$EA,$EA,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$FF,$FF,$0A

; Memory $771F

l_771F
                    RTS                             ; (771F) Return from Subroutine

l_7720
                    LDA BorderColour                ; (7720) Load A with $D020
                    AND #$0F                        ; (7723) Logical AND with Accumulator and #$0F (15 / 00001111)
                    BEQ l_776D                      ; (7725) Branch to $776D if Equal
                    DEC $771C                       ; (7727) Decrement $771C
                    BNE l_771F                      ; (772A) Branch to $771F if Not Equal
                    LDA #$FF                        ; (772C) Set A to #$FF (255 / 11111111)
                    STA $771C                       ; (772E) Store A to $771C
                    DEC $771D                       ; (7731) Decrement $771D
                    BNE l_771F                      ; (7734) Branch to $771F if Not Equal
                    LDA #$FF                        ; (7736) Set A to #$FF (255 / 11111111)
                    STA $771D                       ; (7738) Store A to $771D
                    DEC $771E                       ; (773B) Decrement $771E
                    BNE l_771F                      ; (773E) Branch to $771F if Not Equal
                    LDA #$0A                        ; (7740) Set A to #$0A (10 / 00001010)
                    STA $771E                       ; (7742) Store A to $771E
                    JSR l_7780                      ; (7745) Jump to Subroutine at $7780
                    LDX #$BF                        ; (7748) Set X to #$BF (191 / 10111111)
                    LDY #$5B                        ; (774A) Load Y with #$5B (91 / 01011011)
                    JSR l_2A80                      ; (774C) Jump to Subroutine at $2A80
                    LDA #$00                        ; (774F) Set A to #$00 (0 / 00000000)
                    STA SpriteEnableRegister        ; (7751) Store A to $D015
                    STA ExtraBackgroundColor1       ; (7754) Store A to $D022
                    STA ExtraBackgroundColor2       ; (7757) Store A to $D023
                    STA BorderColour                ; (775A) Store A to $D020
                    STA BackgroundColour            ; (775D) Store A to $D021
                    LDX #$00                        ; (7760) Set X to #$00 (0 / 00000000)
                    LDY #$7C                        ; (7762) Load Y with #$7C (124 / 01111100)
                    JSR l_5C4F                      ; (7764) Jump to Subroutine at $5C4F
                    JSR l_60CA                      ; (7767) Jump to Subroutine at $60CA
                    RTS                             ; (776A) Return from Subroutine

; Memory $776B
            .byte $00,$00

; Memory $776D

l_776D
                    JSR l_7580                      ; (776D) Jump to Subroutine at $7580
                    RTS                             ; (7770) Return from Subroutine

; Memory $7771
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00

; Memory $7780

l_7780
                    LDA $0406,X                     ; (7780) Load A with $0406,X
                    CMP $8422,X                     ; (7783) Subtract $8422,X from A
                    BMI l_7792                      ; (7786) Branch to $7792 if minus 
                    BEQ l_778D                      ; (7788) Branch to $778D if Equal
                    JMP l_7795                      ; (778A) Jump to $7795

l_778D
                    INX                             ; (778D) Increment X
                    CPX #$06                        ; (778E) Subtract #$06 from X (6 / 00000110)
                    BNE l_7780                      ; (7790) Branch to $7780 if Not Equal

l_7792
                    JMP l_77A5                      ; (7792) Jump to $77A5

l_7795
                    LDX #$00                        ; (7795) Set X to #$00 (0 / 00000000)

l_7797
                    LDA $0406,X                     ; (7797) Load A with $0406,X
                    STA $8422,X                     ; (779A) Store A to $8422,X
                    INX                             ; (779D) Increment X
                    CPX #$06                        ; (779E) Subtract #$06 from X (6 / 00000110)
                    BNE l_7797                      ; (77A0) Branch to $7797 if Not Equal
                    JMP l_7792                      ; (77A2) Jump to $7792

l_77A5
                    LDA #$0A                        ; (77A5) Set A to #$0A (10 / 00001010)
                    STA $771E                       ; (77A7) Store A to $771E
                    LDA #$FF                        ; (77AA) Set A to #$FF (255 / 11111111)
                    STA $771D                       ; (77AC) Store A to $771D
                    STA $771C                       ; (77AF) Store A to $771C
                    RTS                             ; (77B2) Return from Subroutine

; Memory $77B3
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$90,$92,$8F
            .byte $87,$92,$81,$8D,$8D,$85,$84,$A0,$82,$99,$A0,$84,$81,$96,$89,$84
            .byte $A0,$81,$8E,$84,$A0,$92,$89,$83,$88,$81,$92,$84,$A0,$84,$81,$92
            .byte $8C,$89,$8E,$87,$AE,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$85,$8E,$85
            .byte $92,$87,$99,$A9,$A9,$A9,$A9,$A9,$A9,$A9,$A9,$A9,$A9,$A9,$A9,$A9
            .byte $A9,$A9,$A9,$A9,$A9,$A3,$A1,$A1,$A1,$A1,$A1,$A1,$A1,$A1,$A1,$A1
            .byte $A1,$A1,$A1,$A1,$A1,$04,$05,$04,$06,$63,$06,$04,$05,$06,$04,$05
            .byte $04,$05,$12,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$55,$A0,$62,$A0,$62,$A0
            .byte $A0,$A0,$62,$A0,$11,$04,$05,$04,$05,$04,$05,$63,$04,$05,$06,$06
            .byte $05,$63,$05,$06,$04,$05,$04,$04,$06,$12,$A0,$A0,$A0,$A0,$A0,$A0
            .byte $A0,$0A,$05,$03,$63,$0B,$62,$A0,$A0,$A0,$62,$A0,$A0,$11,$04,$05
            .byte $05,$04,$05,$63,$05,$04,$05,$04,$05,$63,$04,$04,$05,$04,$05,$04
            .byte $12,$A0,$A0,$A0,$A0,$A0,$A0,$0A,$05,$03,$05,$03,$63,$05,$63,$0B
            .byte $A0,$A0,$62,$A0,$A0,$56,$11,$04,$04,$05,$04,$63,$04,$0F,$0F,$05
            .byte $06,$63,$0F,$05,$04,$04,$04,$12,$1C,$1D,$1E,$1E,$1E,$1D,$1C,$03
            .byte $03,$05,$03,$03,$63,$15,$63,$0F,$1C,$1D,$1E,$1E,$1E,$1D,$1C,$04
            .byte $05,$04,$0F,$63,$0F,$60,$60,$60,$60,$63,$60,$60,$60,$60,$3C,$50
            .byte $50,$4F,$50,$4F,$4D,$4D,$60,$60,$60,$60,$60,$60,$63,$60,$63,$60
            .byte $60,$4F,$50,$4E,$4D,$4D,$4D,$4D,$3D,$60,$60,$63,$60,$05,$0F,$05
            .byte $0F,$63,$05,$06,$12,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$0A,$06,$03
            .byte $03,$05,$03,$03,$63,$03,$63,$03,$04,$0B,$A0,$A0,$A0,$A0,$A0,$A0
            .byte $56,$0F,$05,$04,$0F,$0F,$0F,$0F,$12,$62,$A0,$A0,$A0,$A0,$A0,$A0
            .byte $A0,$A0,$A0,$A0,$A0,$05,$03,$05,$04,$03,$03,$0F,$63,$05,$63,$04
            .byte $05,$03,$A0,$A0,$09,$A0,$A0,$A0,$A0,$11,$04,$0F,$0F,$32,$32,$38
            .byte $56,$62,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$04,$05,$03
            .byte $03,$0F,$03,$03,$0F,$03,$63,$03,$04,$12,$A0,$09,$A0,$5C,$55,$55
            .byte $09,$08,$54,$34,$31,$3A,$32,$39,$A0,$62,$A0,$A0,$A0,$A0,$A0,$A0
            .byte $A0,$A0,$A0,$A0,$A0,$11,$06,$05,$03,$05,$0F,$04,$03,$0F,$63,$03
            .byte $12,$A0,$A0,$A0,$5C,$7B,$59,$59,$59,$7C,$59,$32,$31,$38,$38,$38
            .byte $A0,$A0,$09,$08,$A0,$A0,$A0,$A0,$5F,$A0,$A0,$A0,$A0,$A0,$11,$03
            .byte $05,$03,$03,$0F,$0F,$03,$63,$13,$A0,$A0,$A0,$09,$58,$A0,$A0,$A0
            .byte $19,$A0,$A0,$31,$31,$32,$3A,$39,$A0,$A0,$58,$A0,$A0,$A0,$A0,$58
            .byte $7C,$5F,$A0,$A0,$09,$08,$A0,$A0,$56,$11,$03,$0F,$0F,$05,$12,$A0
            .byte $5F,$A0,$A0,$A0,$08,$A0,$A0,$A0,$17,$7C,$5B,$32,$32,$31,$32,$38
            .byte $59,$59,$5C,$55,$A0,$5F,$58,$08,$09,$A0,$A0,$A0,$A0,$79,$54,$09
            .byte $A0,$A0,$09,$39,$31,$18,$A0,$58,$A0,$09,$5B,$58,$A0,$A0,$19,$5C
            .byte $09,$78,$54,$32,$31,$0F,$38,$38,$5B,$5B,$5A,$5A,$5A,$59,$59,$5B
            .byte $58,$A0,$A0,$A0,$19,$7B,$59,$7C,$5A,$5A,$59,$3A,$32,$5B,$59,$5A
            .byte $5A,$59,$5C,$5F,$A0,$A0,$7A,$58,$59,$59,$34,$34,$32,$3A,$39,$12
            .byte $A0,$5C,$A0,$A0,$A0,$09,$A0,$62,$5C,$A0,$A0,$A0,$A0,$A0,$A0,$5C
            .byte $09,$54,$A0,$31,$3A,$A0,$58,$20,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0
            .byte $A0,$A0,$1B,$31,$31,$38,$38,$35,$09,$54,$08,$09,$A0,$58,$A0,$62
            .byte $56,$A0,$A0,$A0,$A0,$A0,$79,$5B,$59,$59,$5A,$3A,$32,$61,$20,$A0
            .byte $A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$32,$32,$32,$31,$32
            .byte $59,$59,$7C,$5A,$5A,$5C,$A0,$62,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$62
            .byte $A0,$A0,$1A,$32,$0F,$A0,$08,$18,$A0,$5F,$A0,$A0,$A0,$A0,$09,$55
            .byte $09,$A0,$A0,$34,$32,$3A,$39,$3A,$5C,$A0,$A0,$A0,$A0,$A0,$A0,$62
            .byte $A0,$A0,$A0,$A0,$A0,$A0,$A0,$62,$09,$08,$7A,$3A,$0F,$58,$7D,$5B
            .byte $61,$20,$0A,$05,$0B,$A0,$7A,$5A,$5B,$5B,$5A,$32,$31,$38,$3A,$38
            .byte $21,$A0,$A0,$A0,$A0,$A0,$A0,$62,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$62
            .byte $58,$5C,$1A,$31,$0F,$20,$62,$A0,$A0,$A0,$06,$05,$12,$A0,$A0,$A0
            .byte $62,$09,$08,$32,$32,$38,$39,$31,$21,$A0,$A0,$A0,$A0,$A0,$A0,$62
            .byte $A0,$A0,$A0,$A0,$A0,$A0,$A0,$62,$A0,$A0,$5C,$32,$3A,$A0,$62,$A0
            .byte $A0,$09,$11,$31,$61,$A0,$A0,$A0,$62,$58,$5C,$31,$31,$38,$32,$38
            .byte $21,$A0,$A0,$A0,$A0,$A0,$A0,$62,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$62
            .byte $A0,$A0,$1A,$3A,$3A,$54,$62,$A0,$A0,$A0,$5C,$32,$A0,$A0,$A0,$A0
            .byte $62,$A0,$1A,$31,$32,$39,$38,$3A,$21,$A0,$A0,$A0,$A0,$A0,$A0,$62
            .byte $A0,$A0,$A0,$A0,$A0,$A0,$A0,$62,$A0,$A0,$1B,$31,$3A,$61,$A0,$A0
            .byte $A0,$A0,$A0,$39,$5A,$A0,$A0,$A0,$62,$A0,$1B,$32,$31,$3A,$38,$38
            .byte $35,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$1F,$A0,$A0,$A0,$A0,$A0,$A0,$A0
            .byte $A0,$54,$33,$0F,$0F,$35,$A0,$A0,$A0,$A0,$A0,$32,$A0,$A0,$A0,$A0
            .byte $A0,$A0,$33,$32,$31,$38,$38,$32,$31,$35,$55,$54,$A0,$A0,$47,$48
            .byte $49,$4A,$4B,$4C,$A0,$54,$A0,$55,$54,$33,$3A,$32,$0F,$3A,$35,$A0
            .byte $55,$54,$1A,$31,$78,$A0,$A0,$A0,$A0,$33,$31,$31,$32,$57,$A0,$A0
            .byte $A0,$A0,$A0,$A0,$A0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0F,$04,$12
            .byte $05,$57,$45,$4C,$43,$4F,$4D,$45,$20,$54,$4F,$20,$54,$48,$45,$20
            .byte $47,$41,$4D,$45,$20,$4F,$46,$20,$43,$48,$49,$4C,$4C,$45,$52,$2E
            .byte $0D,$1F,$12,$11,$11,$52,$45,$53,$43,$55,$45,$20,$59,$4F,$55,$52
            .byte $20,$47,$49,$52,$4C,$46,$52,$49,$45,$4E,$44,$20,$46,$52,$4F,$4D
            .byte $20,$54,$48,$45,$20,$48,$41,$55,$4E,$54,$45,$44,$20,$11,$20,$20
            .byte $20,$20,$20,$48,$4F,$55,$53,$45,$20,$41,$4E,$44,$20,$52,$45,$54
            .byte $55,$52,$4E,$20,$54,$4F,$20,$59,$4F,$55,$52,$20,$43,$41,$52,$2E
            .byte $0D,$12,$9E,$11,$08,$20,$20,$20,$20,$55,$53,$45,$20,$54,$48,$45
            .byte $20,$4B,$45,$59,$53,$20,$5A,$2C,$20,$43,$2C,$20,$3F,$20,$41,$4E
            .byte $44,$20,$53,$48,$49,$46,$54,$2C,$0D,$12,$11,$20,$20,$20,$20,$20
            .byte $20,$20,$4F,$52,$20,$41,$20,$4A,$4F,$59,$53,$54,$49,$43,$4B,$20
            .byte $49,$4E,$20,$50,$4F,$52,$54,$20,$54,$57,$4F,$2E,$01,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00

; Memory $7EF1

l_7EF1
                    STA $7EF0                       ; (7EF1) Store A to $7EF0
                    LDA Sprite_upper_X              ; (7EF4) Load A with $D010
                    AND #$FE                        ; (7EF7) Logical AND with Accumulator and #$FE (254 / 11111110)
                    ORA $7EF0                       ; (7EF9) Logical OR with Accumulator and $7EF0
                    STA Sprite_upper_X              ; (7EFC) Store A to $D010
                    RTS                             ; (7EFF) Return from Subroutine

l_7F00
                    DEC $5A15                       ; (7F00) Decrement $5A15
                    BEQ l_7F06                      ; (7F03) Branch to $7F06 if Equal
                    RTS                             ; (7F05) Return from Subroutine

l_7F06
                    NOP                             ; (7F06) No operation
                    NOP                             ; (7F07) No operation
                    NOP                             ; (7F08) No operation
                    LDA #$03                        ; (7F09) Set A to #$03 (3 / 00000011)
                    STA SpriteEnableRegister        ; (7F0B) Store A to $D015
                    LDY #$73                        ; (7F0E) Load Y with #$73 (115 / 01110011)
                    LDA ($11),Y                     ; (7F10) Load A with ($11),Y
                    TAX                             ; (7F12) Transfer A to X
                    CPX #$12                        ; (7F13) Subtract #$12 from X (18 / 00010010)
                    BNE l_7F19                      ; (7F15) Branch to $7F19 if Not Equal
                    LDX #$FE                        ; (7F17) Set X to #$FE (254 / 11111110)

l_7F19
                    JMP l_7680                      ; (7F19) Jump to $7680

; Memory $7F1C
            .byte $70,$57,$60,$00

; Memory $7F20

l_7F20
                    STA $4516                       ; (7F20) Store A to $4516
                    STA Sprite0_X                   ; (7F23) Store A to $D000
                    RTS                             ; (7F26) Return from Subroutine

l_7F27
                    STA $4517                       ; (7F27) Store A to $4517
                    STA Sprite0_Y                   ; (7F2A) Store A to $D001
                    RTS                             ; (7F2D) Return from Subroutine

l_7F2E
                    STA $4518                       ; (7F2E) Store A to $4518
                    JSR l_7EF1                      ; (7F31) Jump to Subroutine at $7EF1
                    RTS                             ; (7F34) Return from Subroutine

; Memory $7F35
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00

; Memory $7F50

l_7F50
                    LDA $FC                         ; (7F50) Load A with $FC
                    NOP                             ; (7F52) No operation
                    CLC                             ; (7F53) Clear Carry Flag
                    ADC #$D4                        ; (7F54) Add with Carry with #$D4 (212 / 11010100)
                    STA $FC                         ; (7F56) Store A to $FC
                    LDA ($FB),Y                     ; (7F58) Load A with ($FB),Y
                    AND #$04                        ; (7F5A) Logical AND with Accumulator and #$04 (4 / 00000100)
                    TAX                             ; (7F5C) Transfer A to X
                    LDA BoyGirlToggle                       ; (7F5D) Load A with BoyGirlToggle. #00 = Boy / #01 = Girl.
                    BEQ l_7F67                      ; (7F60) Branch to $7F67 if Equal
                    CPX #$00                        ; (7F62) Subtract #$00 from X (0 / 00000000)
                    BEQ l_7F6C                      ; (7F64) Branch to $7F6C if Equal
                    RTS                             ; (7F66) Return from Subroutine

l_7F67
                    CPX #$04                        ; (7F67) Subtract #$04 from X (4 / 00000100)
                    BEQ l_7F6C                      ; (7F69) Branch to $7F6C if Equal
                    RTS                             ; (7F6B) Return from Subroutine

l_7F6C
                    LDA $FC                         ; (7F6C) Load A with $FC
                    SEC                             ; (7F6E) Set Carry Flag
                    SBC #$D4                        ; (7F6F) Subtract with Carry #$D4 (212 / 11010100)
                    STA $FC                         ; (7F71) Store A to $FC
                    LDA #$A0                        ; (7F73) Set A to #$A0 (160 / 10100000)
                    STA ($FB),Y                     ; (7F75) Store A to ($FB),Y
                    JMP l_5B5E                      ; (7F77) Jump to $5B5E

; Memory $7F7A
            .byte $EA,$EA,$EA,$EA,$EA,$EA

; Memory $7F80

l_7F80
                    DEC $5A16                       ; (7F80) Decrement $5A16
                    BNE l_7FAD                      ; (7F83) Branch to $7FAD if Not Equal
                    LDA #$28                        ; (7F85) Set A to #$28 (40 / 00101000)
                    STA $5A16                       ; (7F87) Store A to $5A16
                    LDY #$5D                        ; (7F8A) Load Y with #$5D (93 / 01011101)
                    LDX #$00                        ; (7F8C) Set X to #$00 (0 / 00000000)

l_7F8E
                    INY                             ; (7F8E) Increment Y Register
                    LDA ($11),Y                     ; (7F8F) Load A with ($11),Y
                    STA $FB                         ; (7F91) Store A to $FB
                    INY                             ; (7F93) Increment Y Register
                    LDA ($11),Y                     ; (7F94) Load A with ($11),Y
                    CLC                             ; (7F96) Clear Carry Flag
                    ADC #$D4                        ; (7F97) Add with Carry with #$D4 (212 / 11010100)
                    STA $FC                         ; (7F99) Store A to $FC
                    TYA                             ; (7F9B) Transfer Y to A
                    PHA                             ; (7F9C) Push Accumulator to Stack
                    LDY #$00                        ; (7F9D) Load Y with #$00 (0 / 00000000)
                    LDA ($FB),Y                     ; (7F9F) Load A with ($FB),Y
                    SEC                             ; (7FA1) Set Carry Flag
                    SBC #$08                        ; (7FA2) Subtract with Carry #$08 (8 / 00001000)
                    STA ($FB),Y                     ; (7FA4) Store A to ($FB),Y
                    PLA                             ; (7FA6) Pull Accumulator from Stack
                    TAY                             ; (7FA7) Transfer A to Y
                    INX                             ; (7FA8) Increment X
                    CPX #$0A                        ; (7FA9) Subtract #$0A from X (10 / 00001010)
                    BNE l_7F8E                      ; (7FAB) Branch to $7F8E if Not Equal

l_7FAD
                    RTS                             ; (7FAD) Return from Subroutine

l_7FAE
                    JSR l_538E                      ; (7FAE) Jump to Subroutine at $538E
                    JSR l_7F80                      ; (7FB1) Jump to Subroutine at $7F80
                    RTS                             ; (7FB4) Return from Subroutine

; Memory $7FB5
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$28,$04,$F0,$07,$00
            .byte $EC,$00,$00,$00,$78,$00,$E0,$00,$E4,$00,$E8,$00,$EC,$00,$00,$00
            .byte $00,$00,$00,$4E,$3A,$41,$49,$50,$2C,$44,$24,$55,$FF,$FF,$FF,$FF
            .byte $FF,$FF,$FF,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$55,$55,$55,$55,$55
            .byte $55,$55,$55,$F7,$3F,$F9,$FB,$CF,$F8,$DF,$FF,$BF,$D3,$9F,$DC,$F7
            .byte $3F,$FD,$CF,$CF,$E3,$0F,$F3,$DF,$93,$FC,$2F,$DC,$FE,$37,$CC,$FF
            .byte $CF,$FD,$B3,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$30,$0C
            .byte $20,$30,$80,$00,$00,$00,$0C,$20,$08,$38,$02,$03,$0F,$33,$2F,$23
            .byte $F7,$8F,$FC,$C0,$F0,$3C,$F4,$C0,$2F,$FC,$CF,$C0,$F0,$FF,$BF,$FB
            .byte $FF,$F7,$F7,$00,$00,$00,$C0,$F0,$FC,$B7,$F7,$FF,$FF,$DF,$FF,$FF
            .byte $FB,$FF,$FF,$FF,$BE,$BB,$FB,$7E,$DF,$DF,$FF,$FF,$FF,$F7,$EF,$EF
            .byte $FF,$FF,$FF,$F3,$3F,$F7,$2C,$0F,$38,$0F,$03,$CF,$3C,$EF,$F4,$30
            .byte $CC,$F0,$00,$F7,$F7,$FF,$FB,$BF,$FF,$F0,$C0,$F7,$B7,$FC,$F0,$C0
            .byte $00,$00,$00,$FF,$F7,$DF,$DF,$7E,$DE,$FF,$FF,$FF,$ED,$BF,$FF,$FF
            .byte $EB,$DF,$FF,$38,$BE,$BF,$EB,$7F,$DD,$DB,$3C,$00,$00,$00,$00,$00
            .byte $CE,$7D,$DB,$03,$03,$0C,$0C,$00,$00,$00,$00,$03,$02,$03,$01,$03
            .byte $03,$00,$03,$0F,$0F,$0B,$0F,$0F,$0D,$0F,$07,$FF,$FF,$10,$10,$10
            .byte $10,$10,$10,$00,$FF,$FF,$10,$10,$10,$10,$10,$00,$00,$FF,$FF,$10
            .byte $10,$10,$10,$00,$00,$00,$04,$10,$10,$40,$40,$F0,$F0,$E0,$00,$00
            .byte $00,$00,$00,$C0,$40,$C0,$80,$C0,$C0,$00,$C0,$03,$03,$37,$3F,$35
            .byte $3F,$03,$03,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$10,$10
            .byte $00,$00,$00,$1A,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$BF,$AF,$EF,$EF,$FB,$FB,$FB,$FF,$FF,$FF,$DE,$DD,$F9
            .byte $BB,$BB,$FD,$07,$07,$1E,$1D,$14,$37,$B9,$F7,$3F,$FE,$EF,$FB,$BB
            .byte $FB,$EF,$3F,$E0,$E0,$78,$B8,$28,$EC,$9D,$EF,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FF,$DF,$DB,$FF
            .byte $EF,$FF,$FF,$FF,$FF,$FF,$CF,$FF,$EF,$F7,$EF,$FF,$BF,$9F,$DB,$F7
            .byte $F7,$DF,$F7,$55,$00,$00,$20,$00,$04,$08,$00,$AA,$FF,$EE,$DE,$7E
            .byte $FC,$E0,$80,$AA,$FF,$77,$7B,$7E,$3F,$07,$01,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$04,$10
            .byte $10,$40,$40,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $02,$00,$00,$00,$3F,$FF,$FD,$F6,$FA,$0A,$02,$FF,$FF,$FF,$7F,$9F
            .byte $AF,$A0,$80,$BF,$BF,$BF,$BF,$BF,$02,$00,$00,$EF,$AF,$EF,$EF,$EF
            .byte $EF,$00,$00,$EF,$AF,$EF,$D7,$69,$AA,$AA,$28,$C0,$F0,$FC,$FF,$FF
            .byte $FF,$00,$00,$FF,$00,$02,$00,$00,$00,$00,$00,$02,$30,$00,$00,$00
            .byte $00,$00,$00,$C3,$02,$30,$00,$00,$00,$00,$02,$C3,$62,$26,$30,$00
            .byte $00,$00,$00,$C1,$C3,$63,$66,$30,$00,$00,$00,$81,$C1,$C3,$C3,$C0
            .byte $00,$00,$00,$C0,$C0,$C0,$80,$C0,$C0,$80,$00,$00,$00,$3C,$FF,$FF
            .byte $18,$18,$18,$30,$FC,$EC,$20,$20,$20,$20,$20,$00,$28,$82,$82,$55
            .byte $FF,$FF,$3C,$1C,$1C,$7F,$7F,$1C,$1C,$1C,$1C,$01,$03,$0F,$1B,$37
            .byte $DC,$B0,$E0,$FF,$FB,$DF,$FD,$FB,$00,$00,$00,$00,$0F,$F7,$DF,$DD
            .byte $DF,$00,$00,$00,$00,$00,$FB,$EF,$FF,$FF,$DF,$C0,$E0,$F0,$D8,$EC
            .byte $3B,$0D,$07,$03,$0F,$3F,$3F,$2B,$FF,$FD,$FF,$C0,$F0,$FC,$FC,$BC
            .byte $DF,$F7,$F7,$00,$30,$20,$10,$1F,$3C,$60,$80,$AA,$FC,$FF,$1F,$FF
            .byte $CB,$37,$F3,$00,$0F,$3F,$17,$FC,$F0,$30,$E0,$30,$10,$30,$10,$30
            .byte $10,$30,$10,$E3,$1F,$ED,$DE,$E8,$DF,$6D,$DF,$FF,$10,$30,$10,$30
            .byte $10,$30,$10,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01
            .byte $0F,$18,$10,$C0,$70,$F8,$18,$1C,$0E,$7F,$C7,$00,$00,$F0,$1E,$03
            .byte $1C,$70,$C0,$00,$00,$01,$07,$1D,$6E,$F8,$60,$00,$00,$80,$E3,$DD
            .byte $77,$3C,$00,$00,$80,$C0,$C0,$A0,$F1,$7B,$2E,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$93,$83,$8F,$92,$85
            .byte $A0,$B0,$B0,$B0,$B0,$B0,$B0,$A0,$A0,$8D,$81,$87,$89,$83,$A0,$83
            .byte $92,$8F,$93,$93,$85,$93,$A0,$B0,$B0,$A0,$88,$89,$A0,$B0,$B0,$B0
            .byte $B0,$B0,$B0,$85,$8E,$85,$92,$87,$99,$A9,$A9,$A9,$A9,$A9,$A9,$A9
            .byte $A9,$A9,$A9,$A9,$A9,$A9,$A9,$A9,$A9,$A9,$A9,$A9,$A9,$A9,$A9,$A9
            .byte $A9,$A9,$A9,$A9,$A9,$A9,$A9,$A9,$A9,$A9,$A1,$04,$05,$04,$06,$63
            .byte $06,$04,$05,$06,$04,$05,$04,$05,$12,$A0,$A0,$A0,$A0,$A0,$A0,$A0
            .byte $55,$A0,$62,$A0,$62,$A0,$A0,$A0,$62,$A0,$11,$04,$05,$04,$05,$04
            .byte $05,$63,$04,$05,$06,$06,$05,$63,$05,$06,$04,$05,$04,$04,$06,$12
            .byte $A0,$A0,$A0,$A0,$A0,$A0,$56,$0A,$05,$03,$63,$0B,$62,$A0,$A0,$A0
            .byte $62,$A0,$A0,$11,$04,$05,$05,$04,$05,$63,$05,$04,$05,$04,$05,$63
            .byte $04,$04,$05,$04,$05,$04,$12,$A0,$A0,$A0,$A0,$A0,$A0,$0A,$05,$03
            .byte $05,$03,$63,$05,$63,$0B,$55,$A0,$62,$A0,$A0,$56,$11,$04,$04,$05
            .byte $04,$63,$04,$0F,$0F,$05,$06,$63,$0F,$05,$04,$04,$04,$12,$1C,$1D
            .byte $1E,$1E,$1E,$1D,$1C,$03,$03,$05,$03,$03,$63,$15,$63,$0F,$1C,$1D
            .byte $1E,$1E,$1E,$1D,$1C,$04,$05,$04,$0F,$63,$0F,$60,$60,$60,$60,$63
            .byte $60,$60,$60,$60,$3C,$4D,$4D,$4D,$4D,$4D,$4D,$4D,$60,$60,$60,$60
            .byte $60,$60,$63,$60,$63,$60,$60,$4D,$4D,$4D,$4D,$4D,$4D,$4D,$3D,$60
            .byte $60,$63,$60,$05,$0F,$05,$0F,$63,$05,$06,$12,$A0,$A0,$A0,$A0,$A0
            .byte $A0,$A0,$A0,$0A,$06,$03,$03,$05,$03,$03,$63,$03,$63,$03,$04,$0B
            .byte $A0,$A0,$A0,$A0,$A0,$A0,$56,$0F,$05,$04,$0F,$0F,$0F,$0F,$12,$62
            .byte $A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$05,$03,$05,$04,$03
            .byte $03,$0F,$63,$05,$63,$04,$05,$03,$A0,$A0,$09,$A0,$A0,$A0,$A0,$11
            .byte $04,$0F,$0F,$32,$32,$38,$56,$62,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0
            .byte $A0,$A0,$A0,$04,$05,$03,$03,$0F,$03,$03,$0F,$03,$63,$03,$04,$12
            .byte $A0,$09,$A0,$5C,$55,$55,$09,$08,$54,$34,$31,$3A,$32,$39,$A0,$62
            .byte $A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$11,$06,$05,$03,$05
            .byte $0F,$04,$03,$0F,$63,$03,$12,$A0,$A0,$A0,$5C,$7B,$59,$59,$59,$7C
            .byte $59,$32,$31,$38,$38,$38,$A0,$A0,$09,$08,$A0,$A0,$A0,$A0,$5F,$A0
            .byte $A0,$A0,$A0,$A0,$11,$03,$05,$03,$03,$0F,$0F,$03,$63,$13,$A0,$A0
            .byte $A0,$09,$58,$A0,$A0,$A0,$19,$A0,$A0,$31,$31,$32,$3A,$39,$55,$56
            .byte $58,$A0,$A0,$A0,$A0,$58,$7C,$5F,$A0,$A0,$09,$08,$A0,$A0,$56,$11
            .byte $03,$0F,$0F,$05,$12,$56,$5F,$A0,$A0,$A0,$08,$A0,$A0,$A0,$17,$7C
            .byte $5B,$32,$32,$31,$32,$38,$59,$59,$5C,$55,$A0,$5F,$58,$08,$09,$A0
            .byte $A0,$A0,$A0,$79,$54,$09,$A0,$A0,$09,$39,$31,$18,$54,$58,$A0,$09
            .byte $5B,$58,$A0,$A0,$19,$5C,$09,$78,$54,$32,$31,$0F,$38,$38,$5B,$5B
            .byte $5A,$5A,$5A,$59,$59,$5B,$58,$A0,$A0,$A0,$19,$7B,$59,$7C,$5A,$5A
            .byte $59,$3A,$32,$5B,$59,$5A,$5A,$59,$5C,$5F,$A0,$A0,$7A,$58,$59,$59
            .byte $34,$34,$32,$3A,$39,$12,$A0,$5C,$A0,$A0,$A0,$09,$A0,$62,$5C,$A0
            .byte $A0,$A0,$A0,$A0,$A0,$5C,$09,$54,$A0,$31,$3A,$A0,$58,$20,$A0,$A0
            .byte $A0,$A0,$A0,$A0,$A0,$56,$A0,$A0,$1B,$31,$31,$38,$38,$35,$09,$54
            .byte $08,$09,$A0,$58,$A0,$62,$56,$A0,$A0,$A0,$A0,$A0,$79,$5B,$59,$59
            .byte $5A,$3A,$32,$61,$20,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0
            .byte $A0,$32,$32,$32,$31,$32,$59,$59,$7C,$5A,$5A,$5C,$A0,$62,$A0,$A0
            .byte $A0,$A0,$A0,$A0,$A0,$62,$A0,$A0,$1A,$32,$0F,$A0,$08,$18,$A0,$5F
            .byte $A0,$A0,$A0,$A0,$09,$55,$09,$A0,$55,$34,$32,$3A,$39,$3A,$5C,$A0
            .byte $A0,$A0,$A0,$A0,$A0,$62,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$62,$09,$08
            .byte $7A,$3A,$0F,$58,$7D,$5B,$61,$20,$0A,$05,$0B,$A0,$7A,$5A,$5B,$5B
            .byte $5A,$32,$31,$38,$3A,$38,$21,$A0,$A0,$A0,$A0,$A0,$A0,$62,$A0,$A0
            .byte $A0,$A0,$A0,$A0,$A0,$62,$58,$5C,$1A,$31,$0F,$20,$62,$A0,$A0,$A0
            .byte $06,$05,$12,$A0,$A0,$A0,$62,$09,$08,$32,$32,$38,$39,$31,$21,$A0
            .byte $A0,$A0,$A0,$A0,$A0,$62,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$62,$A0,$A0
            .byte $5C,$32,$3A,$A0,$62,$A0,$A0,$09,$11,$31,$61,$A0,$A0,$A0,$62,$58
            .byte $5C,$31,$31,$38,$32,$38,$21,$A0,$A0,$A0,$A0,$A0,$A0,$62,$A0,$A0
            .byte $A0,$A0,$A0,$A0,$A0,$62,$A0,$A0,$1A,$3A,$3A,$54,$62,$A0,$A0,$A0
            .byte $5C,$32,$A0,$A0,$A0,$A0,$62,$A0,$1A,$31,$32,$39,$38,$3A,$21,$A0
            .byte $A0,$A0,$A0,$A0,$A0,$62,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$62,$A0,$A0
            .byte $1B,$31,$3A,$61,$A0,$A0,$A0,$A0,$A0,$39,$5A,$A0,$A0,$A0,$62,$A0
            .byte $1B,$32,$31,$3A,$38,$38,$35,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$1F,$A0
            .byte $A0,$A0,$A0,$A0,$A0,$A0,$A0,$54,$33,$0F,$0F,$35,$A0,$A0,$A0,$A0
            .byte $A0,$32,$A0,$A0,$A0,$A0,$A0,$A0,$33,$32,$31,$38,$38,$32,$31,$35
            .byte $55,$54,$A0,$A0,$47,$48,$49,$4A,$4B,$4C,$A0,$54,$A0,$55,$54,$33
            .byte $3A,$32,$0F,$3A,$35,$A0,$55,$54,$1A,$31,$78,$A0,$A0,$54,$A0,$33
            .byte $31,$31,$32,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0
            .byte $A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$11,$11,$11,$11,$11
            .byte $11,$71,$77,$77,$77,$77,$77,$77,$77,$77,$11,$11,$11,$11,$11,$22
            .byte $22,$22,$22,$72,$77,$77,$77,$55,$55,$55,$55,$55,$55,$55,$55,$D5
            .byte $55,$55,$55,$DD,$DD,$DD,$DD,$DD,$DD,$DD,$BB,$BB,$BB,$AB,$9B,$9B
            .byte $BB,$9B,$DB,$DD,$DD,$DD,$DD,$DD,$DD,$DD,$DD,$DD,$DD,$9D,$99,$9E
            .byte $A9,$DD,$DD,$9D,$99,$99,$9E,$DD,$DD,$DD,$DD,$DD,$DD,$DD,$DD,$DD
            .byte $DD,$99,$99,$99,$DD,$DD,$DD,$DD,$AD,$99,$99,$DA,$DD,$DD,$DD,$DD
            .byte $DD,$DD,$DD,$DD,$CD,$CC,$CC,$CC,$DD,$DD,$DD,$DD,$CD,$CC,$CC,$CC
            .byte $DD,$DD,$DD,$DD,$DD,$DD,$DD,$DD,$F7,$77,$77,$D7,$DD,$DD,$DD,$DD
            .byte $DD,$F7,$77,$77,$D7,$DD,$DD,$DD,$DD,$DD,$DD,$BB,$9B,$BB,$BB,$DD
            .byte $DD,$DD,$DD,$DD,$DD,$9D,$BB,$BB,$AB,$DD,$DD,$DD,$DD,$D9,$BB,$BB
            .byte $9B,$BB,$BB,$DD,$DD,$DD,$DD,$DD,$DD,$9D,$DB,$BB,$BE,$DD,$DD,$AA
            .byte $AA,$B9,$BB,$BB,$9B,$BB,$BB,$DD,$DD,$DD,$DD,$DD,$DD,$9D,$DD,$AA
            .byte $DA,$CD,$AA,$AA,$BA,$B9,$BB,$BB,$BE,$AA,$BB,$DD,$DD,$DD,$DD,$DD
            .byte $DD,$9B,$AB,$AA,$AA,$AA,$AA,$AA,$9A,$D9,$9D,$BB,$DB,$BB,$BB,$DB
            .byte $DD,$DD,$DD,$DD,$BD,$BB,$AD,$FD,$D9,$77,$AA,$AA,$CA,$AA,$22,$2D
            .byte $AA,$2D,$D2,$2D,$AA,$DD,$DD,$DD,$DA,$DF,$DF,$B9,$DB,$AA,$AA,$AA
            .byte $AA,$AA,$DA,$AD,$DD,$BB,$BB,$CA,$AD,$DF,$AA,$CD,$AA,$AD,$DA,$DB
            .byte $DA,$CA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$DD,$AA,$AA,$AA,$AA,$AA
            .byte $AA,$AA,$DD,$AD,$AA,$AA,$AA,$AA,$FA,$FA,$F7,$DD,$A9,$AA,$AD,$22
            .byte $DA,$DC,$AA,$AB,$BA,$BB,$DD,$AD,$BA,$AB,$AA,$AA,$DA,$DC,$BD,$BA
            .byte $A9,$AB,$DA,$AB,$AA,$AA,$AA,$AA,$B7,$77,$99,$77,$EB,$BB,$AA,$AA
            .byte $AA,$AA,$AA,$AA,$A9,$AA,$AA,$AA,$A9,$DA,$AA,$DA,$AD,$AD,$9A,$DA
            .byte $DA,$AA,$AA,$AA,$AA,$4A,$B4,$BB,$B9,$7E,$77,$BB,$D9,$AD,$AA,$AA
            .byte $AA,$DA,$DD,$AB,$AA,$AA,$AA,$AA,$AA,$99,$99,$3B,$39,$7B,$77,$BB
            .byte $A9,$DA,$AA,$9A,$B7,$DB,$DD,$7A,$97,$DD,$AA,$AA,$AA,$44,$24,$3B
            .byte $39,$7B,$77,$FB,$29,$AF,$AA,$97,$77,$DD,$AA,$BB,$9B,$AA,$AA,$AA
            .byte $AA,$99,$B9,$3B,$3F,$7B,$7D,$FB,$29,$DA,$AA,$9C,$6B,$A6,$AA,$6D
            .byte $96,$D6,$AA,$AA,$AA,$4A,$B4,$3C,$3F,$7B,$77,$FB,$A9,$AA,$AA,$AA
            .byte $BB,$BB,$AA,$BA,$9B,$AA,$AA,$AA,$AA,$AC,$C4,$3B,$EC,$7B,$77,$FF
            .byte $AA,$AC,$AA,$AA,$BB,$BB,$9A,$99,$AB,$AA,$AA,$AA,$AA,$AA,$CC,$BD
            .byte $BB,$BB,$AB,$AC,$CA,$AA,$AA,$AA,$AA,$DC,$AA,$D9,$AC,$AA,$AA,$BB
            .byte $BB,$BB,$BB,$BB,$00,$00,$00,$00,$00,$00,$00,$FF,$FF,$FF,$FF,$FF
            .byte $FF,$FF,$FF,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$55,$55,$55,$55,$55
            .byte $55,$55,$55,$6F,$DF,$EF,$ED,$EF,$EF,$EF,$EF,$EF,$EF,$EF,$EF,$6F
            .byte $DF,$E7,$ED,$FF,$FF,$FF,$55,$FF,$FF,$FF,$FF,$FC,$FC,$FC,$54,$FF
            .byte $FF,$FF,$FF,$00,$FF,$FF,$00,$00,$00,$00,$00,$0C,$3F,$3F,$1C,$04
            .byte $14,$04,$04,$FF,$FF,$FF,$40,$FC,$FC,$FC,$FC,$03,$8F,$BF,$2F,$2F
            .byte $F7,$FF,$FF,$C0,$F2,$FE,$F4,$F4,$EF,$FF,$FF,$FC,$FC,$FC,$04,$FC
            .byte $FC,$FC,$FC,$FF,$FD,$DF,$FF,$FB,$BF,$F7,$FF,$00,$E3,$04,$F8,$04
            .byte $00,$08,$F0,$03,$FF,$02,$3F,$01,$03,$03,$01,$D3,$FC,$C2,$F0,$C3
            .byte $FC,$C0,$E0,$FF,$FF,$F7,$2F,$2F,$3F,$0F,$03,$FF,$FF,$EF,$F4,$F4
            .byte $FC,$F0,$C0,$00,$00,$2A,$AA,$AA,$AA,$AA,$AA,$00,$00,$A0,$A8,$A8
            .byte $A8,$A8,$A8,$FF,$00,$FF,$FF,$FF,$FF,$FF,$55,$FF,$FC,$F0,$C0,$00
            .byte $00,$00,$00,$FF,$3F,$0F,$03,$00,$00,$00,$00,$FF,$FF,$FF,$FF,$FF
            .byte $3F,$0F,$03,$00,$00,$00,$00,$00,$00,$00,$00,$EA,$FA,$FE,$FF,$FF
            .byte $FF,$FF,$FF,$AA,$AA,$AA,$AA,$EA,$FA,$FE,$FF,$E0,$F0,$78,$3C,$06
            .byte $07,$2A,$2A,$AA,$EA,$EA,$FA,$FA,$FE,$FE,$FF,$FF,$FF,$FF,$FF,$FF
            .byte $FC,$F0,$C0,$00,$00,$00,$00,$03,$0F,$3F,$FF,$CF,$FF,$CF,$FF,$CF
            .byte $55,$55,$55,$AA,$AA,$AA,$AA,$AB,$AF,$BF,$FF,$AB,$AF,$BF,$FF,$FF
            .byte $FF,$FF,$FF,$FF,$FE,$FC,$F8,$F0,$E0,$C0,$80,$FF,$7F,$3F,$1F,$0F
            .byte $07,$03,$01,$00,$00,$00,$00,$C0,$F0,$FC,$FF,$C0,$F0,$FC,$FF,$FF
            .byte $FF,$FF,$FF,$FF,$FF,$FF,$BF,$AF,$AB,$AA,$AA,$BB,$BB,$BB,$BB,$BB
            .byte $BB,$BB,$BB,$55,$55,$55,$55,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$05,$15,$10,$00,$00,$00,$00,$00,$10,$10
            .byte $00,$00,$00,$1A,$00,$00,$00,$00,$00,$00,$00,$00,$00,$50,$54,$14
            .byte $00,$00,$00,$BF,$AF,$EF,$EF,$FB,$FB,$FB,$FF,$FF,$FF,$DE,$DD,$F9
            .byte $BB,$BB,$FD,$07,$07,$1E,$1D,$14,$37,$B9,$F7,$3F,$FE,$EF,$FB,$BB
            .byte $FB,$EF,$3F,$E0,$E0,$78,$B8,$28,$EC,$9D,$EF,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$3C,$7E,$FF,$FF,$FF,$7E,$3C,$00,$FF,$FF,$DF,$DB,$FF
            .byte $EF,$FF,$FF,$FF,$FF,$FF,$CF,$FF,$EF,$F7,$EF,$FF,$BF,$9F,$DB,$F7
            .byte $F7,$DF,$F7,$55,$00,$00,$20,$00,$04,$08,$00,$AA,$FF,$EE,$DE,$7E
            .byte $FC,$E0,$80,$AA,$FF,$77,$7B,$7E,$3F,$07,$01,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$FF,$FF,$F0,$E0,$D1,$B3,$7F,$FF,$FF,$FF,$FF,$E1,$D3
            .byte $B7,$7F,$FF,$FF,$FF,$0F,$07,$8B,$CD,$FE,$FF,$FF,$FF,$FF,$87,$CB
            .byte $ED,$FE,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FF,$AA,$55,$77
            .byte $FF,$FE,$EA,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$07,$07,$07,$07,$07,$07,$07,$07,$03,$03,$03,$03,$03
            .byte $03,$03,$03,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
            .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
            .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
            .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$00,$00,$3C,$FF,$FF
            .byte $18,$18,$18,$30,$FC,$EC,$20,$20,$20,$20,$20,$00,$00,$3C,$FF,$55
            .byte $AA,$AA,$28,$1C,$1C,$7F,$7F,$1C,$1C,$1C,$1C,$7F,$DF,$F7,$FD,$FF
            .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$7F,$DF,$F7,$FD,$AA,$AA,$AA,$7F,$55
            .byte $F7,$F7,$F7,$00,$00,$00,$00,$00,$AA,$AA,$AA,$00,$E3,$F7,$F7,$83
            .byte $7C,$FE,$FE,$00,$00,$00,$00,$00,$00,$00,$00,$A8,$80,$2A,$AA,$AA
            .byte $AA,$AA,$AA,$AA,$0A,$A2,$A8,$A8,$A8,$A8,$A8,$AA,$FF,$FF,$DF,$FF
            .byte $FB,$F7,$FF,$FF,$FF,$FF,$FF,$FD,$F7,$DF,$7F,$EF,$EF,$EF,$EF,$EF
            .byte $EF,$EF,$EF,$55,$7F,$7F,$7F,$00,$F7,$F7,$F7,$FF,$10,$30,$10,$30
            .byte $10,$30,$10,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$02,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$AB,$AF,$BF,$FF,$FF
            .byte $EF,$EF,$EF,$EA,$FA,$FE,$FF,$FF,$EF,$EF,$EF,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$FD,$F7,$DF,$7F,$FF,$FF,$FF,$FF,$00,$03,$07,$07,$03
            .byte $7C,$FE,$FE,$1C,$E3,$F7,$F7,$83,$7C,$FE,$FE,$00,$E0,$F0,$F0,$80
            .byte $7C,$FE,$FE,$A8,$80,$6A,$6A,$6A,$6A,$AA,$AA,$AA,$25,$95,$95,$95
            .byte $95,$A5,$AF,$00,$00,$C0,$F0,$F0,$F0,$F0,$F0,$00,$00,$03,$0F,$0F
            .byte $0F,$0F,$0F,$00,$00,$00,$00,$00,$00,$00,$00,$F3,$C0,$2A,$AA,$AA
            .byte $AA,$AA,$AA,$FC,$FC,$32,$8A,$8A,$8A,$8A,$8A,$FF,$3F,$8C,$A2,$A2
            .byte $A2,$A2,$A2,$CF,$0F,$A3,$A8,$A8,$A8,$A8,$A8,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$93,$83,$8F,$92,$85
            .byte $A0,$B0,$B0,$B0,$B0,$B0,$B0,$A0,$93,$89,$8C,$96,$85,$92,$A0,$83
            .byte $92,$8F,$93,$93,$85,$93,$A0,$B0,$B0,$A0,$88,$89,$A0,$B0,$B0,$B0
            .byte $B0,$B0,$B0,$85,$8E,$85,$92,$87,$99,$A9,$A9,$A9,$A9,$A9,$A9,$A9
            .byte $A9,$A9,$A9,$A9,$A9,$A9,$A9,$A9,$A9,$A9,$A9,$A9,$A9,$A9,$A9,$A9
            .byte $A9,$A9,$A9,$A9,$A9,$A9,$A9,$A9,$A9,$A9,$A1,$62,$00,$00,$00,$62
            .byte $00,$00,$62,$1A,$1B,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$21,$22,$62,$00,$00,$62,$00
            .byte $00,$00,$62,$62,$00,$00,$00,$62,$00,$00,$62,$00,$62,$1A,$1B,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$21
            .byte $22,$62,$00,$62,$00,$00,$62,$00,$00,$00,$62,$62,$00,$41,$00,$62
            .byte $00,$00,$62,$00,$62,$00,$62,$6F,$1B,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$21,$6E,$62,$00,$62,$00,$62,$00,$00,$62,$00
            .byte $43,$00,$62,$62,$00,$00,$00,$62,$00,$00,$62,$00,$62,$42,$62,$62
            .byte $62,$28,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$28,$62,$62,$62
            .byte $44,$62,$00,$62,$00,$00,$62,$00,$00,$00,$62,$62,$00,$00,$00,$62
            .byte $00,$00,$62,$00,$62,$00,$62,$62,$62,$28,$02,$0D,$32,$3C,$A0,$A0
            .byte $11,$0D,$0D,$02,$28,$62,$62,$62,$00,$62,$00,$62,$00,$00,$62,$00
            .byte $00,$00,$62,$62,$00,$00,$00,$62,$00,$00,$62,$00,$62,$00,$62,$62
            .byte $62,$28,$02,$0D,$12,$07,$0A,$0B,$07,$11,$0D,$02,$28,$62,$62,$62
            .byte $00,$62,$00,$62,$00,$00,$62,$00,$00,$00,$62,$62,$00,$00,$00,$62
            .byte $00,$00,$62,$00,$62,$00,$62,$62,$62,$28,$02,$0D,$0E,$A0,$11,$12
            .byte $A0,$A0,$0D,$02,$28,$62,$62,$62,$00,$62,$00,$62,$00,$00,$62,$00
            .byte $00,$00,$62,$62,$00,$00,$00,$62,$00,$00,$62,$00,$62,$00,$62,$48
            .byte $62,$28,$02,$0D,$A0,$A0,$0F,$10,$08,$A0,$0D,$02,$28,$62,$62,$62
            .byte $00,$62,$00,$62,$00,$00,$62,$00,$00,$00,$62,$62,$00,$00,$00,$62
            .byte $00,$00,$62,$00,$62,$00,$62,$00,$62,$29,$29,$29,$29,$29,$29,$29
            .byte $29,$29,$29,$29,$29,$62,$62,$62,$00,$62,$00,$62,$00,$00,$62,$00
            .byte $00,$00,$62,$62,$00,$00,$00,$62,$00,$00,$62,$00,$62,$00,$62,$00
            .byte $23,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$24,$62,$62
            .byte $00,$62,$00,$62,$00,$00,$62,$00,$00,$00,$62,$62,$00,$00,$00,$62
            .byte $00,$00,$62,$00,$62,$00,$62,$23,$72,$5C,$5C,$5C,$5C,$5C,$5C,$A0
            .byte $5C,$5C,$5C,$5C,$5C,$74,$24,$62,$00,$62,$00,$62,$00,$00,$62,$00
            .byte $00,$00,$62,$62,$00,$00,$00,$62,$00,$00,$62,$00,$62,$00,$23,$72
            .byte $73,$73,$73,$73,$73,$73,$73,$A0,$73,$73,$73,$73,$73,$73,$74,$24
            .byte $00,$62,$00,$62,$00,$00,$62,$00,$00,$00,$62,$62,$00,$00,$00,$62
            .byte $00,$00,$62,$00,$62,$23,$A0,$73,$73,$73,$73,$73,$73,$73,$73,$A0
            .byte $73,$73,$73,$73,$73,$73,$74,$A0,$24,$62,$00,$62,$00,$00,$62,$00
            .byte $00,$00,$62,$62,$00,$00,$61,$71,$15,$15,$15,$15,$15,$15,$15,$15
            .byte $15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15,$15
            .byte $15,$15,$15,$15,$15,$15,$58,$59,$00,$00,$62,$62,$61,$71,$1E,$16
            .byte $A0,$13,$7B,$7C,$7D,$7A,$7B,$7C,$7D,$7A,$7B,$7C,$7D,$7A,$7B,$A0
            .byte $A0,$7C,$7D,$7A,$7B,$7C,$7D,$7A,$7B,$7C,$7D,$7A,$7B,$14,$17,$18
            .byte $58,$59,$62,$71,$1E,$16,$A0,$A0,$13,$76,$7C,$7D,$7A,$7B,$7D,$7A
            .byte $7B,$7C,$7D,$7A,$7B,$7C,$7D,$A0,$A0,$7A,$7B,$7C,$7D,$7A,$7B,$7C
            .byte $7D,$7A,$7B,$7C,$7D,$7A,$14,$A0,$17,$18,$58,$16,$A0,$A0,$A0,$13
            .byte $5F,$5E,$5F,$5E,$5F,$5E,$5F,$5E,$5F,$5E,$5F,$5E,$5F,$5E,$14,$A0
            .byte $A0,$09,$5E,$5F,$5E,$5F,$5E,$5F,$5E,$5F,$5E,$76,$75,$5F,$5E,$14
            .byte $A0,$A0,$17,$A0,$A0,$A0,$13,$76,$75,$76,$75,$5F,$5E,$5F,$5E,$76
            .byte $75,$5F,$5E,$76,$75,$5F,$0C,$A0,$A0,$5E,$5F,$5E,$76,$75,$76,$75
            .byte $5F,$5E,$5F,$5E,$5F,$5E,$5F,$5E,$14,$A0,$A0,$A0,$A0,$13,$5F,$5E
            .byte $5F,$5E,$5F,$5E,$5F,$5E,$5F,$5E,$5F,$5E,$5F,$5E,$5F,$5E,$14,$A0
            .byte $A0,$09,$5E,$5F,$5E,$5F,$5E,$76,$75,$76,$75,$5F,$5E,$5F,$5E,$5F
            .byte $5E,$14,$A0,$A0,$13,$76,$75,$76,$75,$76,$5E,$5F,$5E,$5F,$5E,$76
            .byte $75,$5F,$5E,$5F,$76,$5F,$0C,$A0,$A0,$5E,$5F,$5E,$76,$75,$5F,$5E
            .byte $76,$75,$5F,$5E,$5F,$5E,$76,$75,$76,$75,$14,$13,$5F,$5E,$5F,$5E
            .byte $5F,$5E,$5F,$5E,$5F,$5E,$5F,$5E,$5F,$5E,$5F,$5E,$5F,$5E,$14,$A0
            .byte $A0,$09,$5E,$5F,$5E,$5F,$5E,$5F,$5E,$5F,$5E,$5F,$5E,$5F,$5E,$5F
            .byte $5E,$5F,$5E,$05,$06,$05,$06,$05,$06,$05,$06,$05,$06,$05,$06,$05
            .byte $06,$05,$06,$05,$06,$05,$06,$A0,$A0,$06,$05,$06,$05,$06,$05,$06
            .byte $05,$06,$05,$06,$05,$06,$05,$06,$05,$06,$05,$A0,$A0,$A0,$A0,$A0
            .byte $A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0
            .byte $A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0
            .byte $A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0
            .byte $A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$11,$11,$11,$11,$11
            .byte $11,$71,$77,$77,$77,$77,$77,$77,$77,$77,$11,$11,$11,$11,$11,$22
            .byte $22,$22,$22,$72,$77,$77,$77,$55,$55,$55,$55,$55,$55,$55,$55,$D5
            .byte $55,$55,$55,$CC,$CC,$CC,$CC,$CC,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA
            .byte $AA,$AA,$CC,$CC,$CC,$CC,$CC,$CC,$CC,$CC,$CC,$CC,$CC,$AA,$AA,$AA
            .byte $AA,$AA,$AA,$AA,$AA,$CC,$CC,$CC,$CC,$CC,$CC,$CC,$C4,$CC,$CC,$CC
            .byte $CC,$CC,$AA,$AA,$AA,$AA,$AA,$AA,$CC,$CC,$CC,$CC,$CC,$4C,$CC,$CC
            .byte $CC,$CC,$CC,$C4,$C4,$CC,$BB,$BB,$BB,$BB,$BB,$BB,$CC,$4C,$4C,$CC
            .byte $CC,$CC,$CC,$CC,$CC,$4C,$C4,$C4,$C4,$CC,$FB,$DD,$1D,$DB,$DD,$BF
            .byte $CC,$4C,$4C,$CC,$C4,$C4,$CC,$4C,$44,$4C,$CC,$C4,$C4,$CC,$FB,$DD
            .byte $D4,$4D,$DD,$BF,$CC,$CC,$CC,$CC,$C4,$C4,$CC,$4C,$44,$4C,$CC,$CC
            .byte $C4,$CC,$FB,$2A,$D9,$AD,$A9,$BF,$CC,$CC,$CC,$CC,$C4,$C4,$CC,$4C
            .byte $44,$4C,$CC,$CC,$C4,$CC,$FB,$DA,$A2,$D2,$AC,$BF,$CC,$CC,$CC,$CC
            .byte $C4,$C4,$CC,$4C,$44,$4C,$CC,$CC,$C4,$C6,$EE,$EE,$EE,$EE,$EE,$EE
            .byte $CC,$CC,$CC,$CC,$C4,$C4,$CC,$4C,$44,$4C,$CC,$CC,$C4,$46,$CC,$CC
            .byte $CC,$CC,$CC,$CC,$C4,$4C,$CC,$CC,$C4,$C4,$CC,$4C,$44,$4C,$CC,$C4
            .byte $C4,$26,$22,$22,$22,$2C,$22,$22,$42,$4C,$CC,$CC,$CC,$C4,$CC,$4C
            .byte $44,$4C,$CC,$C4,$44,$22,$22,$22,$22,$2C,$22,$22,$22,$44,$4C,$CC
            .byte $C4,$CC,$CC,$4C,$44,$4C,$CC,$C4,$C4,$22,$22,$22,$22,$2F,$22,$22
            .byte $22,$4C,$4C,$CC,$C4,$C4,$CC,$4C,$C4,$FC,$FF,$FF,$FF,$FF,$FF,$FF
            .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$CF,$CC,$CC,$CC,$4C,$44,$8F,$88
            .byte $88,$88,$88,$88,$88,$AC,$88,$88,$88,$88,$88,$88,$4F,$CC,$CC,$4C
            .byte $44,$FF,$A9,$AA,$AA,$AA,$AA,$AA,$AA,$AC,$AA,$AA,$AA,$AA,$AA,$AA
            .byte $FA,$44,$CC,$44,$4F,$DA,$DD,$DD,$FD,$FF,$FF,$FF,$AF,$AF,$FA,$FF
            .byte $FF,$FF,$AA,$FE,$AA,$FA,$CC,$44,$AD,$99,$99,$DD,$FD,$BB,$FF,$EE
            .byte $AF,$AC,$FF,$EF,$EA,$FA,$AF,$AA,$AA,$AA,$4F,$D4,$DA,$DD,$DD,$FD
            .byte $FF,$FF,$FF,$FF,$AF,$CC,$AA,$AA,$FF,$EE,$EE,$AA,$AA,$AA,$AA,$A4
            .byte $EE,$EE,$DE,$FF,$FF,$FF,$FF,$BF,$AF,$CC,$FF,$BF,$FF,$CF,$FA,$AF
            .byte $EA,$FF,$AF,$DA,$DD,$DD,$FD,$FF,$FF,$FF,$FF,$FF,$AF,$CF,$FA,$FF
            .byte $FF,$FF,$FF,$FF,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA
            .byte $AA,$A4,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$C4,$FC,$CC,$4C,$44
            .byte $44,$44,$44,$44,$44,$44,$44,$44,$FF,$FF,$FF,$CF,$CC,$CC,$2C,$BB
            .byte $BB,$BB,$BB,$BB,$00,$00,$00,$00,$00,$00,$00,$FF,$FF,$FF,$FF,$FF
            .byte $FF,$FF,$FF,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$55,$55,$55,$55,$55
            .byte $55,$55,$55,$45,$4F,$4F,$4F,$05,$C7,$C7,$C7,$00,$00,$00,$E0,$3F
            .byte $04,$04,$04,$51,$73,$73,$73,$50,$F3,$F3,$F3,$55,$7F,$7F,$7F,$55
            .byte $F7,$F7,$F7,$57,$7F,$7F,$7F,$57,$F7,$F7,$F7,$FF,$FF,$DB,$D7,$F3
            .byte $DF,$F7,$FF,$FF,$FF,$FE,$FE,$FC,$F8,$F0,$E0,$03,$0F,$3F,$2F,$2F
            .byte $F7,$FF,$FF,$C0,$F0,$FC,$F4,$F4,$EF,$FF,$FF,$C0,$F0,$FF,$BF,$FB
            .byte $FF,$F7,$F7,$00,$00,$00,$08,$00,$00,$00,$00,$01,$01,$01,$01,$00
            .byte $00,$00,$00,$FF,$BE,$BB,$FB,$7E,$DF,$DF,$FF,$FF,$FF,$F7,$EF,$EF
            .byte $FF,$FF,$FF,$FF,$FF,$F7,$2F,$2F,$3F,$0F,$03,$FF,$FF,$EF,$F4,$F4
            .byte $FC,$F0,$C0,$00,$C0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0C,$00
            .byte $00,$00,$00,$00,$00,$03,$01,$01,$01,$01,$01,$FF,$ED,$BF,$FF,$FF
            .byte $EB,$DF,$FF,$38,$BE,$BF,$EB,$7F,$DD,$DB,$3C,$00,$00,$00,$00,$00
            .byte $CE,$7D,$DB,$55,$F0,$F0,$F0,$F0,$F0,$F0,$F0,$FF,$FF,$7F,$7F,$3F
            .byte $1F,$0F,$07,$55,$50,$F0,$F0,$F0,$F0,$F0,$F0,$FF,$FF,$10,$10,$10
            .byte $10,$10,$10,$00,$FF,$FF,$10,$10,$10,$10,$10,$00,$00,$FF,$FF,$10
            .byte $10,$10,$10,$07,$07,$07,$07,$07,$07,$07,$07,$00,$00,$00,$00,$0F
            .byte $0F,$0F,$06,$55,$4F,$4F,$4F,$4F,$4F,$4F,$4F,$FF,$00,$00,$00,$00
            .byte $00,$00,$00,$FF,$80,$80,$80,$80,$80,$80,$80,$01,$01,$01,$01,$01
            .byte $01,$01,$FF,$80,$80,$80,$80,$80,$80,$80,$FF,$FF,$01,$01,$01,$01
            .byte $01,$01,$01,$FF,$19,$25,$45,$45,$39,$09,$05,$FF,$61,$31,$1D,$1D
            .byte $11,$31,$21,$FF,$01,$09,$11,$11,$21,$01,$01,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$10,$10
            .byte $00,$00,$00,$1A,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$BF,$AF,$EF,$EF,$FB,$FB,$FB,$FF,$FF,$FF,$DE,$DD,$F9
            .byte $BB,$BB,$FD,$07,$07,$1E,$1D,$14,$37,$B9,$F7,$3F,$FE,$EF,$FB,$BB
            .byte $FB,$EF,$3F,$E0,$E0,$78,$B8,$28,$EC,$9D,$EF,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FF,$DF,$DB,$FF
            .byte $EF,$FF,$FF,$FF,$FF,$FF,$CF,$FF,$EF,$F7,$EF,$FF,$BF,$9F,$DB,$F7
            .byte $F7,$DF,$F7,$55,$00,$00,$20,$00,$04,$08,$00,$AA,$FF,$EE,$DE,$7E
            .byte $FC,$E0,$80,$AA,$FF,$77,$7B,$7E,$3F,$07,$01,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$00
            .byte $00,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$FF,$C3,$FF,$C3,$FF,$C3,$FF,$C3,$00,$C3,$FF,$C3,$FF
            .byte $C3,$FF,$C3,$00,$00,$FF,$C3,$FF,$C3,$FF,$C3,$00,$00,$00,$00,$FF
            .byte $C3,$FF,$C3,$00,$00,$00,$00,$00,$C3,$FF,$C3,$00,$00,$00,$00,$00
            .byte $00,$FF,$C3,$00,$00,$00,$00,$00,$00,$00,$C3,$00,$00,$3C,$FF,$FF
            .byte $18,$18,$18,$30,$FC,$EC,$20,$20,$20,$20,$20,$00,$28,$82,$82,$55
            .byte $FF,$FF,$3C,$1C,$1C,$7F,$7F,$1C,$1C,$1C,$1C,$88,$55,$22,$55,$88
            .byte $55,$22,$55,$44,$22,$11,$88,$44,$22,$11,$88,$AA,$AA,$AA,$7F,$55
            .byte $F7,$F7,$F7,$55,$7F,$7F,$7F,$55,$55,$55,$55,$FF,$FF,$FF,$FF,$FF
            .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$8C,$5D,$2E,$5D,$8C
            .byte $5D,$2E,$5D,$55,$7F,$7F,$7F,$55,$F7,$F7,$F7,$AA,$FF,$FF,$DF,$FF
            .byte $FB,$F7,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$30,$10,$30,$10,$30
            .byte $10,$30,$10,$55,$7F,$7F,$7F,$00,$F7,$F7,$F7,$FF,$10,$30,$10,$30
            .byte $10,$30,$10,$00,$00,$00,$00,$00,$00,$00,$00,$01,$07,$07,$1F,$1F
            .byte $1F,$3F,$3F,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$E0,$E0,$F8,$F8
            .byte $F8,$FC,$FC,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$3F,$3F,$1F,$1F,$1F,$07,$07,$01,$FF,$FF,$FF,$FF,$FF
            .byte $FF,$FF,$FF,$FC,$FC,$F8,$F8,$F8,$E0,$E0,$80,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$FF,$03,$06,$0C,$18,$30,$60,$C0,$FF,$00,$00,$00,$00
            .byte $00,$00,$00,$FF,$11,$10,$10,$10,$10,$38,$38,$FF,$FF,$81,$FF,$BD
            .byte $FF,$81,$FF,$3E,$0E,$32,$3C,$3E,$3E,$3E,$3E,$7C,$3C,$4C,$70,$7C
            .byte $7C,$7C,$7C,$0C,$0C,$0C,$0C,$0C,$0C,$0C,$0C,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$93,$83,$8F,$92,$85
            .byte $A0,$B0,$B0,$B0,$B0,$B0,$B0,$A0,$93,$89,$8C,$96,$85,$92,$A0,$83
            .byte $92,$8F,$93,$93,$85,$93,$A0,$B0,$B0,$A0,$88,$89,$A0,$B0,$B0,$B0
            .byte $B0,$B0,$B0,$85,$8E,$85,$92,$87,$99,$A9,$A9,$A9,$A9,$A9,$A9,$A9
            .byte $A9,$A9,$A9,$A9,$A9,$A9,$A9,$A9,$A9,$A9,$A9,$A9,$A9,$A9,$A9,$A9
            .byte $A9,$A9,$A9,$A9,$A9,$A9,$A9,$A9,$A9,$A9,$A1,$A0,$A0,$14,$A0,$A0
            .byte $A0,$A0,$A0,$0D,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0
            .byte $A0,$A0,$A0,$A0,$14,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$13,$A0,$A0,$66
            .byte $6E,$68,$A0,$14,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$14,$A0,$A0
            .byte $A0,$A0,$0D,$A0,$A0,$14,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0
            .byte $A0,$0D,$A0,$A0,$A0,$14,$A0,$6D,$6E,$6F,$A0,$A0,$54,$A0,$55,$A0
            .byte $14,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$14,$A0,$A0,$A0,$A0
            .byte $A0,$7D,$A0,$A0,$A0,$13,$A0,$A0,$14,$13,$A0,$A0,$A0,$A0,$A0,$0D
            .byte $A0,$A0,$A0,$5B,$5B,$5B,$5B,$5B,$77,$78,$78,$79,$A0,$A0,$A0,$13
            .byte $A0,$A0,$A0,$04,$A0,$A0,$A0,$0D,$A0,$7D,$A0,$A0,$A0,$A0,$A0,$A0
            .byte $A0,$A0,$A0,$A0,$0D,$A0,$A0,$A0,$A0,$A0,$A0,$5A,$5A,$06,$06,$06
            .byte $A0,$A0,$A0,$62,$A0,$A0,$A0,$A0,$A0,$54,$A0,$7D,$A0,$A0,$A0,$A0
            .byte $A0,$7D,$A0,$A0,$A0,$54,$A0,$A0,$A0,$04,$A0,$A0,$A0,$A0,$A0,$A0
            .byte $A0,$A0,$14,$06,$06,$06,$06,$06,$54,$A0,$A0,$62,$A0,$A0,$A0,$5C
            .byte $5C,$5C,$5C,$5C,$5C,$5C,$5C,$5C,$5C,$5C,$5C,$5C,$5C,$5C,$5C,$5C
            .byte $5C,$5C,$5C,$5C,$5C,$A0,$A0,$A0,$A0,$0D,$A0,$06,$06,$5A,$5A,$5A
            .byte $5A,$A0,$A0,$62,$A0,$A0,$A0,$A0,$06,$06,$06,$06,$06,$06,$06,$06
            .byte $06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$7D,$A0,$A0,$0D
            .byte $A0,$A0,$A0,$06,$05,$63,$03,$06,$A0,$A0,$A0,$62,$A0,$A0,$A0,$A0
            .byte $06,$09,$25,$06,$06,$24,$25,$06,$06,$09,$1A,$06,$06,$24,$25,$06
            .byte $06,$24,$25,$06,$7D,$A0,$A0,$A0,$A0,$A0,$A0,$06,$05,$63,$03,$06
            .byte $4D,$14,$A0,$62,$A0,$A0,$15,$A0,$06,$26,$23,$06,$06,$26,$28,$06
            .byte $06,$26,$23,$06,$06,$26,$28,$06,$06,$26,$23,$06,$7D,$55,$04,$A0
            .byte $54,$A0,$A0,$06,$05,$63,$03,$06,$4D,$A0,$A0,$62,$A0,$A0,$0E,$5D
            .byte $06,$5A,$5A,$06,$06,$5A,$5A,$06,$06,$5A,$5A,$06,$06,$5A,$5A,$06
            .byte $06,$5A,$5A,$06,$5C,$5C,$5C,$5C,$5C,$A0,$5C,$06,$05,$63,$03,$06
            .byte $4D,$54,$A0,$62,$A0,$A0,$A0,$0D,$06,$28,$25,$06,$06,$09,$1A,$06
            .byte $06,$19,$21,$06,$06,$19,$21,$06,$06,$27,$25,$06,$06,$06,$06,$06
            .byte $05,$63,$03,$06,$05,$63,$03,$06,$4D,$4D,$A0,$62,$A0,$A0,$15,$55
            .byte $06,$26,$23,$06,$06,$55,$55,$06,$06,$19,$21,$06,$06,$19,$21,$06
            .byte $06,$26,$28,$06,$06,$06,$06,$06,$05,$63,$03,$06,$05,$63,$03,$06
            .byte $4D,$55,$A0,$62,$14,$A0,$0E,$5D,$06,$5A,$5A,$06,$06,$5A,$5A,$06
            .byte $06,$5A,$5A,$06,$06,$5A,$5A,$06,$06,$5A,$5A,$06,$06,$06,$06,$06
            .byte $05,$63,$03,$06,$05,$63,$03,$06,$4D,$A0,$A0,$62,$A0,$A0,$A0,$A0
            .byte $06,$09,$1A,$06,$06,$09,$1A,$06,$06,$09,$1A,$06,$06,$27,$29,$06
            .byte $06,$09,$1A,$06,$06,$06,$06,$06,$05,$63,$03,$06,$05,$63,$03,$06
            .byte $4D,$56,$A0,$62,$A0,$A0,$15,$A0,$06,$19,$21,$06,$06,$26,$23,$06
            .byte $06,$26,$54,$06,$06,$26,$23,$06,$06,$26,$23,$06,$06,$06,$06,$06
            .byte $05,$63,$03,$06,$05,$63,$03,$06,$4D,$4D,$A0,$62,$A0,$A0,$0E,$5D
            .byte $06,$5A,$5A,$06,$06,$5A,$5A,$06,$06,$5A,$5A,$06,$06,$5A,$5A,$06
            .byte $06,$5A,$5A,$06,$06,$06,$06,$06,$05,$63,$03,$06,$05,$63,$03,$06
            .byte $4D,$A0,$A0,$62,$A0,$A0,$0D,$A0,$06,$24,$25,$06,$06,$24,$25,$06
            .byte $06,$19,$21,$06,$06,$09,$1A,$06,$06,$24,$25,$06,$06,$06,$06,$06
            .byte $05,$63,$03,$06,$05,$63,$03,$06,$4D,$0D,$A0,$62,$A0,$A0,$A0,$A0
            .byte $06,$26,$23,$06,$06,$26,$27,$06,$06,$19,$21,$06,$06,$29,$A0,$06
            .byte $06,$26,$23,$06,$06,$06,$06,$06,$05,$63,$03,$06,$05,$63,$03,$06
            .byte $4D,$A0,$A0,$62,$A0,$15,$56,$A0,$06,$5A,$5A,$06,$06,$5A,$5A,$06
            .byte $06,$5A,$5A,$06,$06,$5A,$5A,$06,$06,$5A,$5A,$06,$06,$06,$06,$06
            .byte $05,$63,$03,$06,$05,$63,$03,$06,$4D,$A0,$A0,$62,$A0,$0E,$5D,$5D
            .byte $06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$5B,$5B,$5B,$5B,$5B,$5B
            .byte $06,$06,$06,$06,$06,$06,$06,$06,$05,$63,$03,$06,$05,$63,$03,$06
            .byte $4D,$A0,$A0,$62,$20,$A0,$A0,$A0,$06,$06,$06,$06,$06,$06,$06,$06
            .byte $06,$06,$06,$7C,$7A,$7A,$7B,$06,$06,$06,$06,$06,$06,$06,$06,$06
            .byte $05,$63,$03,$00,$00,$00,$00,$00,$A0,$A0,$A0,$A0,$1F,$58,$58,$58
            .byte $58,$58,$58,$58,$58,$58,$58,$58,$58,$5E,$06,$7C,$7A,$7A,$7B,$06
            .byte $06,$06,$5E,$58,$58,$58,$58,$58,$58,$58,$5E,$00,$00,$00,$00,$00
            .byte $A0,$55,$A0,$56,$1F,$58,$58,$58,$58,$58,$58,$58,$58,$58,$58,$58
            .byte $58,$5E,$06,$7C,$00,$00,$7B,$06,$06,$06,$5E,$58,$58,$58,$58,$58
            .byte $58,$58,$5E,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0
            .byte $A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$11,$11,$11,$11,$11
            .byte $11,$71,$77,$77,$77,$77,$77,$77,$77,$77,$11,$11,$11,$11,$11,$22
            .byte $22,$22,$22,$72,$77,$77,$77,$55,$55,$55,$55,$55,$55,$55,$55,$D5
            .byte $55,$55,$55,$DD,$D1,$DD,$DD,$D1,$DD,$1D,$BB,$BB,$FB,$FF,$FF,$11
            .byte $BB,$FB,$FF,$1F,$FF,$11,$F1,$D1,$DD,$DD,$DD,$DD,$D1,$9D,$19,$FF
            .byte $F1,$99,$F1,$F9,$91,$F9,$91,$FF,$F1,$11,$F1,$CD,$ED,$1D,$DD,$DD
            .byte $DD,$99,$99,$91,$FF,$FF,$F1,$FF,$F1,$19,$11,$FF,$FD,$F1,$FD,$EE
            .byte $EE,$1E,$11,$D1,$FD,$F1,$FF,$F1,$FF,$F1,$F1,$FF,$FF,$FF,$F9,$1F
            .byte $FF,$1F,$FF,$BB,$BB,$DB,$DD,$DA,$FF,$FF,$FC,$F1,$FF,$FF,$F1,$FF
            .byte $FC,$FF,$F9,$FF,$FF,$FF,$1F,$BB,$BB,$CB,$1D,$BA,$9B,$66,$66,$66
            .byte $66,$66,$66,$66,$66,$66,$66,$66,$FF,$FF,$F1,$BB,$BB,$BB,$BB,$BA
            .byte $91,$AB,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$1A,$FF,$F1,$FF,$BB
            .byte $BB,$BB,$BB,$1A,$9B,$AB,$14,$AA,$11,$AA,$55,$AA,$11,$AA,$11,$1A
            .byte $BB,$FF,$FF,$BB,$BB,$2B,$B1,$BA,$1F,$A1,$FF,$AA,$19,$AA,$FF,$AA
            .byte $11,$AA,$11,$1A,$9E,$CF,$FF,$BB,$BB,$2B,$99,$BA,$1A,$AF,$AA,$AA
            .byte $AA,$AA,$AA,$AA,$AA,$AA,$AA,$EA,$EE,$EE,$EE,$BB,$BB,$2B,$2C,$2A
            .byte $FF,$A1,$11,$AA,$66,$AA,$BB,$AA,$EE,$AA,$11,$AA,$AA,$AA,$AA,$BB
            .byte $BB,$2B,$D2,$DA,$1F,$AE,$11,$AA,$EE,$AA,$BB,$AA,$EE,$AA,$11,$AA
            .byte $AA,$AA,$AA,$BB,$BB,$2B,$AE,$1A,$1F,$AF,$AA,$AA,$AA,$AA,$AA,$AA
            .byte $AA,$AA,$AA,$AA,$AA,$AA,$AA,$BB,$BB,$2B,$F7,$FA,$AF,$AF,$66,$AA
            .byte $66,$AA,$55,$AA,$11,$AA,$66,$AA,$AA,$AA,$AA,$BB,$BB,$2B,$BE,$BA
            .byte $1F,$AF,$EE,$AA,$11,$AA,$C1,$AA,$11,$AA,$11,$AA,$AA,$AA,$AA,$BB
            .byte $BB,$2B,$A2,$AA,$1F,$AF,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA
            .byte $AA,$AA,$AA,$BB,$BB,$2B,$B4,$BA,$1F,$AF,$11,$AA,$11,$AA,$CC,$AA
            .byte $44,$AA,$11,$AA,$AA,$AA,$AA,$BB,$BB,$2B,$91,$3A,$3F,$AB,$11,$AA
            .byte $11,$AA,$CC,$AA,$A1,$AA,$11,$AA,$AA,$AA,$AA,$BB,$BB,$2B,$24,$3A
            .byte $E1,$AB,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$BB
            .byte $BB,$2B,$F9,$3A,$C1,$AC,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA
            .byte $AA,$AA,$AA,$BB,$BB,$2B,$FF,$1A,$33,$AB,$AA,$AA,$AA,$AA,$AA,$61
            .byte $16,$AA,$AA,$AA,$AA,$AA,$AA,$22,$22,$F2,$FF,$1B,$11,$11,$11,$11
            .byte $11,$11,$A1,$61,$16,$AA,$1A,$11,$11,$11,$11,$22,$22,$F2,$FE,$1E
            .byte $11,$11,$11,$11,$11,$11,$A1,$61,$16,$AA,$1A,$11,$11,$11,$11,$BB
            .byte $BB,$BB,$BB,$BB,$00,$00,$00,$00,$00,$00,$00,$FF,$FF,$FF,$FF,$FF
            .byte $FF,$FF,$FF,$00,$00,$00,$08,$28,$10,$00,$00,$00,$00,$40,$20,$00
            .byte $00,$00,$00,$C0,$C0,$C0,$C0,$C3,$CE,$FA,$EA,$EA,$EA,$EA,$EA,$AA
            .byte $AA,$AA,$AA,$AA,$AA,$AF,$B0,$B0,$C0,$C0,$C0,$10,$12,$99,$CA,$6C
            .byte $3F,$18,$18,$AB,$BE,$EA,$AA,$AA,$AA,$AA,$AA,$AB,$AB,$AB,$AB,$AB
            .byte $AB,$AB,$AB,$03,$03,$23,$63,$13,$23,$03,$13,$03,$0C,$3F,$23,$2C
            .byte $F7,$3F,$F3,$A0,$A0,$FC,$E4,$56,$76,$ED,$ED,$D7,$D7,$D7,$D7,$D7
            .byte $D7,$D7,$D7,$AA,$EA,$FA,$DF,$D7,$D7,$D7,$D7,$00,$00,$00,$00,$00
            .byte $00,$03,$0F,$FF,$BE,$BB,$FB,$7E,$DF,$DF,$FF,$00,$00,$00,$00,$00
            .byte $00,$0F,$FA,$B7,$B7,$6E,$6A,$27,$3F,$05,$05,$CF,$FC,$EF,$34,$C4
            .byte $FC,$30,$C0,$F7,$F7,$FF,$FB,$BF,$FF,$F0,$C0,$D7,$37,$8F,$A3,$A8
            .byte $AA,$AA,$AA,$00,$00,$03,$0E,$3A,$EA,$AA,$AA,$00,$00,$00,$00,$0F
            .byte $FA,$AA,$AA,$38,$BE,$BF,$EB,$7F,$DD,$DB,$3C,$00,$00,$00,$00,$00
            .byte $CE,$7D,$DB,$AB,$AB,$AB,$AB,$EB,$3B,$0F,$03,$AA,$AA,$AA,$AA,$AA
            .byte $AB,$BE,$EA,$AA,$AA,$AA,$AF,$BA,$EA,$AA,$AA,$00,$00,$20,$04,$00
            .byte $00,$08,$00,$00,$C0,$00,$00,$00,$00,$00,$00,$00,$00,$02,$00,$00
            .byte $00,$04,$00,$00,$40,$A0,$45,$42,$62,$94,$00,$AA,$AA,$AA,$AA,$EA
            .byte $3A,$0E,$03,$AA,$AA,$AA,$AA,$AB,$AC,$B0,$C0,$AB,$AC,$B0,$C0,$00
            .byte $00,$00,$00,$EA,$3A,$0E,$03,$00,$00,$00,$00,$AA,$AA,$AA,$EA,$EA
            .byte $EA,$EA,$EA,$00,$10,$10,$42,$24,$20,$00,$00,$AF,$BB,$EB,$AB,$AB
            .byte $AB,$AB,$AB,$00,$00,$00,$00,$00,$00,$03,$03,$C3,$C3,$C3,$C3,$C3
            .byte $CE,$FA,$EA,$AA,$AA,$AA,$AA,$AE,$B3,$B3,$C3,$E0,$E0,$E0,$E0,$E0
            .byte $E0,$E0,$E0,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$FF
            .byte $FF,$FF,$07,$E0,$E0,$E0,$E0,$FF,$FF,$FF,$E0,$00,$00,$00,$10,$10
            .byte $00,$00,$00,$1A,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $F0,$B0,$B0,$BF,$AF,$EF,$EF,$FB,$FB,$FB,$FF,$FF,$FF,$DE,$DD,$F9
            .byte $BB,$BB,$FD,$07,$07,$1E,$1D,$14,$34,$B9,$F7,$3F,$FE,$EF,$FB,$BB
            .byte $FB,$EF,$3F,$E0,$E0,$78,$B8,$28,$EC,$9D,$EF,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$0C,$0F,$0E,$FE,$EE,$CF,$FF,$D3,$DB,$3F
            .byte $EF,$FF,$FC,$F3,$3C,$FF,$CF,$F3,$2F,$F7,$EF,$FF,$BF,$9F,$DB,$F7
            .byte $F7,$DF,$F7,$55,$00,$00,$20,$00,$04,$08,$00,$AA,$FF,$EE,$DE,$7E
            .byte $FC,$E0,$80,$AA,$FF,$77,$7B,$7E,$3F,$07,$01,$B0,$B0,$AF,$AB,$AB
            .byte $BB,$BF,$BB,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0E,$0E,$0F,$FA,$AA
            .byte $AA,$AA,$AA,$B0,$B0,$B0,$F0,$AC,$AC,$AB,$AB,$EA,$EA,$FA,$0E,$0E
            .byte $0E,$0E,$0E,$0F,$FA,$AA,$AA,$AA,$AA,$AA,$AA,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$B6,$6B,$DF,$FD,$BF,$FF,$FF,$FF,$20,$2A,$54,$FD,$BF
            .byte $F7,$FF,$FF,$00,$02,$54,$CC,$BA,$F7,$FF,$FF,$00,$00,$00,$48,$3A
            .byte $76,$FF,$FF,$00,$00,$00,$00,$10,$36,$FE,$FF,$00,$00,$00,$00,$00
            .byte $24,$4A,$FF,$00,$00,$00,$00,$00,$20,$00,$6B,$00,$00,$3C,$FF,$FF
            .byte $18,$18,$18,$30,$FC,$EC,$20,$20,$20,$20,$20,$00,$28,$82,$82,$55
            .byte $FF,$FF,$3C,$1C,$1C,$7F,$7F,$1C,$1C,$1C,$1C,$03,$0F,$3F,$79,$77
            .byte $7F,$FF,$FF,$C0,$F0,$FC,$5E,$BE,$FE,$FF,$FF,$FF,$7B,$AD,$FB,$DF
            .byte $FF,$BB,$B7,$3F,$FE,$EF,$FB,$BB,$FB,$EF,$3F,$07,$07,$07,$07,$FF
            .byte $FF,$FF,$07,$00,$00,$00,$00,$00,$02,$0A,$2A,$00,$02,$0A,$2A,$AA
            .byte $AA,$AA,$AA,$AA,$A8,$A8,$A0,$A0,$A0,$80,$00,$AA,$AA,$AA,$AA,$AA
            .byte $AA,$AA,$AA,$00,$02,$02,$0A,$0A,$2A,$2A,$AA,$30,$10,$30,$10,$30
            .byte $10,$30,$10,$EF,$DF,$ED,$DE,$EF,$DF,$6F,$DF,$FF,$10,$30,$10,$30
            .byte $10,$30,$10,$00,$00,$00,$00,$00,$00,$00,$00,$01,$07,$07,$1F,$1F
            .byte $1F,$3F,$3F,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$E0,$E0,$F8,$F8
            .byte $F8,$FC,$FC,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$3F,$3F,$1F,$1F,$1F,$07,$07,$01,$FF,$FF,$FF,$FF,$FF
            .byte $FF,$FF,$FF,$FC,$FC,$F8,$F8,$F8,$E0,$E0,$80,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$EA,$EA,$BA,$BA,$AE
            .byte $AE,$AB,$AB,$00,$00,$00,$00,$00,$00,$03,$0F,$AA,$EA,$FA,$DF,$D7
            .byte $D7,$D7,$D7,$00,$00,$00,$00,$00,$00,$00,$00,$0F,$FA,$AA,$AA,$AA
            .byte $AA,$AA,$AA,$00,$00,$00,$00,$00,$00,$00,$00,$3A,$EA,$AA,$AA,$AA
            .byte $AA,$AA,$AA,$C0,$C0,$B0,$B0,$AC,$AC,$AB,$AB,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$0F,$FA,$AA,$AA,$AA,$AA,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$93,$83,$8F,$92,$85
            .byte $A0,$B0,$B0,$B0,$B0,$B0,$B0,$A0,$93,$89,$8C,$96,$85,$92,$A0,$83
            .byte $92,$8F,$93,$93,$85,$93,$A0,$B0,$B0,$A0,$88,$89,$A0,$B0,$B0,$B1
            .byte $B1,$B7,$B0,$85,$8E,$85,$92,$87,$99,$A9,$A9,$A9,$A1,$A1,$A1,$A1
            .byte $A1,$A1,$A1,$A9,$A9,$A9,$A9,$A9,$A9,$A9,$A9,$A9,$A9,$A9,$A9,$A9
            .byte $A9,$A9,$A9,$A9,$A9,$A9,$A9,$A9,$A9,$A9,$A1,$A0,$A0,$A0,$A0,$A0
            .byte $A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0
            .byte $A0,$66,$67,$68,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0
            .byte $A0,$02,$A0,$A0,$A0,$1D,$A0,$A0,$A0,$1D,$A0,$A0,$A0,$A0,$A0,$A0
            .byte $A0,$A0,$A0,$A0,$A0,$1D,$A0,$A0,$A0,$6D,$67,$6F,$A0,$A0,$A0,$27
            .byte $A0,$A0,$A0,$A0,$A0,$A0,$37,$30,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0
            .byte $A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$1D,$A0,$A0,$1C,$A0,$A0,$A0
            .byte $A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$1E,$A0,$A0,$A0,$A0,$44,$3E
            .byte $A0,$A0,$A0,$A0,$A0,$A0,$A0,$1D,$A0,$A0,$A0,$A0,$1D,$A0,$A0,$A0
            .byte $A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0
            .byte $A0,$A0,$A0,$A0,$10,$16,$42,$43,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0
            .byte $A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0
            .byte $A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$0E,$16,$7D,$76,$71,$71,$71,$71
            .byte $79,$A0,$A0,$1F,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$01,$1F,$A0
            .byte $A0,$A0,$A0,$A0,$A0,$1F,$1F,$1D,$A0,$A0,$A0,$A0,$01,$A0,$27,$15
            .byte $78,$72,$71,$71,$71,$71,$1A,$1B,$26,$A0,$06,$1F,$1F,$1F,$1F,$1F
            .byte $1F,$58,$0F,$59,$02,$1F,$1F,$02,$1F,$1C,$1C,$1F,$1F,$1F,$1F,$1F
            .byte $1C,$1F,$25,$1F,$1F,$1F,$09,$71,$71,$71,$72,$1A,$1B,$07,$71,$29
            .byte $08,$1F,$1C,$01,$1F,$1F,$02,$01,$0A,$0F,$0F,$0F,$1C,$1C,$1C,$25
            .byte $1F,$02,$1F,$1C,$1C,$1F,$1C,$1C,$1C,$1C,$02,$1C,$1F,$1C,$09,$71
            .byte $71,$71,$08,$71,$71,$05,$24,$28,$08,$1C,$25,$1C,$1C,$1F,$25,$1C
            .byte $11,$5A,$5A,$12,$25,$1D,$1C,$1C,$1C,$1C,$25,$1D,$25,$25,$A0,$0A
            .byte $0F,$0B,$1C,$1C,$1C,$25,$09,$71,$71,$74,$08,$71,$71,$03,$04,$21
            .byte $22,$1C,$1C,$1C,$25,$1C,$1C,$1C,$1C,$5A,$12,$1C,$1C,$1C,$06,$25
            .byte $1C,$1C,$1D,$06,$1D,$06,$0A,$5A,$0F,$0F,$1C,$06,$1D,$1C,$1C,$23
            .byte $20,$0C,$08,$71,$71,$21,$22,$25,$1C,$1C,$06,$06,$1C,$1C,$56,$1C
            .byte $1C,$5B,$1C,$1C,$1C,$1C,$25,$1C,$1C,$A0,$06,$1C,$A0,$06,$11,$0F
            .byte $0F,$12,$1C,$06,$1C,$1C,$1D,$06,$61,$14,$19,$21,$22,$25,$1C,$02
            .byte $06,$25,$1C,$A0,$06,$1C,$1C,$1C,$54,$5A,$1C,$1C,$A0,$06,$1C,$1E
            .byte $1C,$06,$06,$A0,$06,$A0,$1E,$5A,$12,$1C,$1C,$1C,$1C,$1C,$06,$06
            .byte $60,$60,$06,$1E,$1C,$1C,$1E,$06,$1C,$1C,$25,$06,$1C,$1C,$1C,$52
            .byte $4F,$4E,$4E,$50,$55,$1C,$1C,$06,$06,$1C,$1C,$06,$55,$1E,$54,$5A
            .byte $A0,$06,$1C,$1C,$25,$1C,$1C,$06,$60,$60,$06,$A0,$2C,$2D,$1C,$1C
            .byte $1C,$06,$0A,$1C,$1C,$56,$52,$4F,$4D,$4D,$4D,$4D,$4F,$51,$1C,$1E
            .byte $1C,$1C,$1C,$1C,$51,$4F,$4D,$4D,$4D,$4F,$51,$55,$1C,$06,$06,$61
            .byte $60,$60,$06,$1E,$2B,$2A,$1E,$1C,$1C,$0A,$0A,$1C,$06,$1C,$06,$06
            .byte $06,$1C,$1C,$06,$06,$58,$59,$1C,$53,$52,$51,$4F,$4D,$4D,$4E,$4D
            .byte $4D,$4D,$4D,$50,$06,$5D,$5E,$60,$60,$5F,$06,$1C,$1C,$1C,$1C,$06
            .byte $0A,$0A,$0A,$1C,$A0,$06,$1C,$1C,$1C,$06,$06,$06,$06,$5B,$5A,$06
            .byte $1C,$1C,$1C,$06,$1C,$1C,$55,$2C,$2D,$4D,$4D,$06,$61,$60,$60,$60
            .byte $5F,$06,$1C,$1C,$1C,$1C,$1E,$1C,$1E,$1C,$5A,$50,$4E,$50,$1C,$06
            .byte $1E,$06,$1E,$1C,$1D,$06,$A0,$54,$1C,$53,$58,$59,$51,$50,$52,$2B
            .byte $2A,$06,$5D,$5E,$60,$60,$5F,$06,$06,$1C,$58,$59,$1C,$1C,$25,$1C
            .byte $1C,$54,$5B,$06,$1C,$1E,$1E,$06,$06,$1C,$1C,$1E,$1E,$A0,$55,$1E
            .byte $06,$A0,$5A,$5A,$1E,$1C,$1E,$06,$5D,$5E,$60,$60,$60,$5F,$06,$1C
            .byte $1C,$1C,$5B,$5A,$1C,$06,$A0,$1C,$1C,$5A,$5B,$1E,$1C,$1C,$06,$1E
            .byte $1C,$58,$59,$1C,$1C,$1C,$1E,$06,$1E,$1E,$1E,$A0,$1C,$06,$06,$5E
            .byte $60,$60,$60,$60,$5F,$06,$1C,$54,$55,$54,$5A,$5B,$1C,$1C,$1C,$1C
            .byte $1C,$1E,$1C,$06,$1E,$1C,$1E,$1C,$1D,$5A,$5B,$06,$1C,$1C,$56,$1D
            .byte $52,$50,$4E,$4F,$50,$06,$61,$60,$60,$60,$60,$5F,$51,$4E,$4F,$4F
            .byte $51,$50,$4F,$51,$52,$53,$56,$1C,$1E,$1E,$1C,$0B,$35,$1E,$1C,$56
            .byte $1D,$54,$1E,$A0,$1C,$1E,$1C,$1D,$06,$1D,$06,$06,$06,$61,$60,$60
            .byte $60,$60,$5F,$06,$1C,$1C,$1C,$1C,$1C,$1E,$06,$1C,$1E,$1E,$A0,$1C
            .byte $1C,$06,$1C,$12,$12,$06,$1E,$1C,$1C,$1C,$06,$1E,$1C,$1C,$1C,$1E
            .byte $A0,$1D,$06,$06,$61,$60,$60,$60,$60,$5F,$50,$4F,$4F,$4E,$4D,$4F
            .byte $52,$1C,$1C,$55,$0A,$0B,$1C,$1C,$1E,$A0,$0A,$4D,$4E,$4F,$50,$50
            .byte $51,$52,$53,$0A,$35,$51,$50,$4F,$4E,$4D,$4D,$4D,$60,$60,$60,$60
            .byte $60,$4D,$4F,$50,$52,$53,$1C,$06,$1C,$1C,$1C,$0A,$0A,$0B,$0B,$54
            .byte $1C,$0A,$0A,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0
            .byte $A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$11,$11,$11,$11,$11
            .byte $11,$71,$77,$77,$77,$77,$77,$77,$77,$77,$11,$11,$11,$11,$11,$22
            .byte $22,$22,$22,$72,$77,$77,$77,$55,$55,$55,$55,$55,$55,$55,$55,$D5
            .byte $55,$55,$55,$BB,$BB,$BB,$BB,$BB,$BB,$BB,$BB,$BB,$BB,$BB,$11,$B1
            .byte $BB,$BB,$BB,$BB,$CB,$BB,$B1,$BB,$B1,$BB,$B1,$BB,$BB,$BB,$BB,$BB
            .byte $B1,$BB,$11,$B1,$BB,$B1,$BB,$BB,$FC,$BF,$BB,$BB,$BB,$BB,$B1,$BB
            .byte $BB,$BB,$B1,$1B,$BB,$BB,$BB,$BB,$BB,$BB,$B1,$BB,$FB,$BF,$BB,$BB
            .byte $BB,$B1,$BB,$1B,$BB,$BB,$BB,$BB,$BB,$BB,$BB,$BB,$BB,$BB,$BB,$FB
            .byte $FF,$BF,$BB,$DD,$DD,$DD,$DD,$DD,$DD,$DD,$DD,$DD,$DD,$DD,$DD,$DD
            .byte $DD,$FD,$FF,$FF,$FF,$FF,$DF,$B5,$BB,$BB,$1B,$DD,$55,$BB,$BB,$BB
            .byte $55,$B5,$BB,$5B,$FB,$FF,$FF,$FF,$FF,$FF,$DF,$55,$55,$55,$DD,$5D
            .byte $55,$55,$55,$55,$55,$55,$55,$55,$75,$FF,$FF,$FF,$FF,$FF,$55,$55
            .byte $55,$D5,$DD,$5D,$55,$55,$55,$55,$55,$55,$55,$55,$F5,$FF,$FF,$FF
            .byte $FF,$FF,$55,$55,$55,$D5,$DD,$5D,$55,$55,$55,$55,$B5,$DD,$5D,$55
            .byte $75,$FF,$FC,$FF,$FF,$FF,$55,$55,$55,$55,$DA,$55,$D5,$55,$55,$5D
            .byte $DD,$DD,$5D,$5D,$55,$FF,$FC,$FF,$FF,$55,$D5,$55,$A5,$55,$5A,$55
            .byte $55,$55,$DB,$B5,$D5,$DD,$5D,$55,$55,$9D,$FC,$FF,$55,$D5,$55,$DB
            .byte $55,$C5,$5A,$B5,$55,$55,$5D,$DB,$5B,$DA,$55,$55,$55,$9D,$D9,$55
            .byte $55,$5D,$55,$5D,$55,$55,$55,$A5,$55,$5D,$55,$AD,$C5,$BA,$55,$55
            .byte $55,$FD,$DF,$3B,$53,$55,$D5,$55,$5A,$55,$55,$55,$55,$55,$55,$D5
            .byte $DD,$DD,$DD,$5A,$DD,$FF,$DF,$35,$53,$55,$DD,$D5,$D5,$DD,$55,$DD
            .byte $33,$D5,$DD,$DD,$DD,$DD,$DD,$DD,$99,$FF,$D9,$55,$55,$D5,$DD,$E5
            .byte $5D,$55,$D5,$DD,$33,$55,$55,$55,$A5,$44,$DD,$FD,$FF,$9F,$5D,$55
            .byte $55,$55,$A5,$55,$55,$55,$5D,$55,$BD,$5C,$75,$57,$55,$44,$9D,$F9
            .byte $9F,$DD,$15,$51,$55,$55,$AC,$5D,$55,$DD,$55,$55,$AB,$55,$7B,$57
            .byte $55,$9D,$F9,$FF,$D9,$55,$15,$51,$E5,$55,$AA,$55,$D5,$55,$11,$55
            .byte $55,$5D,$55,$5B,$DD,$F9,$FF,$9F,$5D,$AC,$1C,$51,$55,$55,$55,$55
            .byte $55,$55,$11,$55,$A5,$55,$55,$55,$FD,$FF,$FF,$B9,$BB,$BB,$BB,$BB
            .byte $AB,$55,$55,$55,$55,$5A,$5C,$5B,$55,$55,$D5,$DD,$FF,$FF,$9F,$55
            .byte $55,$55,$55,$55,$E5,$55,$55,$55,$5D,$55,$55,$55,$55,$B5,$D5,$FD
            .byte $FF,$FF,$59,$55,$55,$55,$55,$DA,$5D,$55,$DB,$55,$55,$55,$55,$5D
            .byte $55,$55,$55,$F5,$FF,$FF,$55,$55,$55,$55,$55,$DD,$DD,$5C,$DD,$BB
            .byte $BB,$BB,$BB,$BB,$00,$00,$00,$00,$00,$00,$00,$FF,$FF,$FF,$FF,$FF
            .byte $FF,$FF,$FF,$AA,$AA,$FF,$AA,$AA,$AA,$FF,$AA,$E0,$E0,$C0,$C0,$00
            .byte $00,$00,$00,$45,$4F,$4F,$4F,$05,$C7,$C7,$C7,$EA,$EA,$C0,$EA,$EA
            .byte $EA,$C0,$EA,$03,$01,$03,$03,$02,$03,$01,$03,$55,$7F,$7F,$7F,$55
            .byte $F7,$F7,$F7,$FD,$FD,$FD,$FD,$F6,$F6,$F6,$F6,$FF,$FF,$DB,$D7,$F3
            .byte $DF,$F7,$FF,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$03,$0F,$3F,$2F,$2F
            .byte $F7,$FF,$FF,$C0,$F0,$FC,$F4,$F4,$EF,$FF,$FF,$FF,$FF,$00,$FF,$FF
            .byte $FF,$00,$FF,$55,$7D,$7D,$7D,$7D,$7D,$7D,$7D,$FF,$FF,$DF,$FF,$FF
            .byte $FB,$FF,$FF,$FB,$FB,$B7,$D5,$BF,$9F,$3D,$7D,$DA,$DA,$DA,$DA,$6A
            .byte $6A,$6A,$6A,$FF,$FF,$F7,$2F,$2F,$3F,$0F,$03,$FF,$FF,$EF,$F4,$F4
            .byte $FC,$F0,$C0,$AB,$AB,$03,$AB,$AB,$AB,$03,$AB,$FF,$FF,$DF,$FF,$FD
            .byte $FF,$EF,$FF,$FF,$F7,$DF,$DF,$7E,$DE,$FF,$FF,$FF,$EC,$3F,$CF,$FF
            .byte $EB,$D1,$FC,$BE,$BC,$F9,$FD,$AB,$ED,$DF,$DF,$55,$AA,$FF,$AA,$AA
            .byte $AA,$FF,$AA,$FF,$55,$FF,$55,$FF,$55,$FF,$55,$A9,$A9,$A9,$A9,$A9
            .byte $A9,$A9,$A9,$00,$00,$00,$10,$00,$00,$00,$00,$AA,$AA,$00,$BA,$BA
            .byte $BA,$00,$AA,$6A,$6A,$7F,$6A,$6A,$6A,$7F,$6A,$BE,$AC,$E9,$B9,$AB
            .byte $ED,$BB,$EB,$55,$7C,$7C,$7C,$7C,$7C,$7C,$7C,$55,$3D,$3D,$3D,$3D
            .byte $3D,$3D,$3D,$A9,$A9,$FD,$A9,$A9,$A9,$FD,$A9,$00,$00,$00,$18,$00
            .byte $00,$00,$00,$01,$03,$07,$0F,$1F,$3F,$7F,$FF,$80,$C0,$E0,$F0,$F8
            .byte $FC,$FE,$FF,$AA,$EA,$EA,$FA,$FA,$FE,$FE,$FF,$55,$FF,$EA,$AA,$BA
            .byte $AA,$FF,$AA,$BE,$BE,$3C,$BE,$BE,$BE,$3C,$BE,$AA,$AA,$00,$AA,$FF
            .byte $FF,$FF,$FF,$80,$80,$A0,$E0,$B8,$E8,$BA,$EE,$55,$7F,$7F,$7F,$55
            .byte $F7,$F7,$F7,$02,$02,$0A,$0B,$2F,$2F,$A0,$BF,$80,$80,$60,$E0,$F8
            .byte $F8,$06,$FE,$AA,$AA,$6A,$EA,$FA,$FA,$06,$FE,$00,$00,$00,$10,$10
            .byte $00,$00,$00,$1A,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$BF,$AF,$EF,$EF,$FB,$FB,$FB,$FF,$FF,$FF,$DE,$DD,$F9
            .byte $BB,$BB,$FD,$07,$07,$1E,$1D,$14,$37,$B9,$F7,$3F,$FE,$EF,$FB,$BB
            .byte $FB,$EF,$3F,$E0,$E0,$78,$B8,$28,$EC,$9D,$EF,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FF,$DF,$DB,$FF
            .byte $EF,$FF,$FF,$FF,$FF,$FF,$CF,$FF,$EF,$F7,$EF,$FF,$BF,$9F,$DB,$F7
            .byte $F7,$DF,$F7,$55,$00,$00,$20,$00,$04,$08,$00,$AA,$FF,$EE,$DE,$7E
            .byte $FC,$E0,$80,$AA,$FF,$77,$7B,$7E,$3F,$07,$01,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$55,$AA,$AA,$AA,$AA
            .byte $AA,$AA,$AA,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$AA,$AA,$00,$AA,$FF
            .byte $FF,$FF,$FF,$0C,$0C,$06,$03,$07,$0C,$1A,$03,$00,$0C,$06,$03,$07
            .byte $0C,$1A,$03,$00,$00,$06,$03,$07,$0C,$1A,$03,$00,$00,$00,$00,$07
            .byte $0C,$1A,$03,$00,$00,$00,$00,$04,$0D,$1A,$03,$00,$00,$00,$00,$00
            .byte $05,$0A,$03,$00,$00,$00,$00,$00,$00,$02,$05,$00,$00,$3C,$FF,$FF
            .byte $18,$18,$18,$30,$FC,$EC,$20,$20,$20,$20,$20,$00,$28,$82,$82,$55
            .byte $FF,$FF,$3C,$1C,$1C,$7F,$7F,$1C,$1C,$1C,$1C,$88,$55,$22,$55,$88
            .byte $55,$22,$55,$44,$22,$11,$88,$44,$22,$11,$88,$AA,$AA,$AA,$7F,$55
            .byte $F7,$F7,$F7,$55,$7F,$7F,$7F,$55,$55,$55,$55,$FF,$FF,$FF,$FF,$FF
            .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$FC,$F7,$FD,$EF,$FD
            .byte $FF,$F7,$F4,$B7,$FE,$DC,$F8,$F8,$70,$C0,$80,$AA,$FF,$FF,$DF,$FF
            .byte $FB,$F7,$FF,$01,$03,$0E,$1F,$1F,$3B,$7F,$ED,$7D,$55,$7D,$7D,$7D
            .byte $55,$7D,$7D,$EE,$EE,$EE,$AA,$EE,$EE,$EE,$AA,$FF,$10,$30,$10,$30
            .byte $10,$30,$10,$00,$00,$00,$00,$00,$00,$00,$00,$01,$07,$07,$1F,$1F
            .byte $1F,$3F,$3F,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$E0,$E0,$F8,$F8
            .byte $F8,$FC,$FC,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$3F,$3F,$1F,$1F,$1F,$07,$07,$01,$FF,$FF,$FF,$FF,$FF
            .byte $FF,$FF,$FF,$FC,$FC,$F8,$F8,$F8,$E0,$E0,$80,$55,$AA,$FF,$AA,$AA
            .byte $AA,$FF,$AA,$C0,$40,$C0,$EC,$FC,$F4,$5C,$C0,$00,$00,$00,$4C,$10
            .byte $24,$38,$40,$03,$01,$03,$03,$02,$03,$01,$03,$C0,$80,$C0,$C0,$40
            .byte $C0,$80,$C0,$05,$37,$FE,$68,$C0,$00,$00,$00,$00,$00,$00,$03,$16
            .byte $7F,$EC,$A0,$00,$00,$00,$00,$FF,$FF,$FF,$00,$00,$00,$00,$F5,$FF
            .byte $FF,$00,$00,$F8,$7C,$3C,$3E,$1F,$1F,$07,$07,$07,$07,$1F,$1F,$3E
            .byte $3C,$7C,$F8,$00,$00,$DF,$F5,$FF,$00,$00,$00,$00,$FF,$DF,$F5,$00
            .byte $00,$00,$00,$DF,$FB,$BF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$93,$83,$8F,$92,$85
            .byte $A0,$B0,$B0,$B0,$B0,$B0,$B0,$A0,$93,$89,$8C,$96,$85,$92,$A0,$83
            .byte $92,$8F,$93,$93,$85,$93,$A0,$B0,$B0,$A0,$88,$89,$A0,$B0,$B0,$B0
            .byte $B0,$B0,$B0,$85,$8E,$85,$92,$87,$99,$A9,$A9,$A9,$A9,$A9,$A9,$A9
            .byte $A9,$A9,$A9,$A9,$A9,$A9,$A9,$A9,$A9,$A9,$A9,$A9,$A9,$A9,$A9,$A9
            .byte $A9,$A9,$A9,$A9,$A9,$A9,$A9,$A9,$A9,$A9,$A1,$A0,$A0,$A0,$A0,$A0
            .byte $A0,$A0,$A0,$55,$A0,$A0,$A0,$76,$1B,$A0,$1B,$A0,$A0,$A0,$A0,$A0
            .byte $A0,$A0,$A0,$22,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$66,$6E,$68
            .byte $A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$72,$A0,$72,$72,$76,$75,$A0
            .byte $A0,$1B,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0
            .byte $A0,$A0,$A0,$A0,$A0,$6D,$6E,$6F,$1B,$A0,$A0,$72,$55,$A0,$A0,$54
            .byte $7A,$76,$75,$76,$75,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0
            .byte $1B,$1B,$A0,$A0,$A0,$A0,$A0,$22,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0
            .byte $A0,$A0,$A0,$79,$72,$73,$72,$7A,$7D,$A0,$7A,$7D,$79,$72,$A0,$A0
            .byte $A0,$A0,$1B,$A0,$A0,$A0,$A0,$22,$A0,$A0,$A0,$1B,$A0,$A0,$A0,$A0
            .byte $A0,$A0,$A0,$A0,$A0,$A0,$22,$A0,$A0,$A0,$A0,$A0,$79,$72,$7A,$02
            .byte $54,$7A,$7D,$7D,$A0,$A0,$A0,$A0,$A0,$1B,$A0,$A0,$A0,$A0,$A0,$A0
            .byte $A0,$A0,$A0,$A0,$22,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$1B
            .byte $A0,$0A,$16,$A0,$54,$39,$02,$72,$7A,$02,$72,$54,$72,$A0,$A0,$2B
            .byte $2C,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$1B,$A0,$22,$A0,$A0,$A0,$A0,$A0
            .byte $A0,$22,$A0,$A0,$A0,$A0,$A0,$0A,$0F,$16,$16,$72,$79,$38,$54,$7A
            .byte $7D,$7D,$79,$75,$A0,$56,$2B,$0C,$0C,$2C,$A0,$54,$A0,$A0,$56,$A0
            .byte $54,$A0,$A0,$A0,$56,$22,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$0A,$16
            .byte $0E,$0F,$0E,$79,$72,$3A,$7A,$02,$72,$A0,$54,$72,$A0,$2B,$0C,$0C
            .byte $0C,$0C,$2D,$63,$63,$63,$63,$63,$63,$63,$63,$63,$63,$63,$63,$63
            .byte $29,$A0,$A0,$22,$A0,$0A,$16,$16,$1E,$0E,$16,$A0,$79,$39,$7D,$7C
            .byte $7B,$7A,$75,$A0,$2B,$0C,$0C,$0C,$0C,$0C,$0C,$2D,$63,$63,$63,$63
            .byte $63,$63,$63,$63,$63,$63,$63,$63,$63,$29,$A0,$A0,$A0,$11,$0F,$1E
            .byte $1E,$0F,$1E,$79,$72,$32,$76,$55,$72,$79,$A0,$2B,$0C,$0C,$0C,$0C
            .byte $0C,$0C,$0C,$0C,$2D,$63,$63,$63,$63,$63,$63,$63,$63,$63,$63,$63
            .byte $63,$63,$29,$A0,$A0,$A0,$16,$5E,$16,$1E,$0F,$A0,$79,$38,$A0,$7A
            .byte $72,$A0,$4D,$04,$01,$01,$01,$01,$01,$01,$01,$01,$21,$18,$18,$18
            .byte $18,$18,$18,$18,$18,$18,$18,$18,$18,$18,$18,$A0,$A0,$1B,$11,$0F
            .byte $0F,$0F,$1E,$A0,$A0,$3A,$7A,$7D,$7D,$A0,$4D,$04,$01,$1F,$20,$01
            .byte $1C,$1F,$20,$01,$21,$01,$01,$1F,$20,$01,$1F,$20,$01,$1F,$20,$01
            .byte $01,$01,$13,$A0,$A0,$A0,$A0,$A0,$11,$1E,$1E,$A0,$A0,$32,$02,$1B
            .byte $A0,$A0,$4D,$04,$01,$1F,$20,$01,$01,$1F,$20,$01,$21,$01,$01,$1F
            .byte $20,$01,$1F,$20,$01,$1F,$20,$01,$01,$01,$13,$A0,$A0,$A0,$A0,$56
            .byte $A0,$0F,$0F,$A0,$A0,$3A,$A0,$A0,$22,$A0,$4D,$04,$01,$70,$70,$01
            .byte $01,$70,$70,$01,$21,$01,$01,$70,$70,$1C,$70,$70,$01,$70,$70,$1C
            .byte $01,$01,$13,$A0,$A0,$79,$76,$77,$78,$0E,$38,$A0,$A0,$3A,$A0,$A0
            .byte $A0,$A0,$4D,$04,$4C,$4C,$4C,$4C,$4C,$4C,$4C,$4C,$21,$01,$1C,$01
            .byte $01,$01,$01,$01,$1C,$01,$01,$01,$01,$1C,$13,$A0,$A0,$75,$A0,$1B
            .byte $A0,$0F,$38,$A0,$A0,$3A,$74,$A0,$A0,$A0,$4D,$04,$1C,$27,$00,$00
            .byte $00,$00,$27,$01,$21,$01,$01,$1F,$20,$01,$1F,$20,$01,$1F,$20,$01
            .byte $01,$01,$13,$55,$54,$A0,$56,$A0,$75,$0F,$15,$A0,$A0,$32,$74,$A0
            .byte $A0,$54,$4D,$04,$01,$27,$00,$00,$00,$00,$27,$01,$21,$01,$01,$1F
            .byte $20,$01,$1F,$20,$01,$1F,$20,$01,$21,$5C,$5C,$5C,$5C,$5C,$5C,$A0
            .byte $A0,$62,$0F,$A0,$05,$38,$71,$A0,$A0,$2A,$4D,$04,$01,$27,$1F,$0D
            .byte $0D,$20,$27,$01,$21,$01,$01,$1F,$20,$01,$1F,$20,$01,$1F,$20,$01
            .byte $21,$01,$19,$19,$19,$19,$01,$A0,$A0,$62,$0F,$A0,$05,$3A,$74,$A0
            .byte $A0,$2A,$4D,$04,$01,$27,$1F,$0D,$0D,$20,$27,$01,$21,$01,$1C,$70
            .byte $70,$01,$70,$70,$1C,$70,$70,$01,$21,$01,$19,$19,$19,$19,$01,$A0
            .byte $A0,$62,$0E,$54,$05,$32,$74,$A0,$54,$2A,$4D,$04,$01,$27,$00,$0D
            .byte $0D,$00,$27,$01,$21,$01,$01,$01,$01,$1C,$01,$01,$01,$01,$01,$1C
            .byte $21,$01,$19,$19,$19,$19,$01,$A0,$61,$62,$38,$08,$08,$0F,$08,$00
            .byte $14,$14,$00,$14,$14,$0E,$07,$09,$1A,$00,$00,$00,$00,$00,$0E,$00
            .byte $00,$0E,$0E,$00,$00,$14,$0E,$00,$00,$00,$0E,$0E,$00,$00,$00,$17
            .byte $17,$62,$17,$0E,$0F,$08,$17,$0F,$0E,$17,$0E,$0E,$00,$14,$10,$09
            .byte $1A,$14,$00,$00,$0E,$0E,$14,$00,$0E,$00,$14,$00,$0E,$00,$14,$00
            .byte $00,$0E,$00,$00,$17,$08,$08,$00,$08,$17,$0E,$14,$0E,$17,$0E,$0E
            .byte $00,$17,$0E,$00,$14,$07,$09,$09,$1A,$14,$0E,$0E,$00,$0E,$00,$0E
            .byte $00,$0E,$00,$00,$0E,$00,$14,$00,$0E,$00,$0E,$08,$08,$0E,$17,$0E
            .byte $17,$0E,$17,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0
            .byte $A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$11,$11,$11,$11,$11
            .byte $11,$71,$77,$77,$77,$77,$77,$77,$77,$77,$11,$11,$11,$11,$11,$22
            .byte $22,$22,$22,$72,$77,$77,$77,$55,$55,$55,$55,$55,$55,$55,$55,$D5
            .byte $55,$55,$55,$CA,$DD,$DA,$CD,$AC,$BA,$1A,$1B,$BB,$BB,$BB,$BB,$B1
            .byte $BB,$BB,$BB,$91,$11,$B1,$BB,$DA,$AA,$DA,$AD,$DD,$AA,$BB,$B1,$BB
            .byte $BB,$BB,$BB,$BB,$BB,$BB,$BB,$9B,$11,$11,$BB,$CD,$AA,$AC,$AA,$AA
            .byte $BB,$BB,$BB,$BB,$BB,$1B,$B1,$BB,$BB,$B1,$BB,$BB,$BB,$BB,$BB,$DA
            .byte $DA,$AA,$AA,$AA,$BD,$BB,$1B,$BB,$BB,$B1,$BB,$B1,$BB,$BB,$BB,$BB
            .byte $1B,$BB,$BB,$AA,$AD,$CA,$AA,$CA,$BB,$AB,$B1,$BB,$BB,$BB,$BB,$1B
            .byte $BB,$BB,$BB,$BB,$BB,$B1,$DD,$CA,$AA,$AD,$DA,$DC,$BB,$99,$BB,$BB
            .byte $BB,$1B,$1B,$AB,$BB,$BB,$B1,$BB,$BB,$DD,$DD,$AD,$CA,$AA,$AA,$BA
            .byte $9A,$99,$C9,$BC,$AB,$CB,$BB,$AB,$B1,$BB,$BB,$BB,$DB,$DD,$DD,$DA
            .byte $AA,$DA,$CA,$BD,$99,$99,$99,$EE,$EE,$EE,$EE,$EE,$EE,$EE,$BB,$B1
            .byte $DD,$DD,$DD,$AA,$AA,$AA,$AA,$9B,$99,$99,$99,$E9,$EE,$EE,$EE,$EE
            .byte $EE,$EE,$CE,$BB,$DD,$DD,$DD,$DA,$AA,$DC,$BA,$99,$99,$99,$99,$99
            .byte $EE,$EE,$EE,$EE,$EE,$EE,$EE,$BB,$DB,$DD,$DD,$AA,$AA,$DA,$5B,$8A
            .byte $88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$BB,$D1,$DD,$DD,$AA
            .byte $AA,$AA,$5B,$8A,$DD,$88,$AA,$88,$88,$EE,$E8,$8E,$AA,$88,$A8,$BB
            .byte $BB,$DB,$DD,$AA,$AA,$B1,$5C,$8A,$DD,$88,$AA,$88,$88,$EE,$E8,$8E
            .byte $AA,$88,$A8,$BB,$BB,$AA,$AA,$AA,$BA,$1B,$5B,$8A,$88,$88,$88,$88
            .byte $88,$88,$8C,$88,$88,$8C,$A8,$CC,$AA,$AA,$AA,$AA,$BA,$1B,$5B,$FA
            .byte $FF,$FF,$FF,$8F,$C8,$88,$88,$C8,$88,$88,$AC,$CC,$AA,$D1,$AA,$AA
            .byte $AA,$BB,$5B,$8A,$A9,$AA,$9A,$88,$88,$EE,$E8,$8E,$EE,$88,$A8,$CA
            .byte $AD,$AB,$AA,$AA,$AA,$BB,$5C,$8A,$A9,$AA,$9A,$88,$88,$EE,$E8,$8E
            .byte $EE,$88,$EE,$EE,$EE,$BB,$AA,$AA,$AA,$BB,$5A,$8A,$A9,$EE,$9A,$88
            .byte $88,$EE,$E8,$8E,$EE,$88,$FD,$FF,$DF,$BB,$AA,$AA,$AA,$BB,$5A,$8A
            .byte $A9,$EE,$9A,$88,$C8,$88,$88,$C8,$88,$88,$FD,$FF,$DF,$BC,$AA,$AC
            .byte $AA,$CC,$5A,$8A,$A9,$EE,$9A,$88,$88,$88,$8C,$88,$88,$8C,$FD,$FF
            .byte $DF,$AC,$AA,$DD,$DB,$DD,$DD,$DD,$DD,$DD,$DD,$DD,$DD,$DD,$DD,$DD
            .byte $DD,$DD,$DD,$DD,$DD,$DD,$DD,$BD,$DD,$DB,$DD,$DD,$DD,$DD,$DD,$DD
            .byte $DD,$DD,$DD,$DD,$DD,$DD,$DD,$DD,$DD,$DD,$DD,$DD,$DD,$DD,$DD,$DD
            .byte $DD,$DD,$DD,$DD,$DD,$DD,$DD,$DD,$DD,$DD,$DD,$DD,$DD,$DD,$DD,$BB
            .byte $BB,$BB,$BB,$BB,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$02
            .byte $0B,$3F,$FF,$00,$00,$00,$0A,$AF,$FF,$FF,$FF,$00,$08,$AC,$FF,$FF
            .byte $FF,$FF,$FF,$00,$00,$0C,$0C,$3C,$3F,$3F,$3F,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$0C,$3C,$3F,$3F,$3F,$FF,$FF,$FF,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$0C,$3F,$FF,$FF,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$03,$0F,$1F,$3F,$3F,$3F,$3F,$3F,$00,$80,$C0,$C0,$C0
            .byte $C0,$C0,$C0,$00,$00,$00,$00,$00,$00,$00,$00,$03,$0F,$1F,$3F,$3F
            .byte $3F,$3F,$3F,$00,$80,$C0,$C0,$C0,$C0,$C0,$C0,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$3C,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$30,$FF,$FF,$FF,$FF
            .byte $FF,$F5,$00,$00,$8A,$FF,$FD,$FD,$C4,$00,$00,$FF,$FF,$FF,$3F,$3F
            .byte $3F,$3F,$3F,$38,$FF,$FF,$FF,$FF,$FF,$C1,$00,$00,$C0,$F0,$FC,$FC
            .byte $FF,$FF,$7F,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
            .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
            .byte $FF,$FF,$FF,$FF,$FF,$7F,$7F,$7F,$7F,$7F,$FF,$FF,$FF,$FF,$FF,$F8
            .byte $C0,$C0,$C0,$FD,$F4,$50,$00,$00,$00,$00,$00,$3F,$3F,$3F,$3F,$3F
            .byte $3F,$3F,$3F,$80,$80,$80,$80,$80,$80,$80,$80,$7E,$7E,$7E,$7E,$7E
            .byte $FE,$FE,$7E,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$1F,$1F,$0F,$0F,$0F
            .byte $0F,$0F,$1F,$E0,$E0,$E0,$E0,$F0,$F0,$F0,$F0,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$1F,$1F,$17,$17,$1F,$17,$17,$1F,$E0,$E0,$E0,$E0,$F0
            .byte $F0,$F0,$F0,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FF,$3F,$3F,$3F
            .byte $3F,$3F,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F,$00,$00,$00,$00,$C3
            .byte $FF,$FF,$FF,$3F,$3F,$BC,$FC,$FC,$D0,$40,$00,$FF,$FF,$FF,$FF,$FF
            .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
            .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
            .byte $FF,$FF,$FF,$C0,$80,$80,$80,$80,$80,$C0,$C0,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$7F,$FF,$7F,$7F,$7F,$7F,$FF,$FF,$C0,$C0,$C5,$D7,$FF
            .byte $FF,$FF,$FF,$FE,$FE,$FF,$FF,$FF,$FF,$FE,$FE,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$FD,$FD,$FD,$FD,$FD,$FD,$FD,$FF,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$1F,$1F,$3F,$3F,$3F,$3F,$3F,$3F,$F0,$F0,$F0,$F0,$E0
            .byte $E0,$C0,$C0,$00,$00,$00,$00,$00,$00,$00,$00,$1F,$1F,$3F,$3F,$3F
            .byte $3F,$3F,$3F,$F0,$F0,$F0,$F0,$E0,$E0,$C0,$C0,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FD,$C0,$FF,$FF,$FF,$FF
            .byte $FF,$50,$40,$00,$A8,$FF,$FF,$F5,$50,$00,$00,$3F,$3F,$3F,$3F,$3F
            .byte $3F,$3F,$3F,$FF,$FC,$C0,$F0,$F0,$FC,$7C,$7F,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
            .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
            .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$C0,$C0,$C0,$C0,$C0
            .byte $C0,$C0,$C3,$00,$00,$00,$00,$00,$00,$2A,$FF,$FF,$FF,$3F,$3F,$3F
            .byte $3F,$3F,$3F,$F8,$A0,$C0,$C0,$C0,$C0,$C0,$C0,$FC,$FC,$FC,$FC,$FC
            .byte $FE,$FE,$FE,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FF,$FF,$FF,$FF
            .byte $FF,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$3F,$3F,$3F,$3F,$3F
            .byte $BF,$BF,$BF,$C0,$C0,$C0,$C0,$C0,$C0,$C0,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$3F,$3F,$3F,$3F,$3F,$7F,$7F,$7F,$C0,$C0,$C0,$C0,$C0
            .byte $C0,$C0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$BF,$BD,$BD,$BD,$FD
            .byte $FD,$FD,$FD,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$05,$3E,$1E,$1E,$1E,$1E,$1E,$1E,$1E,$3F,$3F,$0F,$0F,$03
            .byte $03,$00,$00,$00,$00,$C0,$C0,$D0,$F0,$F4,$F4,$FF,$FF,$FF,$FF,$FF
            .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
            .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
            .byte $FF,$FF,$3C,$FF,$FF,$FF,$FF,$FF,$FF,$F0,$00,$FF,$FF,$FF,$FF,$FF
            .byte $F0,$00,$00,$3F,$3F,$1F,$1F,$1F,$1F,$1F,$07,$C0,$C0,$80,$80,$80
            .byte $80,$80,$00,$FE,$FE,$FE,$FE,$FC,$3C,$3C,$30,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$3F,$2F,$2F,$2F,$0F,$0B,$0B,$0B,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$FF,$FF,$FF,$FF,$7F,$7F,$3F,$3F,$FF,$FF,$FF,$FF,$FF
            .byte $FF,$FE,$C0,$54,$FD,$FF,$FE,$F8,$E0,$00,$00,$FF,$FF,$FF,$FF,$7F
            .byte $7F,$3F,$3F,$FF,$FF,$FF,$FF,$FF,$FF,$FD,$C0,$A8,$FE,$FF,$FE,$F4
            .byte $D0,$00,$00,$BF,$BF,$FF,$FF,$FF,$FF,$FF,$3F,$30,$FF,$FF,$FF,$FF
            .byte $FF,$F0,$00,$55,$DF,$FF,$FE,$E8,$80,$00,$00,$1F,$0F,$0F,$07,$07
            .byte $07,$05,$04,$00,$00,$00,$00,$00,$00,$00,$00,$34,$3D,$2D,$2D,$0D
            .byte $0D,$0D,$09,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
            .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
            .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
            .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$00,$FF,$FF,$FF
            .byte $FF,$FF,$FF,$FF,$FF,$FF,$00,$FF,$FF,$FF,$FD,$FF,$00,$FF,$FF,$FF
            .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$00,$FF,$FF,$FF,$FF,$FF,$FF
            .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
            .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FD,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$00,$FF,$FF,$FF
            .byte $FF,$FF,$FF,$FF,$FF,$FF,$00,$FF,$FF,$FF,$FD,$FF,$00,$FF,$FF,$FF
            .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$00,$FF,$FF,$FF,$FF,$FF,$FF
            .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
            .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FD,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$00,$FF,$FF,$FF
            .byte $FF,$FF,$FF,$FF,$FF,$FF,$00,$FF,$FF,$FF,$FD,$FF,$00,$FF,$FF,$FF
            .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$00,$FF,$FF,$FF,$FF,$FF,$FF
            .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
            .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FD,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$BF,$00,$FF,$FF,$FF
            .byte $FF,$FF,$FF,$FF,$FF,$FF,$00,$FF,$FF,$FF,$FD,$FF,$00,$FF,$FF,$FF
            .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$00,$FF,$FF,$FF,$FF,$FF,$FF
            .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
            .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FD,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$00,$FF,$FF,$FF
            .byte $FF,$FF,$FF,$FF,$FF,$FF,$00,$FF,$FF,$FF,$FD,$FF,$00,$FF,$FF,$FF
            .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$00,$FF,$FF,$FF,$FF,$FF,$FF
            .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
            .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FD,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$00,$FF,$FF,$FF
            .byte $FF,$FF,$FF,$FF,$FF,$FF,$00,$FF,$FF,$FF,$FD,$FF,$00,$FF,$FF,$FF
            .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$00,$FF,$FF,$FF,$FF,$FF,$FF
            .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
            .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FD,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$00,$FF,$FF,$FF
            .byte $FF,$FF,$FF,$FF,$FF,$FF,$00,$FF,$FF,$FF,$FD,$FF,$00,$FF,$FF,$FF
            .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$00,$FF,$FF,$FF,$FF,$FF,$FF
            .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
            .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FD,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$BF,$00,$FF,$FF,$FF
            .byte $FF,$FF,$FF,$FF,$FF,$FF,$00,$FF,$FF,$FF,$FD,$FF,$00,$FF,$FF,$FF
            .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$00,$FF,$FF,$FF,$FF,$FF,$FF
            .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
            .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FD,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$00,$FF,$FF,$FF
            .byte $FF,$FF,$FF,$FF,$FF,$FF,$00,$FF,$FF,$FF,$FD,$FF,$00,$FF,$FF,$FF
            .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$00,$FF,$FF,$FF,$FF,$FF,$FF
            .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
            .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FD,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$00,$FF,$FF,$FF
            .byte $FF,$FF,$FF,$FF,$FF,$FF,$00,$FF,$FF,$FF,$FD,$FF,$00,$FF,$FF,$FF
            .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$00,$FF,$FF,$FF,$FF,$FF,$FF
            .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
            .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FD,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$00,$FF,$FF,$FF
            .byte $FF,$FF,$FF,$FF,$FF,$FF,$00,$FF,$FF,$FF,$FD,$FF,$00,$FF,$FF,$FF
            .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$00,$FF,$FF,$FF,$FF,$FF,$FF
            .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
            .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FD,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$00,$FF,$FF,$FF
            .byte $FF,$FF,$FF,$FF,$FF,$FF,$00,$FF,$FF,$FF,$FD,$FF,$00,$FF,$FF,$FF
            .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$00,$FF,$FF,$FF,$FF,$FF,$FF
            .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
            .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FD,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$BF,$00,$FF,$FF,$FF
            .byte $FF,$FF,$FF,$FF,$FF,$FF,$00,$FF,$FF,$FF,$ED,$FF,$00,$FF,$FF,$FF
            .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$00,$FF,$FF,$FF,$FF,$FF,$FF
            .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
            .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FD,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$00,$FF,$FF,$FF
            .byte $FF,$FF,$FF,$FF,$FF,$FF,$00,$FF,$FF,$FF,$FD,$FF,$00,$FF,$FF,$FF
            .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$00,$FF,$FF,$FF,$FF,$FF,$FF
            .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
            .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FD,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$00,$FF,$FF,$FF
            .byte $FF,$FF,$FF,$FF,$FF,$FF,$00,$FF,$FF,$FF,$FD,$FF,$00,$FF,$FF,$FF
            .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$00,$FF,$FF,$FF,$FF,$FF,$FF
            .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
            .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FD,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$BF,$00,$FF,$FF,$FF
            .byte $FF,$FF,$FF,$FF,$FF,$FF,$00,$FF,$FF,$FF,$FD,$FF,$00,$FF,$FF,$FF
            .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$00,$FF,$FF,$FF,$FF,$FF,$FF
            .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
            .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FD,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$00,$FF,$FF,$FF
            .byte $FF,$FF,$FF,$FF,$FF,$FF,$00,$FF,$FF,$FF,$ED,$FF,$00,$FF,$FF,$FF
            .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$00,$FF,$FF,$FF,$FF,$FF,$FF
            .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
            .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FD,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$00,$FF,$FF,$FF
            .byte $FF,$FF,$FF,$FF,$FF,$FF,$00,$FF,$FF,$FF,$FD,$FF,$00,$FF,$FF,$FF
            .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$00,$FF,$FF,$FF,$FF,$FF,$FF
            .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
            .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FD,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$00,$FF,$FF,$FF
            .byte $FF,$FF,$FF,$FF,$FF,$FF,$00,$FF,$FF,$FF,$EF,$FF,$00,$FF,$FF,$FF
            .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$02,$FF,$FF,$FF,$FF,$FF,$FF
            .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
            .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$02,$02,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$02,$00,$00,$00,$00,$00,$00,$00,$02,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$00,$FF,$FF,$FF
            .byte $FF,$FF,$FF,$FF,$FF,$FF,$00,$FF,$FF,$FF,$EF,$FF,$00,$FF,$FF,$FF
            .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$02,$FF,$FF,$FF,$FF,$FF,$FF
            .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
            .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FD,$02,$02,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
            .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00

; Memory $C000

l_C000
                    LDA $CF46,X                     ; (C000) Load A with $CF46,X
                    AND SpriteEnableRegister        ; (C003) Logical AND with Accumulator $D015
                    BEQ l_C00E                      ; (C006) Branch to $C00E if Equal
                    NOP                             ; (C008) No operation
                    NOP                             ; (C009) No operation
                    NOP                             ; (C00A) No operation
                    JMP l_CA70                      ; (C00B) Jump to $CA70

l_C00E
                    JMP l_CD55                      ; (C00E) Jump to $CD55

l_C011
                    LDA $4555                       ; (C011) Load A with $4555
                    CMP #$FF                        ; (C014) Subtract #$FF from A (255 / 11111111)
                    BEQ l_C031                      ; (C016) Branch to $C031 if Equal
                    DEC $CF43                       ; (C018) Decrement $CF43
                    JSR l_C525                      ; (C01B) Jump to Subroutine at $C525
                    BNE l_C031                      ; (C01E) Branch to $C031 if Not Equal
                    LDA $4555                       ; (C020) Load A with $4555
                    STA $CF43                       ; (C023) Store A to $CF43
                    LDA ScreenControl               ; (C026) Load A with $D016
                    AND #$F7                        ; (C029) Logical AND with Accumulator and #$F7 (247 / 11110111)
                    STA ScreenControl               ; (C02B) Store A to $D016
                    JSR l_C46B                      ; (C02E) Jump to Subroutine at $C46B

l_C031
                    RTS                             ; (C031) Return from Subroutine

l_C032
                    LDA $4517                       ; (C032) Load A with $4517
                    JMP l_C144                      ; (C035) Jump to $C144

; Memory $C038
            .byte $A9,$90,$85,$FB,$A9,$04,$85,$FC,$A9,$00,$A0,$00,$A2,$00,$20,$D4
            .byte $51,$20,$CC,$2A,$A0,$00,$E6,$FB,$D0,$02,$E6,$FC,$E0,$07,$D0,$EE
            .byte $E6,$FB,$D0,$02,$E6,$FC,$E8,$E0,$28,$D0,$F5,$C9,$7E,$D0,$DD,$60
            .byte $20,$08,$C1,$A0,$00,$A9,$78,$85,$FB,$A9,$04,$85,$FC,$A2,$00,$B9
            .byte $00,$C1,$3D,$A0,$30,$D0,$04,$A9,$A0,$91,$FB,$C8,$C0,$08,$D0,$EF
            .byte $A0,$00,$E8,$A9,$28,$E6,$FB,$D0,$02,$E6,$FC,$18,$E9,$00,$C9,$00
            .byte $D0,$F3,$E0,$08,$D0,$D9,$60,$EA,$EA,$EA,$A9,$00,$85,$FB,$A9,$04
            .byte $85,$FC,$A0,$00,$A9,$A0,$91,$FB,$E6,$FB,$D0,$02,$E6,$FC,$A5,$FB
            .byte $C9,$E8,$D0,$F0,$A5,$FC,$C9,$07,$D0,$EA,$A9,$00,$85,$FB,$A9,$D8
            .byte $85,$FC,$A0,$00,$A9,$0B,$91,$FB,$E6,$FB,$D0,$02,$E6,$FC,$A5,$FB
            .byte $C9,$E8,$D0,$F0,$A5,$FC,$C9,$DB,$D0,$EA,$60,$01

; Memory $C0E4

Sub_UpdateEnemySprites
                    JSR l_5662                      ; (C0E4) Jump to Subroutine at $5662
                    JSR l_CB24                      ; (C0E7) Jump to Subroutine at $CB24
                    LDA $C0E3                       ; (C0EA) Load A with $C0E3
                    TAX                             ; (C0ED) Transfer A to X
                    LDA $CF46,X                     ; (C0EE) Load A with $CF46,X
                    ORA SpriteEnableRegister        ; (C0F1) Logical OR with Accumulator and $D015
                    STA SpriteEnableRegister        ; (C0F4) Store A to $D015
                    LDA $CF68,X                     ; (C0F7) Load A with $CF68,X
                    STA $07FA,X                     ; (C0FA) Store A to $07FA,X
                    JMP l_C6E0                      ; (C0FD) Jump to $C6E0

; Memory $C100
            .byte $80,$40,$20,$10,$08,$04,$02,$01,$A0,$00,$A9,$78,$85,$FB,$A9,$04
            .byte $85,$FC,$A2,$00,$A9,$80,$91,$FB,$C8,$C0,$08,$D0,$F7,$A0,$00,$E8
            .byte $A9,$28,$E6,$FB,$D0,$02,$E6,$FC,$18,$E9,$00,$C9,$00,$D0,$F3,$E0
            .byte $08,$D0,$E1,$60,$00,$00,$00,$60,$00,$A9,$00,$9D,$00,$D4,$E8,$E0
            .byte $18,$D0,$F8,$60

; Memory $C144

l_C144
                    STA Sprite0_Y                   ; (C144) Store A to $D001
                    LDA $4516                       ; (C147) Load A with $4516
                    STA Sprite0_X                   ; (C14A) Store A to $D000
                    JMP l_C1E1                      ; (C14D) Jump to $C1E1

; Memory $C150
            .byte $A2,$00,$BD,$40,$3C,$8D,$BE,$C1,$29,$55,$0A,$8D,$BD,$C1,$AD,$BE
            .byte $C1,$29,$AA,$4A,$0D,$BD,$C1,$9D,$40,$3C,$E8,$E0,$40,$D0,$E3,$60
            .byte $A2,$00,$A9,$20,$9D,$EE,$05,$9D,$EE,$06,$9D,$3C,$05,$E8,$E0,$00
            .byte $D0,$F2,$60,$EA,$EA,$4C,$4A,$54,$00,$30,$00,$34,$E8,$03,$00,$4E
            .byte $00,$52,$00,$30,$E8,$03,$E8,$07,$00,$4E,$EA,$01,$00

; Memory $C19D

l_C19D
                    LDA $45FF                       ; (C19D) Load A with $45FF
                    BNE l_C1A8                      ; (C1A0) Branch to $C1A8 if Not Equal
                    LDA SpriteEnableRegister        ; (C1A2) Load A with $D015
                    JMP l_C7D4                      ; (C1A5) Jump to $C7D4

l_C1A8
                    LDA $C19C                       ; (C1A8) Load A with $C19C
                    BEQ l_C1B0                      ; (C1AB) Branch to $C1B0 if Equal
                    JMP l_C819                      ; (C1AD) Jump to $C819

l_C1B0
                    JMP l_5418                      ; (C1B0) Jump to $5418

; Memory $C1B3
            .byte $EA

; Memory $C1B4

l_C1B4
                    NOP                             ; (C1B4) No operation
                    LDA #$00                        ; (C1B5) Set A to #$00 (0 / 00000000)
                    STA $2A7E                       ; (C1B7) Store A to $2A7E
                    JMP l_2A72                      ; (C1BA) Jump to $2A72

; Memory $C1BD
            .byte $00,$00,$00,$AD,$00,$DC,$A0,$00,$A2,$00,$4A,$B0,$01,$88,$4A,$B0
            .byte $01,$C8,$4A,$B0,$01,$CA,$4A,$B0,$01,$E8,$4A,$8E,$ED,$C1,$8C,$EC
            .byte $C1,$4C,$30,$C2

; Memory $C1E1

l_C1E1
                    LDA Sprite_upper_X              ; (C1E1) Load A with $D010
                    AND #$FE                        ; (C1E4) Logical AND with Accumulator and #$FE (254 / 11111110)
                    ORA $4518                       ; (C1E6) Logical OR with Accumulator and $4518
                    JMP l_C407                      ; (C1E9) Jump to $C407

; Memory DownInput
            .byte $00,$00,$00,$AE,$8D,$02,$A5,$C5,$AC,$45,$32,$C9,$40,$F0,$1A,$C9
            .byte $07,$F0,$17,$C9,$02,$F0,$03,$4C,$26,$C2,$E0,$00,$F0,$06,$A9,$FF
            .byte $8D,$ED,$C1,$60,$A9,$01,$8D,$ED,$C1,$60,$E0,$00,$F0,$06,$A9,$FF
            .byte $8D,$EC,$C1,$60,$A9,$01,$8D,$EC,$C1,$60,$C9,$3C,$D0,$FB,$A9,$01
            .byte $8D,$EE,$C1,$60,$B0,$08,$A9,$01,$8D,$EE,$C1,$4C,$EF,$C1,$A9,$00
            .byte $8D,$EE,$C1,$4C,$EF,$C1,$A0,$38,$EE,$00,$D0,$AD,$00,$D0,$C9,$00
            .byte $D0,$08,$AD,$10,$D0,$09,$01,$8D,$10,$D0,$88,$C0,$00,$A9,$00,$A2
            .byte $00,$E8,$E0,$00,$D0,$FB,$AA,$E8,$8A,$C9,$06,$D0,$F2,$C0,$00,$D0
            .byte $D7,$60,$A0,$28,$CE,$00,$D0,$AD,$00,$D0,$C9,$FF,$D0,$08,$AD,$10
            .byte $D0,$29,$FE,$8D,$10,$D0,$88,$C0,$00,$A9,$00,$A2,$00,$E8,$E0,$00
            .byte $D0,$FB,$AA,$E8,$8A,$C9,$06,$D0,$F2,$C0,$00,$D0,$D7,$60,$EA,$EA
            .byte $EA

; Memory $C29D

l_C29D
                    LDA #$00                        ; (C29D) Set A to #$00 (0 / 00000000)
                    STA $FB                         ; (C29F) Store A to $FB
                    LDA #$A8                        ; (C2A1) Set A to #$A8 (168 / 10101000)
                    STA $FC                         ; (C2A3) Store A to $FC
                    LDA #$00                        ; (C2A5) Set A to #$00 (0 / 00000000)
                    STA $FD                         ; (C2A7) Store A to $FD
                    LDA #$30                        ; (C2A9) Set A to #$30 (48 / 00110000)
                    STA $FE                         ; (C2AB) Store A to $FE
                    LDA #$FF                        ; (C2AD) Set A to #$FF (255 / 11111111)
                    STA $0390                       ; (C2AF) Store A to $0390
                    LDA #$AB                        ; (C2B2) Set A to #$AB (171 / 10101011)
                    STA $0391                       ; (C2B4) Store A to $0391
                    LDY #$00                        ; (C2B7) Load Y with #$00 (0 / 00000000)

l_C2B9
                    LDA ($FB),Y                     ; (C2B9) Load A with ($FB),Y
                    STA ($FD),Y                     ; (C2BB) Store A to ($FD),Y
                    INC $FB                         ; (C2BD) Increment Memory $FB
                    BNE l_C2C3                      ; (C2BF) Branch to $C2C3 if Not Equal
                    INC $FC                         ; (C2C1) Increment Memory $FC

l_C2C3
                    INC $FD                         ; (C2C3) Increment Memory $FD
                    BNE l_C2C9                      ; (C2C5) Branch to $C2C9 if Not Equal
                    INC $FE                         ; (C2C7) Increment Memory $FE

l_C2C9
                    LDA $0391                       ; (C2C9) Load A with $0391
                    CMP $FC                         ; (C2CC) Subtract $FC from A
                    BNE l_C2B9                      ; (C2CE) Branch to $C2B9 if Not Equal
                    LDA $0390                       ; (C2D0) Load A with $0390
                    CMP $FB                         ; (C2D3) Subtract $FB from A
                    BNE l_C2B9                      ; (C2D5) Branch to $C2B9 if Not Equal
                    RTS                             ; (C2D7) Return from Subroutine

; Memory $C2D8
            .byte $A2,$00,$A9,$0B,$9D,$00,$D8,$9D,$00,$D9,$9D,$00,$DA,$9D,$00,$DB
            .byte $A9,$A0,$9D,$00,$04,$9D,$00,$05,$9D,$00,$06,$9D,$00,$07,$E8,$E0
            .byte $00,$D0,$DF,$60,$EA,$EA,$EA,$EA,$0C,$2D,$51,$66,$91,$C3,$FA,$18
            .byte $5A,$A3,$CC,$23,$86,$F4,$30,$B4,$47,$98,$47,$0C,$E9,$61,$68,$8F
            .byte $30,$8F,$18,$D2,$C3,$D1,$1F,$60,$1E,$31,$A5,$87,$A2,$3E,$C1,$3C
            .byte $63,$4B,$0F,$45,$7D,$83,$79,$C7,$97,$1E,$8B,$FA,$06,$F3,$8F,$2E
            .byte $10,$C3,$12,$D1,$15,$1F,$16,$60,$01,$01,$01,$01,$01,$01,$01,$02
            .byte $02,$02,$02,$03,$03,$03,$04,$04,$05,$05,$06,$07,$07,$08,$09,$0A
            .byte $0B,$0C,$0E,$0F,$10,$12,$15,$16,$19,$1C,$1F,$21,$25,$2A,$2C,$32
            .byte $38,$3F,$43,$4B,$54,$59,$64,$70,$7E,$86,$96,$A8,$B3,$C8,$E1,$FD
            .byte $FD,$FD

; Memory $C37A

l_C37A
                    TYA                             ; (C37A) Transfer Y to A
                    JSR Sub_UpdateSpritePositions                      ; (C37B) Jump to Subroutine at $C900
                    RTS                             ; (C37E) Return from Subroutine

; Memory $C37F
            .byte $EA,$AE,$80,$03,$EE,$80,$03,$BD,$00,$40,$C9,$00,$F0,$18,$C9,$FF
            .byte $F0,$0C,$C9,$FE,$F0,$08,$C9,$FD,$F0,$04,$C9,$FC,$D0,$0C,$A9,$00
            .byte $8D,$FF,$FF,$8D,$FF,$FF,$60,$21,$EA,$EA,$A8,$A9,$FE,$2D,$FF,$FF
            .byte $8D,$FF,$FF,$98,$EA,$AA,$BD,$00,$C3,$8D,$FF,$FF,$BD,$40,$C3,$8D
            .byte $FF,$FF,$AD,$A6,$C3,$8D,$FF,$FF,$60,$EA,$EA,$EA,$AE,$80,$03,$BD
            .byte $00,$40,$F0,$09,$30,$07,$AC,$A6,$C3,$88,$8C,$FF,$FF,$60,$CE,$01
            .byte $D0,$CE,$03,$D0,$CE,$05,$D0,$CE,$07,$D0,$CE,$09,$D0,$CE,$0B,$D0
            .byte $CE,$0D,$D0,$CE,$0F,$D0,$60,$A9,$00,$8D,$FF,$CE,$20,$24,$CB,$EE
            .byte $FF,$CE,$AD,$FF,$CE,$D0,$F5,$60

; Memory $C407

l_C407
                    STA Sprite_upper_X              ; (C407) Store A to $D010
                    LDA $4510                       ; (C40A) Load A with $4510
                    JMP l_CEF6                      ; (C40D) Jump to $CEF6

; Memory $C410
            .byte $BB,$A0

; Memory $C412

l_C412
                    LDA $D828                       ; (C412) Load A with $D828
                    STA $C410                       ; (C415) Store A to $C410
                    LDA $0428                       ; (C418) Load A with $0428
                    STA $C411                       ; (C41B) Store A to $C411
                    LDX #$00                        ; (C41E) Set X to #$00 (0 / 00000000)

l_C420
                    LDA $0429,X                     ; (C420) Load A with $0429,X
                    STA $0428,X                     ; (C423) Store A to $0428,X
                    LDA $D829,X                     ; (C426) Load A with $D829,X
                    STA $D828,X                     ; (C429) Store A to $D828,X
                    INX                             ; (C42C) Increment X
                    CPX #$D2                        ; (C42D) Subtract #$D2 from X (210 / 11010010)
                    BNE l_C420                      ; (C42F) Branch to $C420 if Not Equal
                    LDX #$00                        ; (C431) Set X to #$00 (0 / 00000000)

l_C433
                    LDA $04FA,X                     ; (C433) Load A with $04FA,X
                    STA $04F9,X                     ; (C436) Store A to $04F9,X
                    LDA $D8FA,X                     ; (C439) Load A with $D8FA,X
                    STA $D8F9,X                     ; (C43C) Store A to $D8F9,X
                    INX                             ; (C43F) Increment X
                    CPX #$FA                        ; (C440) Subtract #$FA from X (250 / 11111010)
                    BNE l_C433                      ; (C442) Branch to $C433 if Not Equal
                    LDX #$00                        ; (C444) Set X to #$00 (0 / 00000000)

l_C446
                    LDA $05F4,X                     ; (C446) Load A with $05F4,X
                    STA $05F3,X                     ; (C449) Store A to $05F3,X
                    LDA $D9F4,X                     ; (C44C) Load A with $D9F4,X
                    STA $D9F3,X                     ; (C44F) Store A to $D9F3,X
                    INX                             ; (C452) Increment X
                    CPX #$FA                        ; (C453) Subtract #$FA from X (250 / 11111010)
                    BNE l_C446                      ; (C455) Branch to $C446 if Not Equal
                    LDX #$00                        ; (C457) Set X to #$00 (0 / 00000000)

l_C459
                    LDA $06EE,X                     ; (C459) Load A with $06EE,X
                    STA $06ED,X                     ; (C45C) Store A to $06ED,X
                    LDA $DAEE,X                     ; (C45F) Load A with $DAEE,X
                    STA $DAED,X                     ; (C462) Store A to $DAED,X
                    INX                             ; (C465) Increment X
                    CPX #$FA                        ; (C466) Subtract #$FA from X (250 / 11111010)
                    BNE l_C459                      ; (C468) Branch to $C459 if Not Equal
                    RTS                             ; (C46A) Return from Subroutine

l_C46B
                    LDA CurrentRasterLine           ; (C46B) Load A with $D012
                    CMP #$4B                        ; (C46E) Subtract #$4B from A (75 / 01001011)
                    BNE l_C46B                      ; (C470) Branch to $C46B if Not Equal
                    JSR l_C412                      ; (C472) Jump to Subroutine at $C412
                    JMP l_C47F                      ; (C475) Jump to $C47F

; Memory $C478
            .byte $EA,$AD,$76,$C4,$EA,$EA,$EA

; Memory $C47F

l_C47F
                    LDA #$BF                        ; (C47F) Set A to #$BF (191 / 10111111)
                    STA $FB                         ; (C481) Store A to $FB
                    LDA #$07                        ; (C483) Set A to #$07 (7 / 00000111)
                    STA $FC                         ; (C485) Store A to $FC
                    LDA #$BF                        ; (C487) Set A to #$BF (191 / 10111111)
                    STA $FD                         ; (C489) Store A to $FD
                    LDA #$DB                        ; (C48B) Set A to #$DB (219 / 11011011)
                    STA $FE                         ; (C48D) Store A to $FE

l_C48F
                    LDY #$00                        ; (C48F) Load Y with #$00 (0 / 00000000)
                    LDA ($FB),Y                     ; (C491) Load A with ($FB),Y
                    TAX                             ; (C493) Transfer A to X
                    LDA ($FD),Y                     ; (C494) Load A with ($FD),Y
                    LDY #$28                        ; (C496) Load Y with #$28 (40 / 00101000)
                    STA ($FD),Y                     ; (C498) Store A to ($FD),Y
                    TXA                             ; (C49A) Transfer X to A
                    STA ($FB),Y                     ; (C49B) Store A to ($FB),Y
                    LDA $FB                         ; (C49D) Load A with $FB
                    CLC                             ; (C49F) Clear Carry Flag
                    SBC #$27                        ; (C4A0) Subtract with Carry #$27 (39 / 00100111)
                    BCS l_C4A8                      ; (C4A2) Branch if Carry Set $C4A8
                    DEC $FC                         ; (C4A4) Decrement $FC
                    DEC $FE                         ; (C4A6) Decrement $FE

l_C4A8
                    STA $FB                         ; (C4A8) Store A to $FB
                    STA $FD                         ; (C4AA) Store A to $FD
                    LDA $FC                         ; (C4AC) Load A with $FC
                    CMP #$03                        ; (C4AE) Subtract #$03 from A (3 / 00000011)
                    BEQ l_C4BE                      ; (C4B0) Branch to $C4BE if Equal
                    LDA $FB                         ; (C4B2) Load A with $FB
                    CMP #$27                        ; (C4B4) Subtract #$27 from A (39 / 00100111)
                    BNE l_C48F                      ; (C4B6) Branch to $C48F if Not Equal
                    LDA $FC                         ; (C4B8) Load A with $FC
                    CMP #$04                        ; (C4BA) Subtract #$04 from A (4 / 00000100)
                    BNE l_C48F                      ; (C4BC) Branch to $C48F if Not Equal

l_C4BE
                    LDA $C410                       ; (C4BE) Load A with $C410
                    STA $D84F                       ; (C4C1) Store A to $D84F
                    LDA $C411                       ; (C4C4) Load A with $C411
                    STA $044F                       ; (C4C7) Store A to $044F
                    RTS                             ; (C4CA) Return from Subroutine

; Memory $C4CB
            .byte $EA,$EA,$AD,$0E,$45,$20,$49,$C6,$60,$AD,$2A,$D0,$8D,$24,$D8,$8D
            .byte $25,$D8,$AD,$25,$D0,$8D,$F5,$45,$8D,$4D,$D8,$8D,$4C,$D8,$AD,$26
            .byte $D0,$8D,$75,$D8,$8D,$74,$D8,$8D,$F6,$45,$60,$F8,$60,$EA,$EA,$EA

; Memory $C4FB

l_C4FB
                    CMP #$01                        ; (C4FB) Subtract #$01 from A (1 / 00000001)
                    BNE l_C508                      ; (C4FD) Branch to $C508 if Not Equal

l_C4FF
                    LDA SpriteEnableRegister        ; (C4FF) Load A with $D015
                    AND #$FD                        ; (C502) Logical AND with Accumulator and #$FD (253 / 11111101)
                    STA SpriteEnableRegister        ; (C504) Store A to $D015
                    RTS                             ; (C507) Return from Subroutine

l_C508
                    LDA $07F9                       ; (C508) Load A with $07F9
                    EOR #$FF                        ; (C50B) Exclusive OR (XOR) with Accumulator and #$FF (255 / 11111111)
                    EOR #$FE                        ; (C50D) Exclusive OR (XOR) with Accumulator and #$FE (254 / 11111110)
                    STA $07F9                       ; (C50F) Store A to $07F9
                    INC $C544                       ; (C512) Increment Memory $C544
                    LDA $C544                       ; (C515) Load A with $C544
                    CMP #$05                        ; (C518) Subtract #$05 from A (5 / 00000101)
                    BNE l_C524                      ; (C51A) Branch to $C524 if Not Equal
                    LDA #$00                        ; (C51C) Set A to #$00 (0 / 00000000)
                    STA $C544                       ; (C51E) Store A to $C544
                    JMP l_C4FF                      ; (C521) Jump to $C4FF

l_C524
                    RTS                             ; (C524) Return from Subroutine

l_C525
                    LDA $CF43                       ; (C525) Load A with $CF43
                    AND #$07                        ; (C528) Logical AND with Accumulator and #$07 (7 / 00000111)
                    BNE l_C538                      ; (C52A) Branch to $C538 if Not Equal
                    LDX #$01                        ; (C52C) Set X to #$01 (1 / 00000001)
                    LDA #$03                        ; (C52E) Set A to #$03 (3 / 00000011)
                    JSR Sub_PlayerPosition                      ; (C530) Jump to Subroutine at $2A04
                    LDA #$02                        ; (C533) Set A to #$02 (2 / 00000010)
                    JSR Sub_PlayerPosition                      ; (C535) Jump to Subroutine at $2A04

l_C538
                    LDA $CF43                       ; (C538) Load A with $CF43
                    RTS                             ; (C53B) Return from Subroutine

; Memory $C53C
            .byte $EA,$EA,$00,$00,$00,$00,$00,$00,$00,$00,$00,$29,$80,$A2,$00,$BD
            .byte $40,$3C,$A8,$29,$80,$8D,$3E,$C5,$98,$29,$40,$8D,$3F,$C5,$98,$29
            .byte $20,$8D,$40,$C5,$98,$29,$10,$8D,$41,$C5,$98,$29,$08,$8D,$42,$C5
            .byte $98,$29,$04,$8D,$43,$C5,$98,$29,$02,$8D,$44,$C5,$98,$29,$01,$8D
            .byte $45,$C5,$EA,$A9,$00,$8D,$46,$C5,$AD,$45,$C5,$C9,$00,$F0,$02,$A9
            .byte $80,$0D,$46,$C5,$8D,$46,$C5,$AD,$44,$C5,$C9,$00,$F0,$02,$A9,$40
            .byte $0D,$46,$C5,$8D,$46,$C5,$AD,$43,$C5,$C9,$00,$F0,$02,$A9,$20,$0D
            .byte $46,$C5,$8D,$46,$C5,$AD,$42,$C5,$C9,$00,$F0,$02,$A9,$10,$0D,$46
            .byte $C5,$8D,$46,$C5,$AD,$41,$C5,$C9,$00,$F0,$02,$A9,$08,$0D,$46,$C5
            .byte $8D,$46,$C5,$AD,$40,$C5,$C9,$00,$F0,$02,$A9,$04,$0D,$46,$C5,$8D
            .byte $46,$C5,$AD,$3F,$C5,$C9,$00,$F0,$02,$A9,$02,$0D,$46,$C5,$8D,$46
            .byte $C5,$AD,$3E,$C5,$C9,$00,$F0,$02,$A9,$01,$0D,$46,$C5,$9D,$40,$3C
            .byte $E8,$E0,$40,$F0,$03,$4C,$4B,$C5,$60,$8F,$00

; Memory $C607

l_C607
                    DEC $CF82,X                     ; (C607) Decrement $CF82,X
                    LDA $CF82,X                     ; (C60A) Load A with $CF82,X
                    CMP #$00                        ; (C60D) Subtract #$00 from A (0 / 00000000)
                    BNE l_C645                      ; (C60F) Branch to $C645 if Not Equal
                    LDA #$0A                        ; (C611) Set A to #$0A (10 / 00001010)
                    STA $CF82,X                     ; (C613) Store A to $CF82,X
                    NOP                             ; (C616) No operation
                    NOP                             ; (C617) No operation
                    NOP                             ; (C618) No operation
                    NOP                             ; (C619) No operation
                    NOP                             ; (C61A) No operation
                    DEC $CF54,X                     ; (C61B) Decrement $CF54,X
                    LDA $CF54,X                     ; (C61E) Load A with $CF54,X
                    CMP #$00                        ; (C621) Subtract #$00 from A (0 / 00000000)
                    BNE l_C645                      ; (C623) Branch to $C645 if Not Equal
                    INC $07FA,X                     ; (C625) Increment Memory $07FA,X
                    LDA $07FA,X                     ; (C628) Load A with $07FA,X
                    CMP #$FC                        ; (C62B) Subtract #$FC from A (252 / 11111100)
                    BNE l_C63F                      ; (C62D) Branch to $C63F if Not Equal
                    LDA $CF46,X                     ; (C62F) Load A with $CF46,X
                    EOR #$FF                        ; (C632) Exclusive OR (XOR) with Accumulator and #$FF (255 / 11111111)
                    AND SpriteEnableRegister        ; (C634) Logical AND with Accumulator $D015
                    STA SpriteEnableRegister        ; (C637) Store A to $D015
                    LDA #$00                        ; (C63A) Set A to #$00 (0 / 00000000)
                    STA $CF4F,X                     ; (C63C) Store A to $CF4F,X

l_C63F
                    LDA $455B,X                     ; (C63F) Load A with $455B,X
                    STA $CF54,X                     ; (C642) Store A to $CF54,X

l_C645
                    RTS                             ; (C645) Return from Subroutine

l_C646
                    JSR l_5900                      ; (C646) Jump to Subroutine at $5900
                    JSR l_5D60                      ; (C649) Jump to Subroutine at $5D60
                    LDA $450F                       ; (C64C) Load A with $450F
                    STA BackgroundColour            ; (C64F) Store A to $D021
                    LDA #$08                        ; (C652) Set A to #$08 (8 / 00001000)
                    JSR $FFD2                       ; (C654) Jump to Subroutine at $FFD2
                    NOP                             ; (C657) No operation
                    LDA #$00                        ; (C658) Set A to #$00 (0 / 00000000)
                    STA SpriteEnableRegister        ; (C65A) Store A to $D015
                    NOP                             ; (C65D) No operation
                    NOP                             ; (C65E) No operation
                    NOP                             ; (C65F) No operation
                    LDX #$00                        ; (C660) Set X to #$00 (0 / 00000000)
                    JSR l_5E19                      ; (C662) Jump to Subroutine at $5E19
                    NOP                             ; (C665) No operation
                    NOP                             ; (C666) No operation
                    NOP                             ; (C667) No operation
                    NOP                             ; (C668) No operation
                    NOP                             ; (C669) No operation
                    NOP                             ; (C66A) No operation
                    NOP                             ; (C66B) No operation
                    NOP                             ; (C66C) No operation
                    NOP                             ; (C66D) No operation
                    NOP                             ; (C66E) No operation
                    NOP                             ; (C66F) No operation
                    NOP                             ; (C670) No operation
                    NOP                             ; (C671) No operation
                    LDX #$C0                        ; (C672) Set X to #$C0 (192 / 11000000)
                    LDY #$56                        ; (C674) Load Y with #$56 (86 / 01010110)
                    JSR l_2A80                      ; (C676) Jump to Subroutine at $2A80
                    NOP                             ; (C679) No operation
                    NOP                             ; (C67A) No operation
                    NOP                             ; (C67B) No operation
                    NOP                             ; (C67C) No operation
                    NOP                             ; (C67D) No operation
                    NOP                             ; (C67E) No operation
                    NOP                             ; (C67F) No operation
                    NOP                             ; (C680) No operation
                    NOP                             ; (C681) No operation
                    NOP                             ; (C682) No operation
                    NOP                             ; (C683) No operation
                    NOP                             ; (C684) No operation
                    NOP                             ; (C685) No operation
                    NOP                             ; (C686) No operation
                    NOP                             ; (C687) No operation
                    NOP                             ; (C688) No operation
                    NOP                             ; (C689) No operation
                    NOP                             ; (C68A) No operation
                    NOP                             ; (C68B) No operation
                    NOP                             ; (C68C) No operation
                    NOP                             ; (C68D) No operation
                    NOP                             ; (C68E) No operation
                    NOP                             ; (C68F) No operation
                    NOP                             ; (C690) No operation
                    NOP                             ; (C691) No operation
                    NOP                             ; (C692) No operation
                    NOP                             ; (C693) No operation

l_C694
                    LDA $45AB                       ; (C694) Load A with $45AB
                    BNE l_C6AC                      ; (C697) Branch to $C6AC if Not Equal
                    LDA #$00                        ; (C699) Set A to #$00 (0 / 00000000)
                    STA $CEFF                       ; (C69B) Store A to $CEFF

l_C69E
                    JSR Sub_UpdateEnemySprites                      ; (C69E) Jump to Subroutine at $C0E4
                    INC $CEFF                       ; (C6A1) Increment Memory $CEFF
                    LDA $CEFF                       ; (C6A4) Load A with $CEFF
                    CMP $45AC                       ; (C6A7) Subtract $45AC from A
                    BNE l_C69E                      ; (C6AA) Branch to $C69E if Not Equal

l_C6AC
                    JSR l_C032                      ; (C6AC) Jump to Subroutine at $C032
                    LDA #$1C                        ; (C6AF) Set A to #$1C (28 / 00011100)
                    STA VIC2MemSetup                ; (C6B1) Store A to $D018
                    LDA #$0F                        ; (C6B4) Set A to #$0F (15 / 00001111)
                    STA $FFFF                       ; (C6B6) Store A to $FFFF
                    LDA #$F8                        ; (C6B9) Set A to #$F8 (248 / 11111000)
                    STA $07FF                       ; (C6BB) Store A to $07FF
                    LDA $45B2                       ; (C6BE) Load A with $45B2
                    STA Sprite1Colour               ; (C6C1) Store A to $D028
                    LDX #$00                        ; (C6C4) Set X to #$00 (0 / 00000000)
                    NOP                             ; (C6C6) No operation
                    LDA #$00                        ; (C6C7) Set A to #$00 (0 / 00000000)

l_C6C9
                    STA $CF1A,X                     ; (C6C9) Store A to $CF1A,X
                    STA $CF29,X                     ; (C6CC) Store A to $CF29,X
                    STA $CF2E,X                     ; (C6CF) Store A to $CF2E,X
                    STA $CF4F,X                     ; (C6D2) Store A to $CF4F,X
                    INX                             ; (C6D5) Increment X
                    CPX #$05                        ; (C6D6) Subtract #$05 from X (5 / 00000101)
                    BNE l_C6C9                      ; (C6D8) Branch to $C6C9 if Not Equal
                    LDA SpriteSpriteCollision       ; (C6DA) Load A with $D01E
                    JMP l_2D00                      ; (C6DD) Jump to $2D00

l_C6E0
                    LDA $45AD,X                     ; (C6E0) Load A with $45AD,X
                    JMP l_2F38                      ; (C6E3) Jump to $2F38

; Memory $C6E6
            .byte $60

; Memory $C6E7

l_C6E7
                    TYA                             ; (C6E7) Transfer Y to A
                    PHA                             ; (C6E8) Push Accumulator to Stack
                    TXA                             ; (C6E9) Transfer X to A
                    PHA                             ; (C6EA) Push Accumulator to Stack

l_C6EB
                    LDA $CF65                       ; (C6EB) Load A with $CF65
                    STA $CF67                       ; (C6EE) Store A to $CF67

l_C6F1
                    DEC $CF67                       ; (C6F1) Decrement $CF67
                    BNE l_C6F1                      ; (C6F4) Branch to $C6F1 if Not Equal
                    DEC $CF66                       ; (C6F6) Decrement $CF66
                    BNE l_C6EB                      ; (C6F9) Branch to $C6EB if Not Equal
                    PLA                             ; (C6FB) Pull Accumulator from Stack
                    TAX                             ; (C6FC) Transfer A to X
                    PLA                             ; (C6FD) Pull Accumulator from Stack
                    TAY                             ; (C6FE) Transfer A to Y
                    RTS                             ; (C6FF) Return from Subroutine

l_C700
                    LDA $07F9                       ; (C700) Load A with $07F9
                    CLC                             ; (C703) Clear Carry Flag
                    SBC #$DF                        ; (C704) Subtract with Carry #$DF (223 / 11011111)
                    LDX #$01                        ; (C706) Set X to #$01 (1 / 00000001)
                    JSR Sub_UpdateSpritePositions                      ; (C708) Jump to Subroutine at $C900
                    CPY #$00                        ; (C70B) Subtract #$00 from Y (0 / 00000000)
                    BEQ l_C717                      ; (C70D) Branch to $C717 if Equal
                    RTS                             ; (C70F) Return from Subroutine

; Memory $C710
            .byte $EA,$EA,$EA,$EA,$EA,$EA,$EA

; Memory $C717

l_C717
                    NOP                             ; (C717) No operation
                    RTS                             ; (C718) Return from Subroutine

; Memory $C719
            .byte $EA,$EA

; Memory $C71B

l_PlayerMovementInputs
                    LDA #$00                        ; (C71B) Set A to #$00 (0 / 00000000)
                    STA $CF06                       ; (C71D) Store A to $CF06
                    JSR l_GetJoystickInputs         ; (C720) Jump to Subroutine at $C84D
                    LDA DownInput                   ; (C723) Load A with DownInput
                    CMP #$FF                        ; (C726) Subtract #$FF from A (255 / 11111111)
                    BNE l_CheckDownInput            ; (C728) Branch to $C74C if Not Equal
                    LDA $4500                       ; (C72A) Load A with $4500
                    CMP #$00                        ; (C72D) Subtract #$00 from A (0 / 00000000)
                    BEQ l_CheckDownInput            ; (C72F) Branch to $C74C if Equal
                    LDA #$00                        ; (C731) Set A to #$00 (0 / 00000000)
                    TAX                             ; (C733) Transfer A to X
                    JSR Sub_PlayerPosition                      ; (C734) Jump to Subroutine at $2A04
                    INC $CF06                       ; (C737) Increment Memory $CF06
                    LDA $4504                       ; (C73A) Load A with $4504
                    CMP #$00                        ; (C73D) Subtract #$00 from A (0 / 00000000)
                    BEQ l_CheckDownInput            ; (C73F) Branch to $C74C if Equal
                    LDA $07F8                       ; (C741) Load A with $07F8
                    AND #$01                        ; (C744) Logical AND with Accumulator and #$01 (1 / 00000001)
                    CLC                             ; (C746) Clear Carry Flag
                    ADC #$D8                        ; (C747) Add with Carry with #$D8 (216 / 11011000)
                    STA $07F8                       ; (C749) Store A to $07F8

l_CheckDownInput
                    LDA DownInput                   ; (C74C) Load A with DownInput
                    CMP #$01                        ; (C74F) Subtract #$01 from A (1 / 00000001)
                    BNE l_CheckLeftInput            ; (C751) Branch to $C776 if Not Equal
                    LDA $4501                       ; (C753) Load A with $4501
                    CMP #$00                        ; (C756) Subtract #$00 from A (0 / 00000000)
                    BEQ l_CheckLeftInput            ; (C758) Branch to $C776 if Equal
                    LDA #$01                        ; (C75A) Set A to #$01 (1 / 00000001)
                    LDX #$00                        ; (C75C) Set X to #$00 (0 / 00000000)
                    JSR Sub_PlayerPosition                      ; (C75E) Jump to Subroutine at $2A04
                    INC $CF06                       ; (C761) Increment Memory $CF06
                    LDA $4505                       ; (C764) Load A with $4505
                    CMP #$00                        ; (C767) Subtract #$00 from A (0 / 00000000)
                    BEQ l_CheckLeftInput            ; (C769) Branch to $C776 if Equal
                    LDA $07F8                       ; (C76B) Load A with $07F8
                    AND #$01                        ; (C76E) Logical AND with Accumulator and #$01 (1 / 00000001)
                    CLC                             ; (C770) Clear Carry Flag
                    ADC #$DA                        ; (C771) Add with Carry with #$DA (218 / 11011010)
                    STA $07F8                       ; (C773) Store A to $07F8

l_CheckLeftInput
                    LDA LeftRightInput              ; (C776) Load A with LeftRightInput
                    CMP #$FF                        ; (C779) Subtract #$FF from A (255 / 11111111)
                    BNE l__CheckRightInput           ; (C77B) Branch to $C7A0 if Not Equal
                    LDA $4502                       ; (C77D) Load A with $4502
                    CMP #$00                        ; (C780) Subtract #$00 from A (0 / 00000000)
                    BEQ l__CheckRightInput           ; (C782) Branch to $C7A0 if Equal
                    LDA #$02                        ; (C784) Set A to #$02 (2 / 00000010)
                    LDX #$00                        ; (C786) Set X to #$00 (0 / 00000000)
                    JSR Sub_PlayerPosition                      ; (C788) Jump to Subroutine at $2A04
                    INC $CF06                       ; (C78B) Increment Memory $CF06
                    LDA $4506                       ; (C78E) Load A with $4506
                    CMP #$00                        ; (C791) Subtract #$00 from A (0 / 00000000)
                    BEQ l__CheckRightInput           ; (C793) Branch to $C7A0 if Equal
                    LDA $07F8                       ; (C795) Load A with $07F8
                    AND #$03                        ; (C798) Logical AND with Accumulator and #$03 (3 / 00000011)
                    CLC                             ; (C79A) Clear Carry Flag
                    ADC #$E8                        ; (C79B) Add with Carry with #$E8 (232 / 11101000)
                    STA $07F8                       ; (C79D) Store A to $07F8

l__CheckRightInput
                    LDA LeftRightInput              ; (C7A0) Load A with LeftRightInput
                    CMP #$01                        ; (C7A3) Subtract #$01 from A (1 / 00000001)
                    BNE l_CheckUpInput              ; (C7A5) Branch to $C7CA if Not Equal
                    LDA $4503                       ; (C7A7) Load A with $4503
                    CMP #$00                        ; (C7AA) Subtract #$00 from A (0 / 00000000)
                    BEQ l_CheckUpInput              ; (C7AC) Branch to $C7CA if Equal
                    LDA #$03                        ; (C7AE) Set A to #$03 (3 / 00000011)
                    LDX #$00                        ; (C7B0) Set X to #$00 (0 / 00000000)
                    JSR Sub_PlayerPosition                      ; (C7B2) Jump to Subroutine at $2A04
                    INC $CF06                       ; (C7B5) Increment Memory $CF06
                    LDA $4507                       ; (C7B8) Load A with $4507
                    CMP #$00                        ; (C7BB) Subtract #$00 from A (0 / 00000000)
                    BEQ l_CheckUpInput              ; (C7BD) Branch to $C7CA if Equal
                    LDA $07F8                       ; (C7BF) Load A with $07F8
                    AND #$03                        ; (C7C2) Logical AND with Accumulator and #$03 (3 / 00000011)
                    CLC                             ; (C7C4) Clear Carry Flag
                    ADC #$EC                        ; (C7C5) Add with Carry with #$EC (236 / 11101100)
                    STA $07F8                       ; (C7C7) Store A to $07F8

l_CheckUpInput
                    LDA UpInput                     ; (C7CA) Load A with UpInput
                    CMP #$00                        ; (C7CD) Subtract #$00 from A (0 / 00000000)
                    BEQ l_C819                      ; (C7CF) Branch to $C819 if Equal
                    JMP l_C19D                      ; (C7D1) Jump to $C19D

l_C7D4
                    AND #$02                        ; (C7D4) Logical AND with Accumulator and #$02 (2 / 00000010)
                    CMP #$00                        ; (C7D6) Subtract #$00 from A (0 / 00000000)
                    BNE l_C819                      ; (C7D8) Branch to $C819 if Not Equal
                    LDA $07F8                       ; (C7DA) Load A with $07F8
                    CLC                             ; (C7DD) Clear Carry Flag
                    SBC #$D7                        ; (C7DE) Subtract with Carry #$D7 (215 / 11010111)
                    LSR A                           ; (C7E0) Logical Shift Right Accumulator
                    TAX                             ; (C7E1) Transfer A to X
                    LDA $4508,X                     ; (C7E2) Load A with $4508,X
                    CMP #$FF                        ; (C7E5) Subtract #$FF from A (255 / 11111111)
                    BEQ l_C819                      ; (C7E7) Branch to $C819 if Equal
                    CLC                             ; (C7E9) Clear Carry Flag
                    ADC #$E0                        ; (C7EA) Add with Carry with #$E0 (224 / 11100000)
                    JSR l_2D8D                      ; (C7EC) Jump to Subroutine at $2D8D
                    LDA #$02                        ; (C7EF) Set A to #$02 (2 / 00000010)
                    ORA SpriteEnableRegister        ; (C7F1) Logical OR with Accumulator and $D015
                    STA SpriteEnableRegister        ; (C7F4) Store A to $D015
                    LDA Sprite0_X                   ; (C7F7) Load A with $D000
                    STA Sprite1_X                   ; (C7FA) Store A to $D002
                    LDA Sprite0_Y                   ; (C7FD) Load A with $D001
                    STA Sprite1_Y                   ; (C800) Store A to $D003
                    LDA Sprite_upper_X              ; (C803) Load A with $D010
                    AND #$01                        ; (C806) Logical AND with Accumulator and #$01 (1 / 00000001)
                    TAY                             ; (C808) Transfer A to Y
                    LDA Sprite_upper_X              ; (C809) Load A with $D010
                    AND #$FD                        ; (C80C) Logical AND with Accumulator and #$FD (253 / 11111101)
                    STA Sprite_upper_X              ; (C80E) Store A to $D010
                    TYA                             ; (C811) Transfer Y to A
                    ASL A                           ; (C812) Arithmetic Shift Left Accumulator
                    ORA Sprite_upper_X              ; (C813) Logical OR with Accumulator and $D010
                    JSR l_2F00                      ; (C816) Jump to Subroutine at $2F00

l_C819
                    LDA $450D                       ; (C819) Load A with $450D
                    CMP #$01                        ; (C81C) Subtract #$01 from A (1 / 00000001)
                    BEQ l_C827                      ; (C81E) Branch to $C827 if Equal
                    LDA $CF06                       ; (C820) Load A with $CF06
                    CMP #$00                        ; (C823) Subtract #$00 from A (0 / 00000000)
                    BEQ l_C83F                      ; (C825) Branch to $C83F if Equal

l_C827
                    INC $CF07                       ; (C827) Increment Memory $CF07
                    LDA $CF07                       ; (C82A) Load A with $CF07
                    CMP GoSlowRedZone                       ; (C82D) Subtract GoSlowRedZone from A
                    BNE l_C83F                      ; (C830) Branch to $C83F if Not Equal
                    LDA #$00                        ; (C832) Set A to #$00 (0 / 00000000)
                    STA $CF07                       ; (C834) Store A to $CF07
                    JMP l_5980                      ; (C837) Jump to $5980

; Memory $C83A
            .byte $29,$03,$AA,$E8,$8A

; Memory $C83F

l_C83F
                    RTS                             ; (C83F) Return from Subroutine

; Memory $C840
            .byte $EA,$EA,$EA,$AD,$3C,$03,$AE,$3D,$03,$20,$00,$C9,$60

; Memory $C84D

l_GetJoystickInputs
                    LDA #$00                        ; (C84D) Set A to #$00 (0 / 00000000)
                    STA UpInput                     ; (C84F) Store A to UpInput
                    LDA $4511                       ; (C852) Load A with $4511
                    CMP #$01                        ; (C855) Subtract #$01 from A (1 / 00000001)
                    BEQ l_C861                      ; (C857) Branch to $C861 if Equal
                    LDA #$00                        ; (C859) Set A to #$00 (0 / 00000000)
                    STA DownInput                   ; (C85B) Store A to DownInput
                    STA LeftRightInput              ; (C85E) Store A to LeftRightInput

l_C861
                    LDA $C5                         ; (C861) Load A with $C5
                    CMP #$40                        ; (C863) Subtract #$40 from A (64 / 01000000)
                    BEQ l_C8AB                      ; (C865) Branch to $C8AB if Equal
                    LDA #$00                        ; (C867) Set A to #$00 (0 / 00000000)
                    STA DownInput                   ; (C869) Store A to DownInput
                    STA LeftRightInput              ; (C86C) Store A to LeftRightInput
                    LDA $C5                         ; (C86F) Load A with $C5
                    CMP $4512                       ; (C871) Subtract $4512 from A
                    BNE l_C87B                      ; (C874) Branch to $C87B if Not Equal
                    LDA #$FF                        ; (C876) Set A to #$FF (255 / 11111111)
                    STA DownInput                   ; (C878) Store A to DownInput

l_C87B
                    LDA $C5                         ; (C87B) Load A with $C5
                    CMP $4512                       ; (C87D) Subtract $4512 from A
                    BNE l_C887                      ; (C880) Branch to $C887 if Not Equal
                    LDA #$FF                        ; (C882) Set A to #$FF (255 / 11111111)
                    STA DownInput                   ; (C884) Store A to DownInput

l_C887
                    LDA $C5                         ; (C887) Load A with $C5
                    CMP $4513                       ; (C889) Subtract $4513 from A
                    BNE l_C893                      ; (C88C) Branch to $C893 if Not Equal
                    LDA #$01                        ; (C88E) Set A to #$01 (1 / 00000001)
                    STA DownInput                   ; (C890) Store A to DownInput

l_C893
                    LDA $C5                         ; (C893) Load A with $C5
                    CMP $4514                       ; (C895) Subtract $4514 from A
                    BNE l_C89F                      ; (C898) Branch to $C89F if Not Equal
                    LDA #$FF                        ; (C89A) Set A to #$FF (255 / 11111111)
                    STA LeftRightInput              ; (C89C) Store A to LeftRightInput

l_C89F
                    LDA $C5                         ; (C89F) Load A with $C5
                    CMP $4515                       ; (C8A1) Subtract $4515 from A
                    BNE l_C8AB                      ; (C8A4) Branch to $C8AB if Not Equal
                    LDA #$01                        ; (C8A6) Set A to #$01 (1 / 00000001)
                    STA LeftRightInput              ; (C8A8) Store A to LeftRightInput

l_C8AB
                    LDA $028D                       ; (C8AB) Load A with $028D
                    CMP #$00                        ; (C8AE) Subtract #$00 from A (0 / 00000000)
                    BEQ CheckJoyUp                  ; (C8B0) Branch to $C8B7 if Equal
                    LDA #$01                        ; (C8B2) Set A to #$01 (1 / 00000001)
                    STA UpInput                     ; (C8B4) Store A to UpInput

CheckJoyUp
                    JSR l_C9C4                      ; (C8B7) Jump to Subroutine at $C9C4
                    AND #$01                        ; (C8BA) Logical AND with Accumulator and #$01 (1 / 00000001)
                    CMP #$01                        ; (C8BC) Subtract #$01 from A (1 / 00000001)
                    BEQ CheckJoyDown                ; (C8BE) Branch to $C8C5 if Equal
                    LDA #$01                        ; (C8C0) Set A to #$01 (1 / 00000001)
                    STA UpInput                     ; (C8C2) Store A to UpInput

CheckJoyDown
                    LDA KeyJoy2                     ; (C8C5) Load A with $DC00. 0000 0010 down pressed.
                    AND #$02                        ; (C8C8) Logical AND with Accumulator and #$02 (2 / 00000010)
                    CMP #$02                        ; (C8CA) Subtract #$02 from A (2 / 00000010)
                    BEQ CheckJoyLeft                ; (C8CC) Branch to $C8D3 if Equal. Down input not received.
                    LDA #$01                        ; (C8CE) Set A to #$01 (1 / 00000001)
                    STA DownInput                   ; (C8D0) Store A to DownInput. Down input received.

CheckJoyLeft
                    LDA KeyJoy2                     ; (C8D3) Load A with $DC00. 0000 0100 left pressed.
                    AND #$04                        ; (C8D6) Logical AND with Accumulator and #$04 (4 / 00000100)
                    CMP #$04                        ; (C8D8) Subtract #$04 from A (4 / 00000100)
                    BEQ CheckJoyRight               ; (C8DA) Branch to $C8E1 if Equal
                    LDA #$FF                        ; (C8DC) Set A to #$FF (255 / 11111111)
                    STA LeftRightInput              ; (C8DE) Store A to LeftRightInput. Right input received.

CheckJoyRight
                    LDA KeyJoy2                     ; (C8E1) Load A with $DC00. 0000 1000 right pressed.
                    AND #$08                        ; (C8E4) Logical AND with Accumulator and #$08 (8 / 00001000)
                    CMP #$08                        ; (C8E6) Subtract #$08 from A (8 / 00001000)
                    BEQ l_C8EF                      ; (C8E8) Branch to $C8EF if Equal. RTS.
                    LDA #$01                        ; (C8EA) Set A to #$01 (1 / 00000001)
                    STA LeftRightInput              ; (C8EC) Store A to LeftRightInput. Right input received.

l_C8EF
                    RTS                             ; (C8EF) Return from Subroutine

; Memory $C8F0
            .byte $00,$DC,$29,$10,$C9,$10,$F0,$05,$A9,$01,$8D,$05,$5A,$60,$03,$05

; Memory $C900

Sub_UpdateSpritePositions
                    LDY #$FF                        ; (C900) Load Y with #$FF (255 / 11111111)
                    STA $C8FE                       ; (C902) Store A to $C8FE
                    STX $C8FF                       ; (C905) Store X to $C8FF
                    TXA                             ; (C908) Transfer X to A
                    CLC                             ; (C909) Clear Carry Flag
                    ASL A                           ; (C90A) Arithmetic Shift Left Accumulator
                    TAX                             ; (C90B) Transfer A to X
                    LDA $C8FE                       ; (C90C) Load A with $C8FE
                    CMP #$00                        ; (C90F) Subtract #$00 from A (0 / 00000000)
                    BEQ l_C920                      ; (C911) Branch to $C920 if Equal
                    CMP #$01                        ; (C913) Subtract #$01 from A (1 / 00000001)
                    BEQ l_C92D                      ; (C915) Branch to $C92D if Equal
                    CMP #$02                        ; (C917) Subtract #$02 from A (2 / 00000010)
                    BEQ l_C93A                      ; (C919) Branch to $C93A if Equal
                    CMP #$03                        ; (C91B) Subtract #$03 from A (3 / 00000011)
                    BEQ l_C96A                      ; (C91D) Branch to $C96A if Equal
                    RTS                             ; (C91F) Return from Subroutine

l_C920
                    LDA Sprite0_Y,X                 ; (C920) Load A with $D001,X
                    CMP #$32                        ; (C923) Subtract #$32 from A (50 / 00110010)
                    BEQ l_C92C                      ; (C925) Branch to $C92C if Equal
                    DEC Sprite0_Y,X                 ; (C927) Decrement $D001,X
                    LDY #$00                        ; (C92A) Load Y with #$00 (0 / 00000000)

l_C92C
                    RTS                             ; (C92C) Return from Subroutine

l_C92D
                    LDA Sprite0_Y,X                 ; (C92D) Load A with $D001,X
                    CMP #$E3                        ; (C930) Subtract #$E3 from A (227 / 11100011)
                    BEQ l_C939                      ; (C932) Branch to $C939 if Equal
                    INC Sprite0_Y,X                 ; (C934) Increment Memory $D001,X
                    LDY #$00                        ; (C937) Load Y with #$00 (0 / 00000000)

l_C939
                    RTS                             ; (C939) Return from Subroutine

l_C93A
                    LDA Sprite0_X,X                 ; (C93A) Load A with $D000,X
                    CMP #$08                        ; (C93D) Subtract #$08 from A (8 / 00001000)
                    BNE l_C951                      ; (C93F) Branch to $C951 if Not Equal
                    LDY $C8FF                       ; (C941) Load Y with $C8FF
                    LDA $C9E9,Y                     ; (C944) Load A with $C9E9,Y
                    AND Sprite_upper_X              ; (C947) Logical AND with Accumulator $D010
                    CMP #$00                        ; (C94A) Subtract #$00 from A (0 / 00000000)
                    BNE l_C951                      ; (C94C) Branch to $C951 if Not Equal
                    LDY #$FF                        ; (C94E) Load Y with #$FF (255 / 11111111)
                    RTS                             ; (C950) Return from Subroutine

l_C951
                    DEC Sprite0_X,X                 ; (C951) Decrement $D000,X
                    LDA Sprite0_X,X                 ; (C954) Load A with $D000,X
                    CMP #$FF                        ; (C957) Subtract #$FF from A (255 / 11111111)
                    BNE l_C967                      ; (C959) Branch to $C967 if Not Equal
                    LDY $C8FF                       ; (C95B) Load Y with $C8FF
                    LDA $C9E1,Y                     ; (C95E) Load A with $C9E1,Y
                    AND Sprite_upper_X              ; (C961) Logical AND with Accumulator $D010
                    STA Sprite_upper_X              ; (C964) Store A to $D010

l_C967
                    LDY #$00                        ; (C967) Load Y with #$00 (0 / 00000000)
                    RTS                             ; (C969) Return from Subroutine

l_C96A
                    LDA Sprite0_X,X                 ; (C96A) Load A with $D000,X
                    CMP #$4F                        ; (C96D) Subtract #$4F from A (79 / 01001111)
                    BNE l_C981                      ; (C96F) Branch to $C981 if Not Equal
                    LDY $C8FF                       ; (C971) Load Y with $C8FF
                    LDA $C9E9,Y                     ; (C974) Load A with $C9E9,Y
                    AND Sprite_upper_X              ; (C977) Logical AND with Accumulator $D010
                    CMP #$00                        ; (C97A) Subtract #$00 from A (0 / 00000000)
                    BEQ l_C981                      ; (C97C) Branch to $C981 if Equal
                    LDY #$FF                        ; (C97E) Load Y with #$FF (255 / 11111111)
                    RTS                             ; (C980) Return from Subroutine

l_C981
                    INC Sprite0_X,X                 ; (C981) Increment Memory $D000,X
                    LDA Sprite0_X,X                 ; (C984) Load A with $D000,X
                    CMP #$00                        ; (C987) Subtract #$00 from A (0 / 00000000)
                    BNE l_C997                      ; (C989) Branch to $C997 if Not Equal
                    LDY $C8FF                       ; (C98B) Load Y with $C8FF
                    LDA $C9E9,Y                     ; (C98E) Load A with $C9E9,Y
                    ORA Sprite_upper_X              ; (C991) Logical OR with Accumulator and $D010
                    STA Sprite_upper_X              ; (C994) Store A to $D010

l_C997
                    LDY #$00                        ; (C997) Load Y with #$00 (0 / 00000000)
                    RTS                             ; (C999) Return from Subroutine

; Memory $C99A
            .byte $EA,$EA,$EA,$EE,$14,$D0,$AE,$14,$A9,$00,$8D,$04,$CF,$A9,$00,$8D
            .byte $05,$CF,$EE,$05,$CF,$AD,$05,$CF,$C9,$FF,$D0,$F6,$EE,$04,$CF,$AD
            .byte $04,$CF,$C9,$01,$D0,$E7,$60,$EA,$EA,$EA

; Memory $C9C4

l_C9C4
                    LDA KeyJoy2                     ; (C9C4) Load A with $DC00
                    AND #$0F                        ; (C9C7) Logical AND with Accumulator and #$0F (15 / 00001111)
                    CMP #$0F                        ; (C9C9) Subtract #$0F from A (15 / 00001111)
                    BEQ l_C9DB                      ; (C9CB) Branch to $C9DB if Equal
                    LDA $C5                         ; (C9CD) Load A with $C5
                    CMP #$40                        ; (C9CF) Subtract #$40 from A (64 / 01000000)
                    BNE l_C9DB                      ; (C9D1) Branch to $C9DB if Not Equal
                    LDA #$00                        ; (C9D3) Set A to #$00 (0 / 00000000)
                    STA DownInput                       ; (C9D5) Store A to DownInput
                    STA LeftRightInput                       ; (C9D8) Store A to LeftRightInput

l_C9DB
                    LDA KeyJoy2                     ; (C9DB) Load A with $DC00
                    RTS                             ; (C9DE) Return from Subroutine

; Memory $C9DF
            .byte $EA,$EA,$FE,$FD,$FB,$F7,$EF,$DF,$BF,$7F,$01,$02,$04,$08,$10,$20
            .byte $40,$80

; Memory $C9F1

l_C9F1
                    INC $CF14                       ; (C9F1) Increment Memory $CF14
                    LDX $CF14                       ; (C9F4) Load X with $CF14
                    LDA $C000,X                     ; (C9F7) Load A with $C000,X
                    EOR $A2                         ; (C9FA) Exclusive OR (XOR) with Accumulator $A2
                    TAY                             ; (C9FC) Transfer A to Y
                    LDX #$20                        ; (C9FD) Set X to #$20 (32 / 00100000)
                    RTS                             ; (C9FF) Return from Subroutine

l_CA00
                    JSR l_75B0                      ; (CA00) Jump to Subroutine at $75B0
                    JSR l_5800                      ; (CA03) Jump to Subroutine at $5800
                    CMP #$08                        ; (CA06) Subtract #$08 from A (8 / 00001000)
                    BNE l_CA12                      ; (CA08) Branch to $CA12 if Not Equal
                    LDA #$00                        ; (CA0A) Set A to #$00 (0 / 00000000)
                    STA $CF02                       ; (CA0C) Store A to $CF02
                    JSR l_C700                      ; (CA0F) Jump to Subroutine at $C700

l_CA12
                    INC $CF03                       ; (CA12) Increment Memory $CF03
                    LDA $CF03                       ; (CA15) Load A with $CF03
                    CMP #$20                        ; (CA18) Subtract #$20 from A (32 / 00100000)
                    BNE l_CA24                      ; (CA1A) Branch to $CA24 if Not Equal
                    LDA #$00                        ; (CA1C) Set A to #$00 (0 / 00000000)
                    STA $CF03                       ; (CA1E) Store A to $CF03
                    JSR l_PlayerMovementInputs      ; (CA21) Jump to Subroutine at $C71B

l_CA24
                    JMP l_2D4B                      ; (CA24) Jump to $2D4B

l_CA27
                    LDA #$00                        ; (CA27) Set A to #$00 (0 / 00000000)
                    STA $CEFF                       ; (CA29) Store A to $CEFF

l_CA2C
                    LDA $CEFF                       ; (CA2C) Load A with $CEFF
                    JSR l_CDE9                      ; (CA2F) Jump to Subroutine at $CDE9
                    INC $CEFF                       ; (CA32) Increment Memory $CEFF
                    LDA $CEFF                       ; (CA35) Load A with $CEFF
                    CMP #$05                        ; (CA38) Subtract #$05 from A (5 / 00000101)
                    BNE l_CA2C                      ; (CA3A) Branch to $CA2C if Not Equal
                    JSR l_CCF5                      ; (CA3C) Jump to Subroutine at $CCF5
                    JSR l_CE87                      ; (CA3F) Jump to Subroutine at $CE87
                    LDA $CF81                       ; (CA42) Load A with $CF81
                    CMP #$01                        ; (CA45) Subtract #$01 from A (1 / 00000001)
                    BNE l_CA51                      ; (CA47) Branch to $CA51 if Not Equal
                    LDA #$00                        ; (CA49) Set A to #$00 (0 / 00000000)
                    STA $CF81                       ; (CA4B) Store A to $CF81
                    JMP l_C694                      ; (CA4E) Jump to $C694

l_CA51
                    JSR l_C011                      ; (CA51) Jump to Subroutine at $C011
                    JSR Sub_StartEnemyUpdate        ; (CA54) Jump to Subroutine at $2FB2
                    LDA $CF7F                       ; (CA57) Load A with $CF7F
                    CMP #$FF                        ; (CA5A) Subtract #$FF from A (255 / 11111111)
                    BNE l_CA61                      ; (CA5C) Branch to $CA61 if Not Equal
                    JMP l_2CB4                      ; (CA5E) Jump to $2CB4

l_CA61
                    JMP l_CA00                      ; (CA61) Jump to $CA00

l_CA64
                    LDA $CF06,X                     ; (CA64) Load A with $CF06,X
                    AND SpriteEnableRegister        ; (CA67) Logical AND with Accumulator $D015
                    BEQ l_CA6F                      ; (CA6A) Branch to $CA6F if Equal
                    JSR l_C37A                      ; (CA6C) Jump to Subroutine at $C37A

l_CA6F
                    RTS                             ; (CA6F) Return from Subroutine

l_CA70
                    LDA $CF4F,X                     ; (CA70) Load A with $CF4F,X
                    CMP #$01                        ; (CA73) Subtract #$01 from A (1 / 00000001)
                    BEQ l_CA7D                      ; (CA75) Branch to $CA7D if Equal
                    LDA $454E,X                     ; (CA77) Load A with $454E,X
                    JMP l_CD17                      ; (CA7A) Jump to $CD17

l_CA7D
                    JMP l_CD55                      ; (CA7D) Jump to $CD55

; Memory $CA80
            .byte $20,$E1,$2B,$EA,$EA,$EA,$A9,$FC,$8D,$F8,$07,$AD,$88,$45,$8D,$FF
            .byte $FF,$AD,$89,$45,$8D,$FF,$FF,$AD,$8A,$45,$8D,$FF,$FF,$A9,$00,$8D
            .byte $60,$CF,$A9,$00,$8D,$63,$CF,$AD,$60,$CF,$A8,$B9,$8B,$45,$A8,$B9
            .byte $00,$C3,$8D,$FF,$FF,$B9,$40,$C3,$8D,$FF,$FF,$A9,$20,$8D,$65,$CF
            .byte $A9,$40,$8D,$66,$CF,$20,$E7,$C6,$EE,$63,$CF,$AD,$63,$CF,$C9,$08
            .byte $F0,$06,$EE,$60,$CF,$4C,$A7,$CA,$AD,$F8,$07,$C9,$FF,$F0,$06,$EE
            .byte $F8,$07,$4C,$A2,$CA,$AC,$88,$45,$88,$4C,$F9,$CA,$60

; Memory $CAED

l_CAED
                    DEC $CF7C                       ; (CAED) Decrement $CF7C
                    LDA #$01                        ; (CAF0) Set A to #$01 (1 / 00000001)
                    STA SpriteEnableRegister        ; (CAF2) Store A to $D015
                    JSR l_56BC                      ; (CAF5) Jump to Subroutine at $56BC
                    RTS                             ; (CAF8) Return from Subroutine

; Memory $CAF9
            .byte $8C,$FF,$FF,$4C,$DA,$CE,$EA,$60,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA
            .byte $EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA
            .byte $EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$60,$01

; Memory $CB24

l_CB24
                    STA $CB23                       ; (CB24) Store A to $CB23
                    TAX                             ; (CB27) Transfer A to X
                    ASL A                           ; (CB28) Arithmetic Shift Left Accumulator
                    TAY                             ; (CB29) Transfer A to Y
                    LDA $CF0D,X                     ; (CB2A) Load A with $CF0D,X
                    TAX                             ; (CB2D) Transfer A to X
                    LDA $4519,X                     ; (CB2E) Load A with $4519,X
                    STA Sprite2_X,Y                 ; (CB31) Store A to $D004,Y
                    LDA $451A,X                     ; (CB34) Load A with $451A,X
                    STA Sprite2_Y,Y                 ; (CB37) Store A to $D005,Y
                    LDY $CB23                       ; (CB3A) Load Y with $CB23
                    LDA Var_BinaryEnemyNum,Y                     ; (CB3D) Load A with Var_BinaryEnemyNum,Y
                    EOR #$FF                        ; (CB40) Exclusive OR (XOR) with Accumulator and #$FF (255 / 11111111)
                    AND Sprite_upper_X              ; (CB42) Logical AND with Accumulator $D010
                    STA Sprite_upper_X              ; (CB45) Store A to $D010
                    LDA $451B,X                     ; (CB48) Load A with $451B,X
                    ORA Sprite_upper_X              ; (CB4B) Logical OR with Accumulator and $D010
                    STA Sprite_upper_X              ; (CB4E) Store A to $D010
                    NOP                             ; (CB51) No operation
                    LDA $451C,X                     ; (CB52) Load A with $451C,X
                    CMP #$00                        ; (CB55) Subtract #$00 from A (0 / 00000000)
                    BEQ l_CBBB                      ; (CB57) Branch to $CBBB if Equal
                    JSR l_C9F1                      ; (CB59) Jump to Subroutine at $C9F1

l_CB5C
                    LDA #$00                        ; (CB5C) Set A to #$00 (0 / 00000000)
                    STA $CF12                       ; (CB5E) Store A to $CF12

l_CB61
                    LDX $CB23                       ; (CB61) Load X with $CB23
                    LDA $CF0D,X                     ; (CB64) Load A with $CF0D,X
                    TAX                             ; (CB67) Transfer A to X
                    LDA $CF12                       ; (CB68) Load A with $CF12
                    CMP $451C,X                     ; (CB6B) Subtract $451C,X from A
                    BEQ l_CB8B                      ; (CB6E) Branch to $CB8B if Equal
                    DEY                             ; (CB70) Decrement Y
                    CPY #$00                        ; (CB71) Subtract #$00 from Y (0 / 00000000)
                    BEQ l_CBBB                      ; (CB73) Branch to $CBBB if Equal
                    INC $CF12                       ; (CB75) Increment Memory $CF12
                    LDA #$03                        ; (CB78) Set A to #$03 (3 / 00000011)
                    STY $CF13                       ; (CB7A) Store Y to $CF13
                    LDX $CB23                       ; (CB7D) Load X with $CB23
                    INX                             ; (CB80) Increment X
                    INX                             ; (CB81) Increment X
                    JSR Sub_UpdateSpritePositions                      ; (CB82) Jump to Subroutine at $C900
                    LDY $CF13                       ; (CB85) Load Y with $CF13
                    JMP l_CB61                      ; (CB88) Jump to $CB61

l_CB8B
                    LDA $CB23                       ; (CB8B) Load A with $CB23
                    TAX                             ; (CB8E) Transfer A to X
                    ASL A                           ; (CB8F) Arithmetic Shift Left Accumulator
                    STY $CF13                       ; (CB90) Store Y to $CF13
                    TAY                             ; (CB93) Transfer A to Y
                    LDA $CF0D,X                     ; (CB94) Load A with $CF0D,X
                    TAX                             ; (CB97) Transfer A to X
                    LDA $4519,X                     ; (CB98) Load A with $4519,X
                    STA Sprite2_X,Y                 ; (CB9B) Store A to $D004,Y
                    LDY $CB23                       ; (CB9E) Load Y with $CB23
                    LDA Var_BinaryEnemyNum,Y                     ; (CBA1) Load A with Var_BinaryEnemyNum,Y
                    EOR #$FF                        ; (CBA4) Exclusive OR (XOR) with Accumulator and #$FF (255 / 11111111)
                    AND Sprite_upper_X              ; (CBA6) Logical AND with Accumulator $D010
                    STA Sprite_upper_X              ; (CBA9) Store A to $D010
                    LDA $451B,X                     ; (CBAC) Load A with $451B,X
                    ORA Sprite_upper_X              ; (CBAF) Logical OR with Accumulator and $D010
                    STA Sprite_upper_X              ; (CBB2) Store A to $D010
                    LDY $CF13                       ; (CBB5) Load Y with $CF13
                    JMP l_CB5C                      ; (CBB8) Jump to $CB5C

l_CBBB
                    LDA $451D,X                     ; (CBBB) Load A with $451D,X
                    CMP #$00                        ; (CBBE) Subtract #$00 from A (0 / 00000000)
                    BEQ l_CC0D                      ; (CBC0) Branch to $CC0D if Equal
                    JSR l_C9F1                      ; (CBC2) Jump to Subroutine at $C9F1

l_CBC5
                    LDA #$00                        ; (CBC5) Set A to #$00 (0 / 00000000)
                    STA $CF12                       ; (CBC7) Store A to $CF12

l_CBCA
                    LDX $CB23                       ; (CBCA) Load X with $CB23
                    LDA $CF0D,X                     ; (CBCD) Load A with $CF0D,X
                    TAX                             ; (CBD0) Transfer A to X
                    LDA $CF12                       ; (CBD1) Load A with $CF12
                    CMP $451D,X                     ; (CBD4) Subtract $451D,X from A
                    BEQ l_CBF4                      ; (CBD7) Branch to $CBF4 if Equal
                    DEY                             ; (CBD9) Decrement Y
                    CPY #$00                        ; (CBDA) Subtract #$00 from Y (0 / 00000000)
                    BEQ l_CC0D                      ; (CBDC) Branch to $CC0D if Equal
                    INC $CF12                       ; (CBDE) Increment Memory $CF12
                    LDA #$01                        ; (CBE1) Set A to #$01 (1 / 00000001)
                    STY $CF13                       ; (CBE3) Store Y to $CF13
                    LDX $CB23                       ; (CBE6) Load X with $CB23
                    INX                             ; (CBE9) Increment X
                    INX                             ; (CBEA) Increment X
                    JSR Sub_UpdateSpritePositions                      ; (CBEB) Jump to Subroutine at $C900
                    LDY $CF13                       ; (CBEE) Load Y with $CF13
                    JMP l_CBCA                      ; (CBF1) Jump to $CBCA

l_CBF4
                    LDA $CB23                       ; (CBF4) Load A with $CB23
                    TAX                             ; (CBF7) Transfer A to X
                    ASL A                           ; (CBF8) Arithmetic Shift Left Accumulator
                    STY $CF13                       ; (CBF9) Store Y to $CF13
                    TAY                             ; (CBFC) Transfer A to Y
                    LDA $CF0D,X                     ; (CBFD) Load A with $CF0D,X
                    TAX                             ; (CC00) Transfer A to X
                    LDA $451A,X                     ; (CC01) Load A with $451A,X
                    STA Sprite2_Y,Y                 ; (CC04) Store A to $D005,Y
                    LDY $CF13                       ; (CC07) Load Y with $CF13
                    JMP l_CBC5                      ; (CC0A) Jump to $CBC5

l_CC0D
                    RTS                             ; (CC0D) Return from Subroutine

; Memory $CC0E
            .byte $EA,$EA,$EA,$03

; Memory $CC12

l_CC12
                    STA $CC11                       ; (CC12) Store A to $CC11
                    TAX                             ; (CC15) Transfer A to X
                    LDA $CF15,X                     ; (CC16) Load A with $CF15,X
                    LDX $CC11                       ; (CC19) Load X with $CC11
                    JMP l_CC81                      ; (CC1C) Jump to $CC81

l_CC1F
                    LDX $CC11                       ; (CC1F) Load X with $CC11
                    INC $CF1A,X                     ; (CC22) Increment Memory $CF1A,X
                    LDA $CF1A,X                     ; (CC25) Load A with $CF1A,X
                    CMP #$08                        ; (CC28) Subtract #$08 from A (8 / 00001000)
                    BEQ l_CC2D                      ; (CC2A) Branch to $CC2D if Equal
                    RTS                             ; (CC2C) Return from Subroutine

l_CC2D
                    LDA #$00                        ; (CC2D) Set A to #$00 (0 / 00000000)
                    STA $CF1A,X                     ; (CC2F) Store A to $CF1A,X
                    LDA $453D,X                     ; (CC32) Load A with $453D,X
                    CMP #$00                        ; (CC35) Subtract #$00 from A (0 / 00000000)
                    BEQ l_CC3C                      ; (CC37) Branch to $CC3C if Equal
                    JMP l_CC65                      ; (CC39) Jump to $CC65

l_CC3C
                    LDA $575E,X                     ; (CC3C) Load A with $575E,X
                    STA $FB                         ; (CC3F) Store A to $FB
                    LDA $CF24,X                     ; (CC41) Load A with $CF24,X
                    STA $FC                         ; (CC44) Store A to $FC
                    LDA $CF29,X                     ; (CC46) Load A with $CF29,X
                    TAY                             ; (CC49) Transfer A to Y
                    INC $CF29,X                     ; (CC4A) Increment Memory $CF29,X
                    LDA ($FB),Y                     ; (CC4D) Load A with ($FB),Y
                    NOP                             ; (CC4F) No operation
                    NOP                             ; (CC50) No operation
                    CMP #$FF                        ; (CC51) Subtract #$FF from A (255 / 11111111)
                    BNE l_CC61                      ; (CC53) Branch to $CC61 if Not Equal
                    LDA #$01                        ; (CC55) Set A to #$01 (1 / 00000001)
                    LDX $CC11                       ; (CC57) Load X with $CC11
                    STA $CF29,X                     ; (CC5A) Store A to $CF29,X
                    LDY #$00                        ; (CC5D) Load Y with #$00 (0 / 00000000)
                    LDA ($FB),Y                     ; (CC5F) Load A with ($FB),Y

l_CC61
                    STA $CF15,X                     ; (CC61) Store A to $CF15,X
                    RTS                             ; (CC64) Return from Subroutine

l_CC65
                    JSR l_C9F1                      ; (CC65) Jump to Subroutine at $C9F1
                    TYA                             ; (CC68) Transfer Y to A
                    AND #$3F                        ; (CC69) Logical AND with Accumulator and #$3F (63 / 00111111)
                    TAY                             ; (CC6B) Transfer A to Y
                    LDX $CC11                       ; (CC6C) Load X with $CC11
                    LDA $575E,X                     ; (CC6F) Load A with $575E,X
                    STA $FB                         ; (CC72) Store A to $FB
                    LDA $CF24,X                     ; (CC74) Load A with $CF24,X
                    STA $FC                         ; (CC77) Store A to $FC
                    LDA ($FB),Y                     ; (CC79) Load A with ($FB),Y
                    STA $CF15,X                     ; (CC7B) Store A to $CF15,X
                    RTS                             ; (CC7E) Return from Subroutine

; Memory $CC7F
            .byte $EA,$EA

; Memory $CC81

l_CC81
                    TAY                             ; (CC81) Transfer A to Y
                    LDX $CC11                       ; (CC82) Load X with $CC11
                    INX                             ; (CC85) Increment X
                    INX                             ; (CC86) Increment X
                    JSR l_CA64                      ; (CC87) Jump to Subroutine at $CA64
                    CPY #$FF                        ; (CC8A) Subtract #$FF from Y (255 / 11111111)
                    BNE l_CCA4                      ; (CC8C) Branch to $CCA4 if Not Equal
                    LDX $CC11                       ; (CC8E) Load X with $CC11
                    LDA $4538,X                     ; (CC91) Load A with $4538,X
                    CMP #$00                        ; (CC94) Subtract #$00 from A (0 / 00000000)
                    BNE l_CCA4                      ; (CC96) Branch to $CCA4 if Not Equal
                    JSR l_CEEE                      ; (CC98) Jump to Subroutine at $CEEE
                    EOR #$FF                        ; (CC9B) Exclusive OR (XOR) with Accumulator and #$FF (255 / 11111111)
                    AND SpriteEnableRegister        ; (CC9D) Logical AND with Accumulator $D015
                    STA SpriteEnableRegister        ; (CCA0) Store A to $D015
                    RTS                             ; (CCA3) Return from Subroutine

l_CCA4
                    JMP l_CC1F                      ; (CCA4) Jump to $CC1F

; Memory $CCA7
            .byte $EA,$EA,$EA,$AA

; Memory $CCAB

l_CCAB
                    INC $CF2E,X                     ; (CCAB) Increment Memory $CF2E,X
                    LDA $CF2E,X                     ; (CCAE) Load A with $CF2E,X
                    CMP $CF9C,X                     ; (CCB1) Subtract $CF9C,X from A
                    BNE l_CCBF                      ; (CCB4) Branch to $CCBF if Not Equal
                    LDA #$00                        ; (CCB6) Set A to #$00 (0 / 00000000)
                    STA $CF2E,X                     ; (CCB8) Store A to $CF2E,X
                    TXA                             ; (CCBB) Transfer X to A
                    JSR l_CC12                      ; (CCBC) Jump to Subroutine at $CC12

l_CCBF
                    INC $CF97,X                     ; (CCBF) Increment Memory $CF97,X
                    LDA $CF97,X                     ; (CCC2) Load A with $CF97,X
                    CMP #$10                        ; (CCC5) Subtract #$10 from A (16 / 00010000)
                    BNE l_CCF2                      ; (CCC7) Branch to $CCF2 if Not Equal
                    LDA #$00                        ; (CCC9) Set A to #$00 (0 / 00000000)
                    STA $CF97,X                     ; (CCCB) Store A to $CF97,X
                    LDX $CEFF                       ; (CCCE) Load X with $CEFF
                    INC $CF33,X                     ; (CCD1) Increment Memory $CF33,X
                    LDA $CF33,X                     ; (CCD4) Load A with $CF33,X
                    CMP $54E5,X                     ; (CCD7) Subtract $54E5,X from A
                    BNE l_CCF2                      ; (CCDA) Branch to $CCF2 if Not Equal
                    LDA #$00                        ; (CCDC) Set A to #$00 (0 / 00000000)
                    STA $CF33,X                     ; (CCDE) Store A to $CF33,X
                    LDA $07FA,X                     ; (CCE1) Load A with $07FA,X
                    INC $07FA,X                     ; (CCE4) Increment Memory $07FA,X
                    CMP $CF38,X                     ; (CCE7) Subtract $CF38,X from A
                    BNE l_CCF2                      ; (CCEA) Branch to $CCF2 if Not Equal
                    LDA $CF3D,X                     ; (CCEC) Load A with $CF3D,X
                    STA $07FA,X                     ; (CCEF) Store A to $07FA,X

l_CCF2
                    RTS                             ; (CCF2) Return from Subroutine

; Memory $CCF3
            .byte $EA,$EA

; Memory $CCF5

l_CCF5
                    LDA SpriteEnableRegister        ; (CCF5) Load A with $D015
                    AND #$80                        ; (CCF8) Logical AND with Accumulator and #$80 (128 / 10000000)
                    CMP #$00                        ; (CCFA) Subtract #$00 from A (0 / 00000000)
                    BEQ l_CD01                      ; (CCFC) Branch to $CD01 if Equal
                    JMP l_CD55                      ; (CCFE) Jump to $CD55

l_CD01
                    JSR l_CD7B                      ; (CD01) Jump to Subroutine at $CD7B
                    CPY $4553                       ; (CD04) Compare Y Register $4553
                    BPL l_CD55                      ; (CD07) Branch to $CD55 if positive

l_CD09
                    JSR l_C9F1                      ; (CD09) Jump to Subroutine at $C9F1
                    TYA                             ; (CD0C) Transfer Y to A
                    AND #$07                        ; (CD0D) Logical AND with Accumulator and #$07 (7 / 00000111)
                    CMP #$05                        ; (CD0F) Subtract #$05 from A (5 / 00000101)
                    BPL l_CD09                      ; (CD11) Branch to $CD09 if positive
                    TAX                             ; (CD13) Transfer A to X
                    JMP l_C000                      ; (CD14) Jump to $C000

l_CD17
                    CMP #$04                        ; (CD17) Subtract #$04 from A (4 / 00000100)
                    BEQ l_CD55                      ; (CD19) Branch to $CD55 if Equal
                    STA $CF44                       ; (CD1B) Store A to $CF44
                    LDA SpriteEnableRegister        ; (CD1E) Load A with $D015
                    ORA #$80                        ; (CD21) Logical OR with Accumulator and #$80 (128 / 10000000)
                    STA SpriteEnableRegister        ; (CD23) Store A to $D015
                    LDA $454D                       ; (CD26) Load A with $454D
                    STA Sprite7Colour               ; (CD29) Store A to $D02E
                    TXA                             ; (CD2C) Transfer X to A
                    ASL A                           ; (CD2D) Arithmetic Shift Left Accumulator
                    TAX                             ; (CD2E) Transfer A to X
                    LDA Sprite2_X,X                 ; (CD2F) Load A with $D004,X
                    STA Sprite7_X                   ; (CD32) Store A to $D00E
                    LDA Sprite2_Y,X                 ; (CD35) Load A with $D005,X
                    STA Sprite7_Y                   ; (CD38) Store A to $D00F
                    TXA                             ; (CD3B) Transfer X to A
                    LSR A                           ; (CD3C) Logical Shift Right Accumulator
                    TAX                             ; (CD3D) Transfer A to X
                    LDA #$7F                        ; (CD3E) Set A to #$7F (127 / 01111111)
                    AND Sprite_upper_X              ; (CD40) Logical AND with Accumulator $D010
                    STA Sprite_upper_X              ; (CD43) Store A to $D010
                    AND $CF46,X                     ; (CD46) Logical AND with Accumulator $CF46,X
                    CMP #$00                        ; (CD49) Subtract #$00 from A (0 / 00000000)
                    BEQ l_CD55                      ; (CD4B) Branch to $CD55 if Equal
                    LDA #$80                        ; (CD4D) Set A to #$80 (128 / 10000000)
                    ORA Sprite_upper_X              ; (CD4F) Logical OR with Accumulator and $D010
                    STA Sprite_upper_X              ; (CD52) Store A to $D010

l_CD55
                    INC $CF45                       ; (CD55) Increment Memory $CF45
                    LDA $CF45                       ; (CD58) Load A with $CF45
                    CMP $4554                       ; (CD5B) Subtract $4554 from A
                    BNE l_CD79                      ; (CD5E) Branch to $CD79 if Not Equal
                    LDA #$00                        ; (CD60) Set A to #$00 (0 / 00000000)
                    STA $CF45                       ; (CD62) Store A to $CF45
                    LDA $CF44                       ; (CD65) Load A with $CF44
                    LDX #$07                        ; (CD68) Set X to #$07 (7 / 00000111)
                    JSR Sub_UpdateSpritePositions                      ; (CD6A) Jump to Subroutine at $C900
                    CPY #$FF                        ; (CD6D) Subtract #$FF from Y (255 / 11111111)
                    BNE l_CD79                      ; (CD6F) Branch to $CD79 if Not Equal
                    LDA SpriteEnableRegister        ; (CD71) Load A with $D015
                    AND #$7F                        ; (CD74) Logical AND with Accumulator and #$7F (127 / 01111111)
                    STA SpriteEnableRegister        ; (CD76) Store A to $D015

l_CD79
                    RTS                             ; (CD79) Return from Subroutine

; Memory $CD7A
            .byte $EA

; Memory $CD7B

l_CD7B
                    JSR l_C9F1                      ; (CD7B) Jump to Subroutine at $C9F1
                    TYA                             ; (CD7E) Transfer Y to A
                    AND #$7F                        ; (CD7F) Logical AND with Accumulator and #$7F (127 / 01111111)
                    STA $CF4C                       ; (CD81) Store A to $CF4C
                    JSR l_C9F1                      ; (CD84) Jump to Subroutine at $C9F1
                    TYA                             ; (CD87) Transfer Y to A
                    AND #$7F                        ; (CD88) Logical AND with Accumulator and #$7F (127 / 01111111)
                    CMP #$78                        ; (CD8A) Subtract #$78 from A (120 / 01111000)
                    BPL l_CD93                      ; (CD8C) Branch to $CD93 if positive
                    LDY #$7F                        ; (CD8E) Load Y with #$7F (127 / 01111111)
                    JMP l_CD96                      ; (CD90) Jump to $CD96

l_CD93
                    LDY $CF4C                       ; (CD93) Load Y with $CF4C

l_CD96
                    RTS                             ; (CD96) Return from Subroutine

; Memory $CD97
            .byte $EA,$EA,$EA,$4C,$87,$CE

; Memory $CD9D

l_CD9D
                    LDA $FD                         ; (CD9D) Load A with $FD
                    AND #$02                        ; (CD9F) Logical AND with Accumulator and #$02 (2 / 00000010)
                    BNE l_CDA6                      ; (CDA1) Branch to $CDA6 if Not Equal
                    JMP l_CD96                      ; (CDA3) Jump to $CD96

l_CDA6
                    LDX #$00                        ; (CDA6) Set X to #$00 (0 / 00000000)
                    LDY #$00                        ; (CDA8) Load Y with #$00 (0 / 00000000)

l_CDAA
                    LDA $CF46,X                     ; (CDAA) Load A with $CF46,X
                    AND $FD                         ; (CDAD) Logical AND with Accumulator $FD
                    BEQ l_CDB2                      ; (CDAF) Branch to $CDB2 if Equal
                    INY                             ; (CDB1) Increment Y Register

l_CDB2
                    INX                             ; (CDB2) Increment X
                    CPX #$05                        ; (CDB3) Subtract #$05 from X (5 / 00000101)
                    BNE l_CDAA                      ; (CDB5) Branch to $CDAA if Not Equal
                    CPY #$00                        ; (CDB7) Subtract #$00 from Y (0 / 00000000)
                    BNE l_CDBE                      ; (CDB9) Branch to $CDBE if Not Equal
                    JMP l_CD96                      ; (CDBB) Jump to $CD96

l_CDBE
                    LDX #$02                        ; (CDBE) Set X to #$02 (2 / 00000010)
                    JSR l_5B44                      ; (CDC0) Jump to Subroutine at $5B44
                    RTS                             ; (CDC3) Return from Subroutine

; Memory $CDC4
            .byte $DA,$DA,$DA,$AD,$4D,$CF,$C9,$04,$F0,$05,$E8,$4A,$4C,$CA,$CD,$8E
            .byte $4E,$CF,$BD,$56,$45,$F0,$0D,$4C,$FA,$CD,$A2,$02,$20,$44,$5B,$60
            .byte $01,$4C,$02,$CE,$60

; Memory $CDE9

l_CDE9
                    TAX                             ; (CDE9) Transfer A to X
                    LDA $CF4F,X                     ; (CDEA) Load A with $CF4F,X
                    CMP #$01                        ; (CDED) Subtract #$01 from A (1 / 00000001)
                    BEQ l_CDF4                      ; (CDEF) Branch to $CDF4 if Equal
                    JMP l_CCAB                      ; (CDF1) Jump to $CCAB

l_CDF4
                    JMP l_C607                      ; (CDF4) Jump to $C607

; Memory $CDF7
            .byte $EA,$EA,$EA,$BD,$4F,$CF,$C9,$01,$D0,$DD,$60,$9D,$4F,$CF,$A9,$FD
            .byte $2D,$15,$D0,$8D,$15,$D0,$4C,$6B,$CE,$60

; Memory $CE11

l_CE11
                    LDX #$06                        ; (CE11) Set X to #$06 (6 / 00000110)

l_CE13
                    INC $0405,X                     ; (CE13) Increment Memory $0405,X
                    LDA $0405,X                     ; (CE16) Load A with $0405,X
                    CMP #$BA                        ; (CE19) Subtract #$BA from A (186 / 10111010)
                    BNE l_CE27                      ; (CE1B) Branch to $CE27 if Not Equal
                    LDA #$B0                        ; (CE1D) Set A to #$B0 (176 / 10110000)
                    STA $0405,X                     ; (CE1F) Store A to $0405,X
                    DEX                             ; (CE22) Decrement X
                    CPX #$00                        ; (CE23) Subtract #$00 from X (0 / 00000000)
                    BNE l_CE13                      ; (CE25) Branch to $CE13 if Not Equal

l_CE27
                    RTS                             ; (CE27) Return from Subroutine

; Memory $CE28
            .byte $A2,$06,$DE,$05,$04,$BD,$05,$04,$C9,$AF,$D0,$0D,$A9,$B9,$9D,$05
            .byte $04,$CA,$E0,$00,$D0,$EC,$20,$11,$CE,$60

; Memory $CE42

l_CE42
                    LDA $CF5C                       ; (CE42) Load A with $CF5C
                    STA $CE53                       ; (CE45) Store A to $CE53

l_CE48
                    LDA $CF5A                       ; (CE48) Load A with $CF5A
                    CMP #$00                        ; (CE4B) Subtract #$00 from A (0 / 00000000)
                    BEQ l_CE58                      ; (CE4D) Branch to $CE58 if Equal
                    DEC $CF5A                       ; (CE4F) Decrement $CF5A

l_CE52
                    JSR l_CE11                      ; (CE52) Jump to Subroutine at $CE11
                    JMP l_CE48                      ; (CE55) Jump to $CE48

l_CE58
                    LDA $CF5B                       ; (CE58) Load A with $CF5B
                    CMP #$00                        ; (CE5B) Subtract #$00 from A (0 / 00000000)
                    BEQ l_CE6A                      ; (CE5D) Branch to $CE6A if Equal
                    DEC $CF5B                       ; (CE5F) Decrement $CF5B
                    LDA #$FF                        ; (CE62) Set A to #$FF (255 / 11111111)
                    STA $CF5A                       ; (CE64) Store A to $CF5A
                    JMP l_CE52                      ; (CE67) Jump to $CE52

l_CE6A
                    RTS                             ; (CE6A) Return from Subroutine

; Memory $CE6B
            .byte $AE,$4E,$CF,$BD,$60,$45,$8D,$5A,$CF,$BD,$65,$45,$8D,$5B,$CF,$BD
            .byte $6A,$45,$8D,$5C,$CF,$20,$42,$CE,$60,$EA,$EA,$EA

; Memory $CE87

l_CE87
                    LDA SpriteSpriteCollision       ; (CE87) Load A with $D01E
                    STA $FD                         ; (CE8A) Store A to $FD
                    AND #$01                        ; (CE8C) Logical AND with Accumulator and #$01 (1 / 00000001)
                    BNE l_CE93                      ; (CE8E) Branch to $CE93 if Not Equal
                    JMP l_CD9D                      ; (CE90) Jump to $CD9D

l_CE93
                    LDA $FD                         ; (CE93) Load A with $FD
                    AND #$02                        ; (CE95) Logical AND with Accumulator and #$02 (2 / 00000010)
                    BEQ l_CE9A                      ; (CE97) Branch to $CE9A if Equal
                    RTS                             ; (CE99) Return from Subroutine

l_CE9A
                    LDX #$00                        ; (CE9A) Set X to #$00 (0 / 00000000)
                    LDY #$00                        ; (CE9C) Load Y with #$00 (0 / 00000000)

l_CE9E
                    LDA $CF46,X                     ; (CE9E) Load A with $CF46,X
                    AND $FD                         ; (CEA1) Logical AND with Accumulator $FD
                    BEQ l_CEA6                      ; (CEA3) Branch to $CEA6 if Equal
                    INY                             ; (CEA5) Increment Y Register

l_CEA6
                    INX                             ; (CEA6) Increment X
                    CPX #$06                        ; (CEA7) Subtract #$06 from X (6 / 00000110)
                    BNE l_CE9E                      ; (CEA9) Branch to $CE9E if Not Equal
                    CPY #$01                        ; (CEAB) Subtract #$01 from Y (1 / 00000001)
                    BEQ l_CEB0                      ; (CEAD) Branch to $CEB0 if Equal
                    RTS                             ; (CEAF) Return from Subroutine

l_CEB0
                    LDA $FD                         ; (CEB0) Load A with $FD
                    AND #$FC                        ; (CEB2) Logical AND with Accumulator and #$FC (252 / 11111100)
                    STA $CF5E                       ; (CEB4) Store A to $CF5E
                    LDX #$00                        ; (CEB7) Set X to #$00 (0 / 00000000)

l_CEB9
                    CMP #$04                        ; (CEB9) Subtract #$04 from A (4 / 00000100)
                    BEQ l_CEC2                      ; (CEBB) Branch to $CEC2 if Equal
                    INX                             ; (CEBD) Increment X
                    LSR A                           ; (CEBE) Logical Shift Right Accumulator
                    JMP l_CEB9                      ; (CEBF) Jump to $CEB9

l_CEC2
                    STX $CF5F                       ; (CEC2) Store X to $CF5F
                    LDX #$02                        ; (CEC5) Set X to #$02 (2 / 00000010)
                    JSR l_5B44                      ; (CEC7) Jump to Subroutine at $5B44
                    JMP l_CD9D                      ; (CECA) Jump to $CD9D

; Memory $CECD
            .byte $6F,$45,$29,$01,$D0,$04,$60,$4C,$7B,$2F,$4C,$A7,$2F,$20,$ED,$CA
            .byte $CE,$1A,$04,$AD,$1A,$04,$C9,$B0,$F0,$01,$60,$A9,$01,$8D,$7D,$CF
            .byte $60

; Memory $CEEE

l_CEEE
                    INC $CF76,X                     ; (CEEE) Increment Memory $CF76,X
                    LDA Var_BinaryEnemyNum,X                     ; (CEF1) Load A with Var_BinaryEnemyNum,X
                    RTS                             ; (CEF4) Return from Subroutine

; Memory $CEF5
            .byte $EA

; Memory $CEF6

l_CEF6
                    STA Sprite0Colour               ; (CEF6) Store A to $D027
                    LDA $45EC                       ; (CEF9) Load A with $45EC
                    JMP l_CAED                      ; (CEFC) Jump to $CAED

; Memory $CEFF
            .byte $05,$00,$EA,$7F,$06,$00,$06,$00,$00,$04,$08,$10,$20,$40,$00,$05
            .byte $0A,$0F,$14,$0F,$01,$A9,$03,$00,$03,$03,$02,$07,$02,$04,$00,$06
            .byte $EA,$EA,$EA,$20,$11,$4A,$4A,$4A,$4A,$4A,$01,$01,$01,$01,$01,$1C
            .byte $01,$09,$01,$09,$03,$03,$01,$01,$00,$A3,$A7,$97,$93,$3B,$A0,$A4
            .byte $94,$90,$38,$0D,$3C,$02,$2F,$04,$08,$10,$20,$40,$80,$49,$10,$02
            .byte $00,$00,$00,$00,$00,$40,$08,$04,$08,$04,$0A,$00,$00,$11,$48,$20
            .byte $03,$0B,$00,$EA,$04,$EA,$FF,$00,$00,$A0,$A4,$94,$90,$38,$BA,$C1
            .byte $C8,$CF,$D6,$EA,$00,$00,$C1,$C6,$C6,$14,$00,$C6,$40,$B2,$00,$02
            .byte $00,$EA,$00,$0A,$0A,$0A,$0A,$0A,$0F,$00,$01,$00,$00,$00,$01,$00
            .byte $00,$01,$00,$01,$00,$00,$00,$00,$02,$01,$05,$04,$08,$1F,$28,$10
            .byte $08,$20,$8C,$85,$96,$85,$8C,$A0,$B0,$B0,$B1,$87,$81,$8D,$85,$A0
            .byte $8F,$96,$85,$92,$EC,$EC,$EC,$ED,$EC,$EC,$EC,$ED,$EC,$ED,$ED,$ED
            .byte $ED

; Memory $CFC0

l_CFC0
                    JSR l_5733                      ; (CFC0) Jump to Subroutine at $5733
                    LDX #$00                        ; (CFC3) Set X to #$00 (0 / 00000000)

l_CFC5
                    LDA $CFA1,X                     ; (CFC5) Load A with $CFA1,X
                    LDA $0617,X                     ; (CFC8) Load A with $0617,X
                    LDA $D81A                       ; (CFCB) Load A with $D81A
                    LDA #$01                        ; (CFCE) Set A to #$01 (1 / 00000001)
                    NOP                             ; (CFD0) No operation
                    STA $D838,X                     ; (CFD1) Store A to $D838,X
                    LDA $CFAA,X                     ; (CFD4) Load A with $CFAA,X
                    STA $0438,X                     ; (CFD7) Store A to $0438,X
                    INX                             ; (CFDA) Increment X
                    CPX #$09                        ; (CFDB) Subtract #$09 from X (9 / 00001001)
                    BNE l_CFC5                      ; (CFDD) Branch to $CFC5 if Not Equal
                    RTS                             ; (CFDF) Return from Subroutine

; Memory $CFE0
            .byte $33,$57,$00,$00,$EE,$EC,$ED,$EE,$ED,$ED,$ED,$ED,$ED,$ED,$ED,$ED
            .byte $EE,$F2,$F2,$F2,$32,$F1,$F1,$F1,$20,$F1,$F1,$F0,$F1,$EF,$EF,$01